
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        A_01_01_a02_01

  @Level:         1
  @Assertion:   A.1.1(2)
                LineComment
                    : '//' ~[\u000A\u000D]*
                    ;
  @Description: Check line comment syntax
  @Comment:     Auto-generated tests by gen_comments_tests_a02.py with seed = 1
  @Mode:        run
  @Negative:    no
  @Structure:   single
*/
import utils.assert.Assert

////f4, no accessible after all requested (in the scenario that has three types: 1.For unary prefix negative ( ;)

main() { //()and just a compilation error } c)Bidirectional conversion between two tokens is Unit. Since classes modified Note that, when operators are allowed here. 6.2.2 Interface Declaration 6.2.1.1 Syntax of xand yrespectively from package p1 public func abs(x:Float64 ){ let foo3 foo3 is T.a,Tcan be used as follows. struct in interface If the following is as arguments with private,protected (only can both a non-generic interface, struct TaggedPoint { foo1(inout n) // Within the queue is as equivalence. Character Byte Literals Integer literals are divided into (Y, (Y) -> C1` return value that
  var t1: Int64 = 123 //C1are legal since all types It is instantiated, the mapping rules above operators it is the ability to ; t1 = 321
  Assert.equals(123, t1)
  return 0
}

//⎠= (𝐽𝑛)𝑇∗⎛⎜⎜⎜⎜⎜ ⎝𝜕𝑦 𝜕𝑥1𝜕𝑦 𝜕𝑥2 ... ; collectionLiteral | MOD_ASSIGN | VAR | (DecimalLiteral DecimalExponent | RSHIFT_ASSIGN ↪ public var a:Int32 =1 let arr1 :VArray <Int64 ,V>where V <: superClass (NL* typeParameters)? ; ASSIGN: '=' ; BOOLEAN: 'Bool' ; multiplicativeExpression (additiveOperator multiplicativeExpression)* ; DO: 'do' block after the following table lists the syntax definition, which is not allowed within a type. For example, @Outer @Inner(22+3) , the following try block, m.unlock() } 10.2.2 The actual value of sealed class or fractional
