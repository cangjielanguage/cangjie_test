
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        A_01_01_a02_05

  @Level:         1
  @Assertion:   A.1.1(2)
                LineComment
                    : '//' ~[\u000A\u000D]*
                    ;
  @Description: Check line comment syntax
  @Comment:     Auto-generated tests by gen_comments_tests_a02.py with seed = 1
  @Mode:        run
  @Negative:    no
  @Structure:   single
*/
import utils.assert.Assert

//2e3 // array0 =[1,2,3,3,2,1] // | EXP_ASSIGN | 'Int16' ; jumpExpression | '-=' | refTransferExpression : UniCharacterLiteral | operatorFunctionDefinition indicates the macro expander However, when it will lead to define string literal, it is the type typeParameters NL*)? FUNC NL* valueArgument)* NL*)? INTERFACE NL* DOUBLE_ARROW NL* MACRO NL* (macroInputExprWithoutParens | structPrimaryInit : 1.Accessestothesamevariableofthesameprimitivetype, enum, but can only be substituted to handle the Javaside are given ReentrantMutex <:IReentrantMutex { var c=a.f() // `multiply` is directly by a block

main() { //above, structModifier indicates any renaming such as a special initialization rules and the same
  var t1: Int64 = 123 //-1.0POSITIVE_INFINITY num = e2; {x => return ; t1 = 321
  Assert.equals(123, t1)
  return 0
}

//{a=>} } } } print( "${index }is divisible by numeric type is as a variable of the following rules: 1.Names from Int16toFloat32,Float64; conversion supported by public class C1{ static class Foo <:I1&I2{// not be used: foreign class In this class A multi-line string literals, multi-line string""" /* The coalescing operator functions imported module, which multiple operators listed above. Arithmetic Expressions ) is defined in this annotation, only if they can be generic functions (Note: It is garbage collector This class B<:A { while (true ){ let range15 =. // Equivalenceï¿¿obj(a) 4.22.2 The
