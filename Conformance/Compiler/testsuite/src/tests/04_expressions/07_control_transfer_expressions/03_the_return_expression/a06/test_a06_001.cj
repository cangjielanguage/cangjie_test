
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_07_03_a06_001

  @Level:         1

  @Assertion:   4.7.3(6) Therefore, the type of expr must be the same as the return type of the function.
  @Description: Checks that value of type T can be returned from a function with return type T for various T,
  @Mode: run
  @Negative: no
  @Structure: single
  @CompileWarning: ignore
  @Comment: Auto-generated by gen.py

*/

func f<T>(x : T) { return x }

type Tuple = (Int64, Int64)

type Array = Array<Int64>

type Range = Range<Int64>

class C {
    let x : Int64

    init(y : Int64) { x = y }

    operator func ==(other : C) { x == other.x }
}

struct S {
    let x : Int64

    init(y : Int64) { x = y }

    operator func ==(other : S) { x == other.x }
}

func fInt8(x : Int8) { return x }

func fInt16(x : Int16) { return x }

func fInt32(x : Int32) { return x }

func fInt64(x : Int64) { return x }

func fIntNative(x : IntNative) { return x }

func fUInt8(x : UInt8) { return x }

func fUInt16(x : UInt16) { return x }

func fUInt32(x : UInt32) { return x }

func fUInt64(x : UInt64) { return x }

func fUIntNative(x : UIntNative) { return x }

func fFloat16(x : Float16) { return x }

func fFloat32(x : Float32) { return x }

func fFloat64(x : Float64) { return x }

func fString(x : String) { return x }

func fChar(x : Rune) { return x }

func fBool(x : Bool) { return x }

func fUnit(x : Unit) { return x }

func fTuple(x : Tuple) { return x }

func fArray(x : Array) { return x }

func fRange(x : Range) { return x }

func fC(x : C) { return x }

func fS(x : S) { return x }

main() {
    fInt8(1)
    fInt16(1)
    fInt32(1)
    fInt64(1)
    fIntNative(1)
    fUInt8(1)
    fUInt16(1)
    fUInt32(1)
    fUInt64(1)
    fUIntNative(1)
    fFloat16(1.0)
    fFloat32(1.0)
    fFloat64(1.0)
    fString("1")
    fChar(r'1')
    fBool(true)
    fUnit(())
    fTuple((1, 1))
    fArray([1])
    fRange(1..2)
    fC(C(1))
    fS(S(1))

    f<Int8>(1)
    f<Int16>(1)
    f<Int32>(1)
    f<Int64>(1)
    f<IntNative>(1)
    f<UInt8>(1)
    f<UInt16>(1)
    f<UInt32>(1)
    f<UInt64>(1)
    f<UIntNative>(1)
    f<Float16>(1.0)
    f<Float32>(1.0)
    f<Float64>(1.0)
    f<String>("1")
    f<Rune>(r'1')
    f<Bool>(true)
    f<Unit>(())
    f<Tuple>((1, 1))
    f<Array>([1])
    f<Range>(1..2)
    f<C>(C(1))
    f<S>(S(1))

    0
}
