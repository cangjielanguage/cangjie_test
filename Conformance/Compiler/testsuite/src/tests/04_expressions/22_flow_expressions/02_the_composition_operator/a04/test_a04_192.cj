
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_22_02_a04_192

  @Level:         1

  @Assertion:   4.22.2(4)             e1 ~> e2                         |            The lambda expression
                ------------------------------------------------------------------------------------------
                f is a function type, and the type of g implements the | let f = e1; let g = e2;
                the single-parameter operator () overloading function, | {x => g.operator()(f(x))}
                and the return value type of f is a subtype of the     | 
                argument type of g.operator ()                         |
  @Description: Checks that composition f ~> g is not permitted when return type of f is (A, C) -> (B, C)
                and argument type of g is (A, B) -> (A, C).
  @Mode: compileonly
  @Negative: yes
  @Structure: complex-main
  @Dependencies: ../aux_decl.cj
  @CompileWarning: no
  @Comment: Auto-generated by gen.py

*/

class G {
    operator func ()(arg : (A, C) -> (B, C)) { }
}

main() {
    let f = { arg : String => {x0 : A, x1 : B => ((A(), C()))} }
    let g = G()
    (f ~> g)("1")
}
