
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_22_02_a02_001

  @Level:         1

  @Assertion:   4.22.2(2) If f and g are expressions of the function type or their type implements the
                single-parameter operator () overloading function, (see Operators that can be Overloaded), the
                following situations may occur:
                                 e1 ~> e2                          |            The lambda expression
                --------------------------------------------------------------------------------------------
                e1 and e2 are function types, and the return value | let f = e1; let g = e2; {x => g(f(x))}
                type of e1 is a subtype of the argument type of e2 |
  @Description: Checks that composition f ~> g is permitted when return type T1 of f is a subtype of argument type T2
                of g and for various T1 and T2 and behaves like { x => g(f(x)) }.
  @Mode: run
  @Negative: no
  @Structure: complex-main
  @Dependencies: ../aux_decl.cj
  @CompileWarning: ignore
  @Comment: Auto-generated by gen.py
  @Issue: 6523

*/

import utils.assert.Assert

var logStr = ""

main() {
    let f0 = { arg : String => logStr += arg + " |> (f0"; 1i8 }
    let g0 = { arg : Int8 => logStr += " ~> g0)" }
    logStr = ""
    (f0 ~> g0)("1")
    Assert.equals("1 |> (f0 ~> g0)", logStr)
    logStr = ""
    { x : String => g0(f0(x)) }("1")
    Assert.equals("1 |> (f0 ~> g0)", logStr)

    let f1 = { arg : String => logStr += arg + " |> (f1"; 1i16 }
    let g1 = { arg : Int16 => logStr += " ~> g1)" }
    logStr = ""
    (f1 ~> g1)("1")
    Assert.equals("1 |> (f1 ~> g1)", logStr)
    logStr = ""
    { x : String => g1(f1(x)) }("1")
    Assert.equals("1 |> (f1 ~> g1)", logStr)

    let f2 = { arg : String => logStr += arg + " |> (f2"; 1i32 }
    let g2 = { arg : Int32 => logStr += " ~> g2)" }
    logStr = ""
    (f2 ~> g2)("1")
    Assert.equals("1 |> (f2 ~> g2)", logStr)
    logStr = ""
    { x : String => g2(f2(x)) }("1")
    Assert.equals("1 |> (f2 ~> g2)", logStr)

    let f3 = { arg : String => logStr += arg + " |> (f3"; 1i64 }
    let g3 = { arg : Int64 => logStr += " ~> g3)" }
    logStr = ""
    (f3 ~> g3)("1")
    Assert.equals("1 |> (f3 ~> g3)", logStr)
    logStr = ""
    { x : String => g3(f3(x)) }("1")
    Assert.equals("1 |> (f3 ~> g3)", logStr)

    let f4 = { arg : String => logStr += arg + " |> (f4"; 1u8 }
    let g4 = { arg : UInt8 => logStr += " ~> g4)" }
    logStr = ""
    (f4 ~> g4)("1")
    Assert.equals("1 |> (f4 ~> g4)", logStr)
    logStr = ""
    { x : String => g4(f4(x)) }("1")
    Assert.equals("1 |> (f4 ~> g4)", logStr)

    let f5 = { arg : String => logStr += arg + " |> (f5"; 1u16 }
    let g5 = { arg : UInt16 => logStr += " ~> g5)" }
    logStr = ""
    (f5 ~> g5)("1")
    Assert.equals("1 |> (f5 ~> g5)", logStr)
    logStr = ""
    { x : String => g5(f5(x)) }("1")
    Assert.equals("1 |> (f5 ~> g5)", logStr)

    let f6 = { arg : String => logStr += arg + " |> (f6"; 1u32 }
    let g6 = { arg : UInt32 => logStr += " ~> g6)" }
    logStr = ""
    (f6 ~> g6)("1")
    Assert.equals("1 |> (f6 ~> g6)", logStr)
    logStr = ""
    { x : String => g6(f6(x)) }("1")
    Assert.equals("1 |> (f6 ~> g6)", logStr)

    let f7 = { arg : String => logStr += arg + " |> (f7"; 1u64 }
    let g7 = { arg : UInt64 => logStr += " ~> g7)" }
    logStr = ""
    (f7 ~> g7)("1")
    Assert.equals("1 |> (f7 ~> g7)", logStr)
    logStr = ""
    { x : String => g7(f7(x)) }("1")
    Assert.equals("1 |> (f7 ~> g7)", logStr)

    let f8 = { arg : String => logStr += arg + " |> (f8"; 1.0f16 }
    let g8 = { arg : Float16 => logStr += " ~> g8)" }
    logStr = ""
    (f8 ~> g8)("1")
    Assert.equals("1 |> (f8 ~> g8)", logStr)
    logStr = ""
    { x : String => g8(f8(x)) }("1")
    Assert.equals("1 |> (f8 ~> g8)", logStr)

    let f9 = { arg : String => logStr += arg + " |> (f9"; 1.0f32 }
    let g9 = { arg : Float32 => logStr += " ~> g9)" }
    logStr = ""
    (f9 ~> g9)("1")
    Assert.equals("1 |> (f9 ~> g9)", logStr)
    logStr = ""
    { x : String => g9(f9(x)) }("1")
    Assert.equals("1 |> (f9 ~> g9)", logStr)

    let f10 = { arg : String => logStr += arg + " |> (f10"; 1.0f64 }
    let g10 = { arg : Float64 => logStr += " ~> g10)" }
    logStr = ""
    (f10 ~> g10)("1")
    Assert.equals("1 |> (f10 ~> g10)", logStr)
    logStr = ""
    { x : String => g10(f10(x)) }("1")
    Assert.equals("1 |> (f10 ~> g10)", logStr)

    let f11 = { arg : String => logStr += arg + " |> (f11"; "1" }
    let g11 = { arg : String => logStr += " ~> g11)" }
    logStr = ""
    (f11 ~> g11)("1")
    Assert.equals("1 |> (f11 ~> g11)", logStr)
    logStr = ""
    { x : String => g11(f11(x)) }("1")
    Assert.equals("1 |> (f11 ~> g11)", logStr)

    let f12 = { arg : String => logStr += arg + " |> (f12"; r'1' }
    let g12 = { arg : Rune => logStr += " ~> g12)" }
    logStr = ""
    (f12 ~> g12)("1")
    Assert.equals("1 |> (f12 ~> g12)", logStr)
    logStr = ""
    { x : String => g12(f12(x)) }("1")
    Assert.equals("1 |> (f12 ~> g12)", logStr)

    let f13 = { arg : String => logStr += arg + " |> (f13"; true }
    let g13 = { arg : Bool => logStr += " ~> g13)" }
    logStr = ""
    (f13 ~> g13)("1")
    Assert.equals("1 |> (f13 ~> g13)", logStr)
    logStr = ""
    { x : String => g13(f13(x)) }("1")
    Assert.equals("1 |> (f13 ~> g13)", logStr)

    let f14 = { arg : String => logStr += arg + " |> (f14"; () }
    let g14 = { arg : Unit => logStr += " ~> g14)" }
    logStr = ""
    (f14 ~> g14)("1")
    Assert.equals("1 |> (f14 ~> g14)", logStr)
    logStr = ""
    { x : String => g14(f14(x)) }("1")
    Assert.equals("1 |> (f14 ~> g14)", logStr)

    let f15 = { arg : String => logStr += arg + " |> (f15"; Object() }
    let g15 = { arg : Object => logStr += " ~> g15)" }
    logStr = ""
    (f15 ~> g15)("1")
    Assert.equals("1 |> (f15 ~> g15)", logStr)
    logStr = ""
    { x : String => g15(f15(x)) }("1")
    Assert.equals("1 |> (f15 ~> g15)", logStr)

    let f16 = { arg : String => logStr += arg + " |> (f16"; (1, 1) }
    let g16 = { arg : Tuple => logStr += " ~> g16)" }
    logStr = ""
    (f16 ~> g16)("1")
    Assert.equals("1 |> (f16 ~> g16)", logStr)
    logStr = ""
    { x : String => g16(f16(x)) }("1")
    Assert.equals("1 |> (f16 ~> g16)", logStr)

    let f17 = { arg : String => logStr += arg + " |> (f17"; [1] }
    let g17 = { arg : Array => logStr += " ~> g17)" }
    logStr = ""
    (f17 ~> g17)("1")
    Assert.equals("1 |> (f17 ~> g17)", logStr)
    logStr = ""
    { x : String => g17(f17(x)) }("1")
    Assert.equals("1 |> (f17 ~> g17)", logStr)

    let f18 = { arg : String => logStr += arg + " |> (f18"; 1..2 }
    let g18 = { arg : Range => logStr += " ~> g18)" }
    logStr = ""
    (f18 ~> g18)("1")
    Assert.equals("1 |> (f18 ~> g18)", logStr)
    logStr = ""
    { x : String => g18(f18(x)) }("1")
    Assert.equals("1 |> (f18 ~> g18)", logStr)

    let f19 = { arg : String => logStr += arg + " |> (f19"; iN() }
    let g19 = { arg : IntNative => logStr += " ~> g19)" }
    logStr = ""
    (f19 ~> g19)("1")
    Assert.equals("1 |> (f19 ~> g19)", logStr)
    logStr = ""
    { x : String => g19(f19(x)) }("1")
    Assert.equals("1 |> (f19 ~> g19)", logStr)

    let f20 = { arg : String => logStr += arg + " |> (f20"; uN() }
    let g20 = { arg : UIntNative => logStr += " ~> g20)" }
    logStr = ""
    (f20 ~> g20)("1")
    Assert.equals("1 |> (f20 ~> g20)", logStr)
    logStr = ""
    { x : String => g20(f20(x)) }("1")
    Assert.equals("1 |> (f20 ~> g20)", logStr)

    let f54 = { arg : String => logStr += arg + " |> (f54"; A() }
    let g54 = { arg : Object => logStr += " ~> g54)" }
    logStr = ""
    (f54 ~> g54)("1")
    Assert.equals("1 |> (f54 ~> g54)", logStr)
    logStr = ""
    { x : String => g54(f54(x)) }("1")
    Assert.equals("1 |> (f54 ~> g54)", logStr)

    let f55 = { arg : String => logStr += arg + " |> (f55"; (A(), B(), C()) }
    let g55 = { arg : (A, A, A) => logStr += " ~> g55)" }
    logStr = ""
    (f55 ~> g55)("1")
    Assert.equals("1 |> (f55 ~> g55)", logStr)
    logStr = ""
    { x : String => g55(f55(x)) }("1")
    Assert.equals("1 |> (f55 ~> g55)", logStr)

    let f56 = { arg : String => logStr += arg + " |> (f56"; (A(), B(), C()) }
    let g56 = { arg : (A, A, B) => logStr += " ~> g56)" }
    logStr = ""
    (f56 ~> g56)("1")
    Assert.equals("1 |> (f56 ~> g56)", logStr)
    logStr = ""
    { x : String => g56(f56(x)) }("1")
    Assert.equals("1 |> (f56 ~> g56)", logStr)

    let f57 = { arg : String => logStr += arg + " |> (f57"; (A(), B(), C()) }
    let g57 = { arg : (A, A, C) => logStr += " ~> g57)" }
    logStr = ""
    (f57 ~> g57)("1")
    Assert.equals("1 |> (f57 ~> g57)", logStr)
    logStr = ""
    { x : String => g57(f57(x)) }("1")
    Assert.equals("1 |> (f57 ~> g57)", logStr)

    let f58 = { arg : String => logStr += arg + " |> (f58"; (A(), B(), C()) }
    let g58 = { arg : (A, B, A) => logStr += " ~> g58)" }
    logStr = ""
    (f58 ~> g58)("1")
    Assert.equals("1 |> (f58 ~> g58)", logStr)
    logStr = ""
    { x : String => g58(f58(x)) }("1")
    Assert.equals("1 |> (f58 ~> g58)", logStr)

    let f59 = { arg : String => logStr += arg + " |> (f59"; (A(), B(), C()) }
    let g59 = { arg : (A, B, B) => logStr += " ~> g59)" }
    logStr = ""
    (f59 ~> g59)("1")
    Assert.equals("1 |> (f59 ~> g59)", logStr)
    logStr = ""
    { x : String => g59(f59(x)) }("1")
    Assert.equals("1 |> (f59 ~> g59)", logStr)

    let f60 = { arg : String => logStr += arg + " |> (f60"; (A(), B(), C()) }
    let g60 = { arg : (A, B, C) => logStr += " ~> g60)" }
    logStr = ""
    (f60 ~> g60)("1")
    Assert.equals("1 |> (f60 ~> g60)", logStr)
    logStr = ""
    { x : String => g60(f60(x)) }("1")
    Assert.equals("1 |> (f60 ~> g60)", logStr)

    let f61 = { arg : String => logStr += arg + " |> (f61"; {x0 : A, x1 : B => ((A(), C()))} }
    let g61 = { arg : (A, B) -> (A, A) => logStr += " ~> g61)" }
    logStr = ""
    (f61 ~> g61)("1")
    Assert.equals("1 |> (f61 ~> g61)", logStr)
    logStr = ""
    { x : String => g61(f61(x)) }("1")
    Assert.equals("1 |> (f61 ~> g61)", logStr)

    let f62 = { arg : String => logStr += arg + " |> (f62"; {x0 : A, x1 : B => ((A(), C()))} }
    let g62 = { arg : (A, B) -> (A, B) => logStr += " ~> g62)" }
    logStr = ""
    (f62 ~> g62)("1")
    Assert.equals("1 |> (f62 ~> g62)", logStr)
    logStr = ""
    { x : String => g62(f62(x)) }("1")
    Assert.equals("1 |> (f62 ~> g62)", logStr)

    let f63 = { arg : String => logStr += arg + " |> (f63"; {x0 : A, x1 : B => ((A(), C()))} }
    let g63 = { arg : (A, B) -> (A, C) => logStr += " ~> g63)" }
    logStr = ""
    (f63 ~> g63)("1")
    Assert.equals("1 |> (f63 ~> g63)", logStr)
    logStr = ""
    { x : String => g63(f63(x)) }("1")
    Assert.equals("1 |> (f63 ~> g63)", logStr)

    let f64 = { arg : String => logStr += arg + " |> (f64"; {x0 : A, x1 : B => ((A(), C()))} }
    let g64 = { arg : (A, C) -> (A, A) => logStr += " ~> g64)" }
    logStr = ""
    (f64 ~> g64)("1")
    Assert.equals("1 |> (f64 ~> g64)", logStr)
    logStr = ""
    { x : String => g64(f64(x)) }("1")
    Assert.equals("1 |> (f64 ~> g64)", logStr)

    let f65 = { arg : String => logStr += arg + " |> (f65"; {x0 : A, x1 : B => ((A(), C()))} }
    let g65 = { arg : (A, C) -> (A, B) => logStr += " ~> g65)" }
    logStr = ""
    (f65 ~> g65)("1")
    Assert.equals("1 |> (f65 ~> g65)", logStr)
    logStr = ""
    { x : String => g65(f65(x)) }("1")
    Assert.equals("1 |> (f65 ~> g65)", logStr)

    let f66 = { arg : String => logStr += arg + " |> (f66"; {x0 : A, x1 : B => ((A(), C()))} }
    let g66 = { arg : (A, C) -> (A, C) => logStr += " ~> g66)" }
    logStr = ""
    (f66 ~> g66)("1")
    Assert.equals("1 |> (f66 ~> g66)", logStr)
    logStr = ""
    { x : String => g66(f66(x)) }("1")
    Assert.equals("1 |> (f66 ~> g66)", logStr)

    let f67 = { arg : String => logStr += arg + " |> (f67"; {x0 : A, x1 : B => ((A(), C()))} }
    let g67 = { arg : (B, B) -> (A, A) => logStr += " ~> g67)" }
    logStr = ""
    (f67 ~> g67)("1")
    Assert.equals("1 |> (f67 ~> g67)", logStr)
    logStr = ""
    { x : String => g67(f67(x)) }("1")
    Assert.equals("1 |> (f67 ~> g67)", logStr)

    let f68 = { arg : String => logStr += arg + " |> (f68"; {x0 : A, x1 : B => ((A(), C()))} }
    let g68 = { arg : (B, B) -> (A, B) => logStr += " ~> g68)" }
    logStr = ""
    (f68 ~> g68)("1")
    Assert.equals("1 |> (f68 ~> g68)", logStr)
    logStr = ""
    { x : String => g68(f68(x)) }("1")
    Assert.equals("1 |> (f68 ~> g68)", logStr)

    let f69 = { arg : String => logStr += arg + " |> (f69"; {x0 : A, x1 : B => ((A(), C()))} }
    let g69 = { arg : (B, B) -> (A, C) => logStr += " ~> g69)" }
    logStr = ""
    (f69 ~> g69)("1")
    Assert.equals("1 |> (f69 ~> g69)", logStr)
    logStr = ""
    { x : String => g69(f69(x)) }("1")
    Assert.equals("1 |> (f69 ~> g69)", logStr)

    let f70 = { arg : String => logStr += arg + " |> (f70"; {x0 : A, x1 : B => ((A(), C()))} }
    let g70 = { arg : (B, C) -> (A, A) => logStr += " ~> g70)" }
    logStr = ""
    (f70 ~> g70)("1")
    Assert.equals("1 |> (f70 ~> g70)", logStr)
    logStr = ""
    { x : String => g70(f70(x)) }("1")
    Assert.equals("1 |> (f70 ~> g70)", logStr)

    let f71 = { arg : String => logStr += arg + " |> (f71"; {x0 : A, x1 : B => ((A(), C()))} }
    let g71 = { arg : (B, C) -> (A, B) => logStr += " ~> g71)" }
    logStr = ""
    (f71 ~> g71)("1")
    Assert.equals("1 |> (f71 ~> g71)", logStr)
    logStr = ""
    { x : String => g71(f71(x)) }("1")
    Assert.equals("1 |> (f71 ~> g71)", logStr)

    let f72 = { arg : String => logStr += arg + " |> (f72"; {x0 : A, x1 : B => ((A(), C()))} }
    let g72 = { arg : (B, C) -> (A, C) => logStr += " ~> g72)" }
    logStr = ""
    (f72 ~> g72)("1")
    Assert.equals("1 |> (f72 ~> g72)", logStr)
    logStr = ""
    { x : String => g72(f72(x)) }("1")
    Assert.equals("1 |> (f72 ~> g72)", logStr)

    let f73 = { arg : String => logStr += arg + " |> (f73"; {x0 : A, x1 : B => ((A(), C()))} }
    let g73 = { arg : (C, B) -> (A, A) => logStr += " ~> g73)" }
    logStr = ""
    (f73 ~> g73)("1")
    Assert.equals("1 |> (f73 ~> g73)", logStr)
    logStr = ""
    { x : String => g73(f73(x)) }("1")
    Assert.equals("1 |> (f73 ~> g73)", logStr)

    let f74 = { arg : String => logStr += arg + " |> (f74"; {x0 : A, x1 : B => ((A(), C()))} }
    let g74 = { arg : (C, B) -> (A, B) => logStr += " ~> g74)" }
    logStr = ""
    (f74 ~> g74)("1")
    Assert.equals("1 |> (f74 ~> g74)", logStr)
    logStr = ""
    { x : String => g74(f74(x)) }("1")
    Assert.equals("1 |> (f74 ~> g74)", logStr)

    let f75 = { arg : String => logStr += arg + " |> (f75"; {x0 : A, x1 : B => ((A(), C()))} }
    let g75 = { arg : (C, B) -> (A, C) => logStr += " ~> g75)" }
    logStr = ""
    (f75 ~> g75)("1")
    Assert.equals("1 |> (f75 ~> g75)", logStr)
    logStr = ""
    { x : String => g75(f75(x)) }("1")
    Assert.equals("1 |> (f75 ~> g75)", logStr)

    let f76 = { arg : String => logStr += arg + " |> (f76"; {x0 : A, x1 : B => ((A(), C()))} }
    let g76 = { arg : (C, C) -> (A, A) => logStr += " ~> g76)" }
    logStr = ""
    (f76 ~> g76)("1")
    Assert.equals("1 |> (f76 ~> g76)", logStr)
    logStr = ""
    { x : String => g76(f76(x)) }("1")
    Assert.equals("1 |> (f76 ~> g76)", logStr)

    let f77 = { arg : String => logStr += arg + " |> (f77"; {x0 : A, x1 : B => ((A(), C()))} }
    let g77 = { arg : (C, C) -> (A, B) => logStr += " ~> g77)" }
    logStr = ""
    (f77 ~> g77)("1")
    Assert.equals("1 |> (f77 ~> g77)", logStr)
    logStr = ""
    { x : String => g77(f77(x)) }("1")
    Assert.equals("1 |> (f77 ~> g77)", logStr)

    let f78 = { arg : String => logStr += arg + " |> (f78"; {x0 : A, x1 : B => ((A(), C()))} }
    let g78 = { arg : (C, C) -> (A, C) => logStr += " ~> g78)" }
    logStr = ""
    (f78 ~> g78)("1")
    Assert.equals("1 |> (f78 ~> g78)", logStr)
    logStr = ""
    { x : String => g78(f78(x)) }("1")
    Assert.equals("1 |> (f78 ~> g78)", logStr)

    let f79 = { arg : String => logStr += arg + " |> (f79"; {x0 : A, x1 : B => ((A(), C()))} }
    let g79 = { arg : (D, B) -> (A, A) => logStr += " ~> g79)" }
    logStr = ""
    (f79 ~> g79)("1")
    Assert.equals("1 |> (f79 ~> g79)", logStr)
    logStr = ""
    { x : String => g79(f79(x)) }("1")
    Assert.equals("1 |> (f79 ~> g79)", logStr)

    let f80 = { arg : String => logStr += arg + " |> (f80"; {x0 : A, x1 : B => ((A(), C()))} }
    let g80 = { arg : (D, B) -> (A, B) => logStr += " ~> g80)" }
    logStr = ""
    (f80 ~> g80)("1")
    Assert.equals("1 |> (f80 ~> g80)", logStr)
    logStr = ""
    { x : String => g80(f80(x)) }("1")
    Assert.equals("1 |> (f80 ~> g80)", logStr)

    let f81 = { arg : String => logStr += arg + " |> (f81"; {x0 : A, x1 : B => ((A(), C()))} }
    let g81 = { arg : (D, B) -> (A, C) => logStr += " ~> g81)" }
    logStr = ""
    (f81 ~> g81)("1")
    Assert.equals("1 |> (f81 ~> g81)", logStr)
    logStr = ""
    { x : String => g81(f81(x)) }("1")
    Assert.equals("1 |> (f81 ~> g81)", logStr)

    let f82 = { arg : String => logStr += arg + " |> (f82"; {x0 : A, x1 : B => ((A(), C()))} }
    let g82 = { arg : (D, C) -> (A, A) => logStr += " ~> g82)" }
    logStr = ""
    (f82 ~> g82)("1")
    Assert.equals("1 |> (f82 ~> g82)", logStr)
    logStr = ""
    { x : String => g82(f82(x)) }("1")
    Assert.equals("1 |> (f82 ~> g82)", logStr)

    let f83 = { arg : String => logStr += arg + " |> (f83"; {x0 : A, x1 : B => ((A(), C()))} }
    let g83 = { arg : (D, C) -> (A, B) => logStr += " ~> g83)" }
    logStr = ""
    (f83 ~> g83)("1")
    Assert.equals("1 |> (f83 ~> g83)", logStr)
    logStr = ""
    { x : String => g83(f83(x)) }("1")
    Assert.equals("1 |> (f83 ~> g83)", logStr)

    let f84 = { arg : String => logStr += arg + " |> (f84"; {x0 : A, x1 : B => ((A(), C()))} }
    let g84 = { arg : (D, C) -> (A, C) => logStr += " ~> g84)" }
    logStr = ""
    (f84 ~> g84)("1")
    Assert.equals("1 |> (f84 ~> g84)", logStr)
    logStr = ""
    { x : String => g84(f84(x)) }("1")
    Assert.equals("1 |> (f84 ~> g84)", logStr)

    let f85 = { arg : String => logStr += arg + " |> (f85"; CI.i() }
    let g85 = { arg : I => logStr += " ~> g85)" }
    logStr = ""
    (f85 ~> g85)("1")
    Assert.equals("1 |> (f85 ~> g85)", logStr)
    logStr = ""
    { x : String => g85(f85(x)) }("1")
    Assert.equals("1 |> (f85 ~> g85)", logStr)

    let f86 = { arg : String => logStr += arg + " |> (f86"; CJ.j() }
    let g86 = { arg : I => logStr += " ~> g86)" }
    logStr = ""
    (f86 ~> g86)("1")
    Assert.equals("1 |> (f86 ~> g86)", logStr)
    logStr = ""
    { x : String => g86(f86(x)) }("1")
    Assert.equals("1 |> (f86 ~> g86)", logStr)

    let f87 = { arg : String => logStr += arg + " |> (f87"; CJ.j() }
    let g87 = { arg : J => logStr += " ~> g87)" }
    logStr = ""
    (f87 ~> g87)("1")
    Assert.equals("1 |> (f87 ~> g87)", logStr)
    logStr = ""
    { x : String => g87(f87(x)) }("1")
    Assert.equals("1 |> (f87 ~> g87)", logStr)

    let f88 = { arg : String => logStr += arg + " |> (f88"; CK.k() }
    let g88 = { arg : I => logStr += " ~> g88)" }
    logStr = ""
    (f88 ~> g88)("1")
    Assert.equals("1 |> (f88 ~> g88)", logStr)
    logStr = ""
    { x : String => g88(f88(x)) }("1")
    Assert.equals("1 |> (f88 ~> g88)", logStr)

    let f89 = { arg : String => logStr += arg + " |> (f89"; CK.k() }
    let g89 = { arg : J => logStr += " ~> g89)" }
    logStr = ""
    (f89 ~> g89)("1")
    Assert.equals("1 |> (f89 ~> g89)", logStr)
    logStr = ""
    { x : String => g89(f89(x)) }("1")
    Assert.equals("1 |> (f89 ~> g89)", logStr)

    let f90 = { arg : String => logStr += arg + " |> (f90"; CK.k() }
    let g90 = { arg : K => logStr += " ~> g90)" }
    logStr = ""
    (f90 ~> g90)("1")
    Assert.equals("1 |> (f90 ~> g90)", logStr)
    logStr = ""
    { x : String => g90(f90(x)) }("1")
    Assert.equals("1 |> (f90 ~> g90)", logStr)

    let f91 = { arg : String => logStr += arg + " |> (f91"; CL.l() }
    let g91 = { arg : I => logStr += " ~> g91)" }
    logStr = ""
    (f91 ~> g91)("1")
    Assert.equals("1 |> (f91 ~> g91)", logStr)
    logStr = ""
    { x : String => g91(f91(x)) }("1")
    Assert.equals("1 |> (f91 ~> g91)", logStr)

    let f92 = { arg : String => logStr += arg + " |> (f92"; CL.l() }
    let g92 = { arg : L => logStr += " ~> g92)" }
    logStr = ""
    (f92 ~> g92)("1")
    Assert.equals("1 |> (f92 ~> g92)", logStr)
    logStr = ""
    { x : String => g92(f92(x)) }("1")
    Assert.equals("1 |> (f92 ~> g92)", logStr)

    let f93 = { arg : String => logStr += arg + " |> (f93"; A() }
    let g93 = { arg : A => logStr += " ~> g93)" }
    logStr = ""
    (f93 ~> g93)("1")
    Assert.equals("1 |> (f93 ~> g93)", logStr)
    logStr = ""
    { x : String => g93(f93(x)) }("1")
    Assert.equals("1 |> (f93 ~> g93)", logStr)

    let f94 = { arg : String => logStr += arg + " |> (f94"; B() }
    let g94 = { arg : A => logStr += " ~> g94)" }
    logStr = ""
    (f94 ~> g94)("1")
    Assert.equals("1 |> (f94 ~> g94)", logStr)
    logStr = ""
    { x : String => g94(f94(x)) }("1")
    Assert.equals("1 |> (f94 ~> g94)", logStr)

    let f95 = { arg : String => logStr += arg + " |> (f95"; B() }
    let g95 = { arg : B => logStr += " ~> g95)" }
    logStr = ""
    (f95 ~> g95)("1")
    Assert.equals("1 |> (f95 ~> g95)", logStr)
    logStr = ""
    { x : String => g95(f95(x)) }("1")
    Assert.equals("1 |> (f95 ~> g95)", logStr)

    let f96 = { arg : String => logStr += arg + " |> (f96"; C() }
    let g96 = { arg : A => logStr += " ~> g96)" }
    logStr = ""
    (f96 ~> g96)("1")
    Assert.equals("1 |> (f96 ~> g96)", logStr)
    logStr = ""
    { x : String => g96(f96(x)) }("1")
    Assert.equals("1 |> (f96 ~> g96)", logStr)

    let f97 = { arg : String => logStr += arg + " |> (f97"; C() }
    let g97 = { arg : B => logStr += " ~> g97)" }
    logStr = ""
    (f97 ~> g97)("1")
    Assert.equals("1 |> (f97 ~> g97)", logStr)
    logStr = ""
    { x : String => g97(f97(x)) }("1")
    Assert.equals("1 |> (f97 ~> g97)", logStr)

    let f98 = { arg : String => logStr += arg + " |> (f98"; C() }
    let g98 = { arg : C => logStr += " ~> g98)" }
    logStr = ""
    (f98 ~> g98)("1")
    Assert.equals("1 |> (f98 ~> g98)", logStr)
    logStr = ""
    { x : String => g98(f98(x)) }("1")
    Assert.equals("1 |> (f98 ~> g98)", logStr)

    let f99 = { arg : String => logStr += arg + " |> (f99"; D() }
    let g99 = { arg : A => logStr += " ~> g99)" }
    logStr = ""
    (f99 ~> g99)("1")
    Assert.equals("1 |> (f99 ~> g99)", logStr)
    logStr = ""
    { x : String => g99(f99(x)) }("1")
    Assert.equals("1 |> (f99 ~> g99)", logStr)

    let f100 = { arg : String => logStr += arg + " |> (f100"; D() }
    let g100 = { arg : D => logStr += " ~> g100)" }
    logStr = ""
    (f100 ~> g100)("1")
    Assert.equals("1 |> (f100 ~> g100)", logStr)
    logStr = ""
    { x : String => g100(f100(x)) }("1")
    Assert.equals("1 |> (f100 ~> g100)", logStr)

    let f101 = { arg : String => logStr += arg + " |> (f101"; CI() }
    let g101 = { arg : I => logStr += " ~> g101)" }
    logStr = ""
    (f101 ~> g101)("1")
    Assert.equals("1 |> (f101 ~> g101)", logStr)
    logStr = ""
    { x : String => g101(f101(x)) }("1")
    Assert.equals("1 |> (f101 ~> g101)", logStr)

    let f102 = { arg : String => logStr += arg + " |> (f102"; CJ() }
    let g102 = { arg : I => logStr += " ~> g102)" }
    logStr = ""
    (f102 ~> g102)("1")
    Assert.equals("1 |> (f102 ~> g102)", logStr)
    logStr = ""
    { x : String => g102(f102(x)) }("1")
    Assert.equals("1 |> (f102 ~> g102)", logStr)

    let f103 = { arg : String => logStr += arg + " |> (f103"; CJ() }
    let g103 = { arg : J => logStr += " ~> g103)" }
    logStr = ""
    (f103 ~> g103)("1")
    Assert.equals("1 |> (f103 ~> g103)", logStr)
    logStr = ""
    { x : String => g103(f103(x)) }("1")
    Assert.equals("1 |> (f103 ~> g103)", logStr)

    let f104 = { arg : String => logStr += arg + " |> (f104"; CK() }
    let g104 = { arg : I => logStr += " ~> g104)" }
    logStr = ""
    (f104 ~> g104)("1")
    Assert.equals("1 |> (f104 ~> g104)", logStr)
    logStr = ""
    { x : String => g104(f104(x)) }("1")
    Assert.equals("1 |> (f104 ~> g104)", logStr)

    let f105 = { arg : String => logStr += arg + " |> (f105"; CK() }
    let g105 = { arg : J => logStr += " ~> g105)" }
    logStr = ""
    (f105 ~> g105)("1")
    Assert.equals("1 |> (f105 ~> g105)", logStr)
    logStr = ""
    { x : String => g105(f105(x)) }("1")
    Assert.equals("1 |> (f105 ~> g105)", logStr)

    let f106 = { arg : String => logStr += arg + " |> (f106"; CK() }
    let g106 = { arg : K => logStr += " ~> g106)" }
    logStr = ""
    (f106 ~> g106)("1")
    Assert.equals("1 |> (f106 ~> g106)", logStr)
    logStr = ""
    { x : String => g106(f106(x)) }("1")
    Assert.equals("1 |> (f106 ~> g106)", logStr)

    let f107 = { arg : String => logStr += arg + " |> (f107"; CL() }
    let g107 = { arg : I => logStr += " ~> g107)" }
    logStr = ""
    (f107 ~> g107)("1")
    Assert.equals("1 |> (f107 ~> g107)", logStr)
    logStr = ""
    { x : String => g107(f107(x)) }("1")
    Assert.equals("1 |> (f107 ~> g107)", logStr)

    let f108 = { arg : String => logStr += arg + " |> (f108"; CL() }
    let g108 = { arg : L => logStr += " ~> g108)" }
    logStr = ""
    (f108 ~> g108)("1")
    Assert.equals("1 |> (f108 ~> g108)", logStr)
    logStr = ""
    { x : String => g108(f108(x)) }("1")
    Assert.equals("1 |> (f108 ~> g108)", logStr)

    let f109 = { arg : String => logStr += arg + " |> (f109"; A() }
    let g109 = { arg : I => logStr += " ~> g109)" }
    logStr = ""
    (f109 ~> g109)("1")
    Assert.equals("1 |> (f109 ~> g109)", logStr)
    logStr = ""
    { x : String => g109(f109(x)) }("1")
    Assert.equals("1 |> (f109 ~> g109)", logStr)

    let f110 = { arg : String => logStr += arg + " |> (f110"; A() }
    let g110 = { arg : J => logStr += " ~> g110)" }
    logStr = ""
    (f110 ~> g110)("1")
    Assert.equals("1 |> (f110 ~> g110)", logStr)
    logStr = ""
    { x : String => g110(f110(x)) }("1")
    Assert.equals("1 |> (f110 ~> g110)", logStr)

    let f111 = { arg : String => logStr += arg + " |> (f111"; B() }
    let g111 = { arg : I => logStr += " ~> g111)" }
    logStr = ""
    (f111 ~> g111)("1")
    Assert.equals("1 |> (f111 ~> g111)", logStr)
    logStr = ""
    { x : String => g111(f111(x)) }("1")
    Assert.equals("1 |> (f111 ~> g111)", logStr)

    let f112 = { arg : String => logStr += arg + " |> (f112"; B() }
    let g112 = { arg : J => logStr += " ~> g112)" }
    logStr = ""
    (f112 ~> g112)("1")
    Assert.equals("1 |> (f112 ~> g112)", logStr)
    logStr = ""
    { x : String => g112(f112(x)) }("1")
    Assert.equals("1 |> (f112 ~> g112)", logStr)

    let f113 = { arg : String => logStr += arg + " |> (f113"; C() }
    let g113 = { arg : I => logStr += " ~> g113)" }
    logStr = ""
    (f113 ~> g113)("1")
    Assert.equals("1 |> (f113 ~> g113)", logStr)
    logStr = ""
    { x : String => g113(f113(x)) }("1")
    Assert.equals("1 |> (f113 ~> g113)", logStr)

    let f114 = { arg : String => logStr += arg + " |> (f114"; C() }
    let g114 = { arg : J => logStr += " ~> g114)" }
    logStr = ""
    (f114 ~> g114)("1")
    Assert.equals("1 |> (f114 ~> g114)", logStr)
    logStr = ""
    { x : String => g114(f114(x)) }("1")
    Assert.equals("1 |> (f114 ~> g114)", logStr)

    let f115 = { arg : String => logStr += arg + " |> (f115"; D() }
    let g115 = { arg : I => logStr += " ~> g115)" }
    logStr = ""
    (f115 ~> g115)("1")
    Assert.equals("1 |> (f115 ~> g115)", logStr)
    logStr = ""
    { x : String => g115(f115(x)) }("1")
    Assert.equals("1 |> (f115 ~> g115)", logStr)

    let f116 = { arg : String => logStr += arg + " |> (f116"; D() }
    let g116 = { arg : J => logStr += " ~> g116)" }
    logStr = ""
    (f116 ~> g116)("1")
    Assert.equals("1 |> (f116 ~> g116)", logStr)
    logStr = ""
    { x : String => g116(f116(x)) }("1")
    Assert.equals("1 |> (f116 ~> g116)", logStr)
}
