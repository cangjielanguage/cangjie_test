
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_22_02_a03_341

  @Level:         1

  @Assertion:   4.22.2(3)        e1 ~> e2                              |            The lambda expression
                ------------------------------------------------------------------------------------------
                The type f implements the single-parameter operator () | let f = e1; let g = e2;
                overloading function, and g is a function type, and    | {x => g(f.operator()(x))}
                the return value type of f.operator() is a subtype of  |
                the argument type of g                                 |
  @Description: Checks that composition f ~> g is not permitted when return type of f is (D, A) -> (B, D)
                and argument type of g is (A, B) -> (A, C).
  @Mode: compileonly
  @Negative: yes
  @Structure: complex-main
  @Dependencies: ../aux_decl.cj
  @CompileWarning: no
  @Comment: Auto-generated by gen.py

*/

class F {
    operator func ()(arg : String) { {x0 : A, x1 : B => ((A(), C()))} }
}


main() {
    let f = F()
    let g = { arg : (D, A) -> (B, D) => () }
    (f ~> g)("1")
}
