
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_22_02_a05_124

  @Level:         1

  @Assertion:   4.22.2(5)                           e1 ~> e2                  |      The lambda expression
                -------------------------------------------------------------------------------------------------------
                The types of f and g both implement the single-parameter      | let f = e1; let g = e2;
                operator ()overloading function, and the return value of      | {x => g.operator()(f.operator()(x))}
                f.operator() is a subtype of the argument type of .operator() | 
  @Description: Checks that composition f ~> g is not permitted when return type of f is (B, D, A)
                and argument type of g is (A, B, C).
  @Mode: compileonly
  @Negative: yes
  @Structure: complex-main
  @Dependencies: ../aux_decl.cj
  @CompileWarning: no
  @Comment: Auto-generated by gen.py

*/

class F {
    operator func ()(arg : String) { (A(), B(), C()) }
}

class G {
    operator func ()(arg : (B, D, A)) {  }
}


main() {
    let f = F()
    let g = G()
    (f ~> g)("1")
}
