
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_22_02_a02_051

  @Level:         1

  @Assertion:   4.22.2(2) If f and g are expressions of the function type or their type implements the
                single-parameter operator () overloading function, (see Operators that can be Overloaded), the
                following situations may occur:
                                 e1 ~> e2                          |            The lambda expression
                --------------------------------------------------------------------------------------------
                e1 and e2 are function types, and the return value | let f = e1; let g = e2; {x => g(f(x))}
                type of e1 is a subtype of the argument type of e2 |
  @Description: Checks that composition f ~> g is not permitted when return type of f is UInt64
                and argument type of g is Rune.
  @Mode: compileonly
  @Negative: yes
  @Structure: complex-main
  @Dependencies: ../aux_decl.cj
  @CompileWarning: no
  @Comment: Auto-generated by gen.py

*/

main() {
    let f = { arg : String => '1' }
    let g = { arg : UInt64 => () }
    (f ~> g)("1")
}
