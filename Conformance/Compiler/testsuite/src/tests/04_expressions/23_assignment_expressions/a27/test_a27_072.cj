
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_23_a27_072

  @Level:         1

  @Assertion:   4.23(27) 3. The return type of the overloaded operator needs to be the same as or a subtype of the left
                operand, i.e., as for a, b, op in the expression a op=b, they need to pass the type check of
                a = a op b.
  @Description: Checks that if overloaded operator op for type I with argument type T
                has return type CL, which is a subtype of I,
                then compound assignment operator op= can be used with types I and T.
  @Mode: run
  @Negative: no
  @Structure: single
  @CompileWarning: no
  @Comment: Auto-generated by gen.py

*/

interface I {
    operator func +(x : Unit) : CL
    operator func -(x : Unit) : CL
    operator func *(x : Unit) : CL
    operator func **(x : Unit) : CL
    operator func /(x : Unit) : CL
    operator func %(x : Unit) : CL
    operator func &(x : Unit) : CL
    operator func |(x : Unit) : CL
    operator func ^(x : Unit) : CL
    operator func <<(x : Unit) : CL
    operator func >>(x : Unit) : CL
}

interface J <: I {}

interface K <: J {}

interface L <: I {}

open class CI <: I {
    public operator func +(x : Unit) { CL() }
    public operator func -(x : Unit) { CL() }
    public operator func *(x : Unit) { CL() }
    public operator func **(x : Unit) { CL() }
    public operator func /(x : Unit) { CL() }
    public operator func %(x : Unit) { CL() }
    public operator func &(x : Unit) { CL() }
    public operator func |(x : Unit) { CL() }
    public operator func ^(x : Unit) { CL() }
    public operator func <<(x : Unit) { CL() }
    public operator func >>(x : Unit) { CL() }
    static func i() : I { CI() }
}

open class CJ <: J {
    public operator func +(x : Unit) { CL() }
    public operator func -(x : Unit) { CL() }
    public operator func *(x : Unit) { CL() }
    public operator func **(x : Unit) { CL() }
    public operator func /(x : Unit) { CL() }
    public operator func %(x : Unit) { CL() }
    public operator func &(x : Unit) { CL() }
    public operator func |(x : Unit) { CL() }
    public operator func ^(x : Unit) { CL() }
    public operator func <<(x : Unit) { CL() }
    public operator func >>(x : Unit) { CL() }
    static func j() : J { CJ() }
}

open class CK <: K {
    public operator func +(x : Unit) { CL() }
    public operator func -(x : Unit) { CL() }
    public operator func *(x : Unit) { CL() }
    public operator func **(x : Unit) { CL() }
    public operator func /(x : Unit) { CL() }
    public operator func %(x : Unit) { CL() }
    public operator func &(x : Unit) { CL() }
    public operator func |(x : Unit) { CL() }
    public operator func ^(x : Unit) { CL() }
    public operator func <<(x : Unit) { CL() }
    public operator func >>(x : Unit) { CL() }
    static func k() : K { CK() }
}

open class CL <: L {
    public operator func +(x : Unit) { CL() }
    public operator func -(x : Unit) { CL() }
    public operator func *(x : Unit) { CL() }
    public operator func **(x : Unit) { CL() }
    public operator func /(x : Unit) { CL() }
    public operator func %(x : Unit) { CL() }
    public operator func &(x : Unit) { CL() }
    public operator func |(x : Unit) { CL() }
    public operator func ^(x : Unit) { CL() }
    public operator func <<(x : Unit) { CL() }
    public operator func >>(x : Unit) { CL() }
    static func l() : L { CL() }
}

main() {
    var a = CI.i()
    a += ()
    a -= ()
    a *= ()
    a **= ()
    a /= ()
    a %= ()
    a &= ()
    a |= ()
    a ^= ()
    a <<= ()
    a >>= ()

    return 0
}
