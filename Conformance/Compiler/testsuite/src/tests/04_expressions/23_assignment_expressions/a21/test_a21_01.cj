
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_23_a21_01

  @Level:         1

  @Assertion:   4.23(21) The compound assignment expression a op= b cannot be seen simply as a combination of an
                assignment expression and other binary operators a = a op b (where op can be any binary operator among
                arithmetic, logical and bitwise operators, and the operands a and b are of the type required by the
                operator op).
  @Description: Checks compilation and execution of a program that uses compound assignment expressions a op= b and
                compares them to regular assignments a = a op b. 
  @Mode: run
  @Negative: no
  @Structure: single
  @CompileWarning: ignore
  @Comment: Auto-generated by gen.py
  @Issue: 6428

*/

import utils.assert.Assert
import std.random.Random

func assertEquals(x : Float16, y : Float16) {
    Assert.isTrue(x == y || (x.isNaN() && y.isNaN()) || (x.isInf() && y.isInf() && x * y > 0.0))
}

func assertEquals(x : Float32, y : Float32) {
    Assert.isTrue(x == y || (x.isNaN() && y.isNaN()) || (x.isInf() && y.isInf() && x * y > 0.0))
}

func assertEquals(x : Float64, y : Float64) {
    Assert.isTrue(x == y || (x.isNaN() && y.isNaN()) || (x.isInf() && y.isInf() && x * y > 0.0))
}

@OverflowWrapping
main() {
    let rnd = Random(123)

    for (i in 0..4) {
        let t = (i % 2 == 0, (i >> 1) % 2 == 0)
        
        let lhsBool = t[0]
        let rhsBool = t[1]
        var resBool : Bool

        resBool = lhsBool
        resBool &&= rhsBool
        Assert.equals(lhsBool && rhsBool, resBool)

        resBool = lhsBool
        resBool ||= rhsBool
        Assert.equals(lhsBool || rhsBool, resBool)

    }

    for (_ in 0..1024) {
        
        let lhsInt8 = rnd.nextInt8(Int8.Max) + 1
        let rhsInt8 = rnd.nextInt8(Int8.Max) + 1
        var resInt8 : Int8

        resInt8 = lhsInt8
        resInt8 += rhsInt8
        Assert.equals(lhsInt8 + rhsInt8, resInt8)

        resInt8 = lhsInt8
        resInt8 -= rhsInt8
        Assert.equals(lhsInt8 - rhsInt8, resInt8)

        resInt8 = lhsInt8
        resInt8 *= rhsInt8
        Assert.equals(lhsInt8 * rhsInt8, resInt8)

        resInt8 = lhsInt8
        resInt8 /= rhsInt8
        Assert.equals(lhsInt8 / rhsInt8, resInt8)

        resInt8 = lhsInt8
        resInt8 %= rhsInt8
        Assert.equals(lhsInt8 % rhsInt8, resInt8)

        resInt8 = lhsInt8
        resInt8 &= rhsInt8
        Assert.equals(lhsInt8 & rhsInt8, resInt8)

        resInt8 = lhsInt8
        resInt8 |= rhsInt8
        Assert.equals(lhsInt8 | rhsInt8, resInt8)

        resInt8 = lhsInt8
        resInt8 ^= rhsInt8
        Assert.equals(lhsInt8 ^ rhsInt8, resInt8)

        let lhsInt16 = rnd.nextInt16(Int16.Max) + 1
        let rhsInt16 = rnd.nextInt16(Int16.Max) + 1
        var resInt16 : Int16

        resInt16 = lhsInt16
        resInt16 += rhsInt16
        Assert.equals(lhsInt16 + rhsInt16, resInt16)

        resInt16 = lhsInt16
        resInt16 -= rhsInt16
        Assert.equals(lhsInt16 - rhsInt16, resInt16)

        resInt16 = lhsInt16
        resInt16 *= rhsInt16
        Assert.equals(lhsInt16 * rhsInt16, resInt16)

        resInt16 = lhsInt16
        resInt16 /= rhsInt16
        Assert.equals(lhsInt16 / rhsInt16, resInt16)

        resInt16 = lhsInt16
        resInt16 %= rhsInt16
        Assert.equals(lhsInt16 % rhsInt16, resInt16)

        resInt16 = lhsInt16
        resInt16 &= rhsInt16
        Assert.equals(lhsInt16 & rhsInt16, resInt16)

        resInt16 = lhsInt16
        resInt16 |= rhsInt16
        Assert.equals(lhsInt16 | rhsInt16, resInt16)

        resInt16 = lhsInt16
        resInt16 ^= rhsInt16
        Assert.equals(lhsInt16 ^ rhsInt16, resInt16)

        let lhsInt32 = rnd.nextInt32(Int32.Max) + 1
        let rhsInt32 = rnd.nextInt32(Int32.Max) + 1
        var resInt32 : Int32

        resInt32 = lhsInt32
        resInt32 += rhsInt32
        Assert.equals(lhsInt32 + rhsInt32, resInt32)

        resInt32 = lhsInt32
        resInt32 -= rhsInt32
        Assert.equals(lhsInt32 - rhsInt32, resInt32)

        resInt32 = lhsInt32
        resInt32 *= rhsInt32
        Assert.equals(lhsInt32 * rhsInt32, resInt32)

        resInt32 = lhsInt32
        resInt32 /= rhsInt32
        Assert.equals(lhsInt32 / rhsInt32, resInt32)

        resInt32 = lhsInt32
        resInt32 %= rhsInt32
        Assert.equals(lhsInt32 % rhsInt32, resInt32)

        resInt32 = lhsInt32
        resInt32 &= rhsInt32
        Assert.equals(lhsInt32 & rhsInt32, resInt32)

        resInt32 = lhsInt32
        resInt32 |= rhsInt32
        Assert.equals(lhsInt32 | rhsInt32, resInt32)

        resInt32 = lhsInt32
        resInt32 ^= rhsInt32
        Assert.equals(lhsInt32 ^ rhsInt32, resInt32)

        let lhsInt64 = rnd.nextInt64(Int64.Max) + 1
        let rhsInt64 = rnd.nextInt64(Int64.Max) + 1
        var resInt64 : Int64

        resInt64 = lhsInt64
        resInt64 += rhsInt64
        Assert.equals(lhsInt64 + rhsInt64, resInt64)

        resInt64 = lhsInt64
        resInt64 -= rhsInt64
        Assert.equals(lhsInt64 - rhsInt64, resInt64)

        resInt64 = lhsInt64
        resInt64 *= rhsInt64
        Assert.equals(lhsInt64 * rhsInt64, resInt64)

        resInt64 = lhsInt64
        resInt64 /= rhsInt64
        Assert.equals(lhsInt64 / rhsInt64, resInt64)

        resInt64 = lhsInt64
        resInt64 %= rhsInt64
        Assert.equals(lhsInt64 % rhsInt64, resInt64)

        resInt64 = lhsInt64
        resInt64 &= rhsInt64
        Assert.equals(lhsInt64 & rhsInt64, resInt64)

        resInt64 = lhsInt64
        resInt64 |= rhsInt64
        Assert.equals(lhsInt64 | rhsInt64, resInt64)

        resInt64 = lhsInt64
        resInt64 ^= rhsInt64
        Assert.equals(lhsInt64 ^ rhsInt64, resInt64)

        let lhsUInt8 = rnd.nextUInt8(UInt8.Max) + 1
        let rhsUInt8 = rnd.nextUInt8(UInt8.Max) + 1
        var resUInt8 : UInt8

        resUInt8 = lhsUInt8
        resUInt8 += rhsUInt8
        Assert.equals(lhsUInt8 + rhsUInt8, resUInt8)

        resUInt8 = lhsUInt8
        resUInt8 -= rhsUInt8
        Assert.equals(lhsUInt8 - rhsUInt8, resUInt8)

        resUInt8 = lhsUInt8
        resUInt8 *= rhsUInt8
        Assert.equals(lhsUInt8 * rhsUInt8, resUInt8)

        resUInt8 = lhsUInt8
        resUInt8 /= rhsUInt8
        Assert.equals(lhsUInt8 / rhsUInt8, resUInt8)

        resUInt8 = lhsUInt8
        resUInt8 %= rhsUInt8
        Assert.equals(lhsUInt8 % rhsUInt8, resUInt8)

        resUInt8 = lhsUInt8
        resUInt8 &= rhsUInt8
        Assert.equals(lhsUInt8 & rhsUInt8, resUInt8)

        resUInt8 = lhsUInt8
        resUInt8 |= rhsUInt8
        Assert.equals(lhsUInt8 | rhsUInt8, resUInt8)

        resUInt8 = lhsUInt8
        resUInt8 ^= rhsUInt8
        Assert.equals(lhsUInt8 ^ rhsUInt8, resUInt8)

        let lhsUInt16 = rnd.nextUInt16(UInt16.Max) + 1
        let rhsUInt16 = rnd.nextUInt16(UInt16.Max) + 1
        var resUInt16 : UInt16

        resUInt16 = lhsUInt16
        resUInt16 += rhsUInt16
        Assert.equals(lhsUInt16 + rhsUInt16, resUInt16)

        resUInt16 = lhsUInt16
        resUInt16 -= rhsUInt16
        Assert.equals(lhsUInt16 - rhsUInt16, resUInt16)

        resUInt16 = lhsUInt16
        resUInt16 *= rhsUInt16
        Assert.equals(lhsUInt16 * rhsUInt16, resUInt16)

        resUInt16 = lhsUInt16
        resUInt16 /= rhsUInt16
        Assert.equals(lhsUInt16 / rhsUInt16, resUInt16)

        resUInt16 = lhsUInt16
        resUInt16 %= rhsUInt16
        Assert.equals(lhsUInt16 % rhsUInt16, resUInt16)

        resUInt16 = lhsUInt16
        resUInt16 &= rhsUInt16
        Assert.equals(lhsUInt16 & rhsUInt16, resUInt16)

        resUInt16 = lhsUInt16
        resUInt16 |= rhsUInt16
        Assert.equals(lhsUInt16 | rhsUInt16, resUInt16)

        resUInt16 = lhsUInt16
        resUInt16 ^= rhsUInt16
        Assert.equals(lhsUInt16 ^ rhsUInt16, resUInt16)

        let lhsUInt32 = rnd.nextUInt32(UInt32.Max) + 1
        let rhsUInt32 = rnd.nextUInt32(UInt32.Max) + 1
        var resUInt32 : UInt32

        resUInt32 = lhsUInt32
        resUInt32 += rhsUInt32
        Assert.equals(lhsUInt32 + rhsUInt32, resUInt32)

        resUInt32 = lhsUInt32
        resUInt32 -= rhsUInt32
        Assert.equals(lhsUInt32 - rhsUInt32, resUInt32)

        resUInt32 = lhsUInt32
        resUInt32 *= rhsUInt32
        Assert.equals(lhsUInt32 * rhsUInt32, resUInt32)

        resUInt32 = lhsUInt32
        resUInt32 /= rhsUInt32
        Assert.equals(lhsUInt32 / rhsUInt32, resUInt32)

        resUInt32 = lhsUInt32
        resUInt32 %= rhsUInt32
        Assert.equals(lhsUInt32 % rhsUInt32, resUInt32)

        resUInt32 = lhsUInt32
        resUInt32 &= rhsUInt32
        Assert.equals(lhsUInt32 & rhsUInt32, resUInt32)

        resUInt32 = lhsUInt32
        resUInt32 |= rhsUInt32
        Assert.equals(lhsUInt32 | rhsUInt32, resUInt32)

        resUInt32 = lhsUInt32
        resUInt32 ^= rhsUInt32
        Assert.equals(lhsUInt32 ^ rhsUInt32, resUInt32)

        let lhsUInt64 = rnd.nextUInt64(UInt64.Max) + 1
        let rhsUInt64 = rnd.nextUInt64(UInt64.Max) + 1
        var resUInt64 : UInt64

        resUInt64 = lhsUInt64
        resUInt64 += rhsUInt64
        Assert.equals(lhsUInt64 + rhsUInt64, resUInt64)

        resUInt64 = lhsUInt64
        resUInt64 -= rhsUInt64
        Assert.equals(lhsUInt64 - rhsUInt64, resUInt64)

        resUInt64 = lhsUInt64
        resUInt64 *= rhsUInt64
        Assert.equals(lhsUInt64 * rhsUInt64, resUInt64)

        resUInt64 = lhsUInt64
        resUInt64 /= rhsUInt64
        Assert.equals(lhsUInt64 / rhsUInt64, resUInt64)

        resUInt64 = lhsUInt64
        resUInt64 %= rhsUInt64
        Assert.equals(lhsUInt64 % rhsUInt64, resUInt64)

        resUInt64 = lhsUInt64
        resUInt64 &= rhsUInt64
        Assert.equals(lhsUInt64 & rhsUInt64, resUInt64)

        resUInt64 = lhsUInt64
        resUInt64 |= rhsUInt64
        Assert.equals(lhsUInt64 | rhsUInt64, resUInt64)

        resUInt64 = lhsUInt64
        resUInt64 ^= rhsUInt64
        Assert.equals(lhsUInt64 ^ rhsUInt64, resUInt64)

        let lhsFloat16 = rnd.nextFloat16()
        let rhsFloat16 = rnd.nextFloat16()
        var resFloat16 : Float16

        resFloat16 = lhsFloat16
        resFloat16 += rhsFloat16
        assertEquals(lhsFloat16 + rhsFloat16, resFloat16)

        resFloat16 = lhsFloat16
        resFloat16 -= rhsFloat16
        assertEquals(lhsFloat16 - rhsFloat16, resFloat16)

        resFloat16 = lhsFloat16
        resFloat16 *= rhsFloat16
        assertEquals(lhsFloat16 * rhsFloat16, resFloat16)

        resFloat16 = lhsFloat16
        resFloat16 /= rhsFloat16
        assertEquals(lhsFloat16 / rhsFloat16, resFloat16)

        let lhsFloat32 = rnd.nextFloat32()
        let rhsFloat32 = rnd.nextFloat32()
        var resFloat32 : Float32

        resFloat32 = lhsFloat32
        resFloat32 += rhsFloat32
        assertEquals(lhsFloat32 + rhsFloat32, resFloat32)

        resFloat32 = lhsFloat32
        resFloat32 -= rhsFloat32
        assertEquals(lhsFloat32 - rhsFloat32, resFloat32)

        resFloat32 = lhsFloat32
        resFloat32 *= rhsFloat32
        assertEquals(lhsFloat32 * rhsFloat32, resFloat32)

        resFloat32 = lhsFloat32
        resFloat32 /= rhsFloat32
        assertEquals(lhsFloat32 / rhsFloat32, resFloat32)

        let lhsFloat64 = rnd.nextFloat64()
        let rhsFloat64 = rnd.nextFloat64()
        var resFloat64 : Float64

        resFloat64 = lhsFloat64
        resFloat64 += rhsFloat64
        assertEquals(lhsFloat64 + rhsFloat64, resFloat64)

        resFloat64 = lhsFloat64
        resFloat64 -= rhsFloat64
        assertEquals(lhsFloat64 - rhsFloat64, resFloat64)

        resFloat64 = lhsFloat64
        resFloat64 *= rhsFloat64
        assertEquals(lhsFloat64 * rhsFloat64, resFloat64)

        resFloat64 = lhsFloat64
        resFloat64 /= rhsFloat64
        assertEquals(lhsFloat64 / rhsFloat64, resFloat64)

        resInt64 = lhsInt64
        resInt64 **= rhsUInt64
        Assert.equals(lhsInt64 ** rhsUInt64, resInt64)

        resFloat64 = lhsFloat64
        resFloat64 **= rhsInt64
        assertEquals(lhsFloat64 ** rhsInt64, resFloat64)

        resFloat64 = lhsFloat64
        resFloat64 **= rhsFloat64
        assertEquals(lhsFloat64 ** rhsFloat64, resFloat64)

        let rhsShiftInt8 = rnd.nextInt8(8)
        resInt8 = lhsInt8
        resInt8 <<= rhsShiftInt8
        Assert.equals(lhsInt8 << rhsShiftInt8, resInt8)

        resInt8 = lhsInt8
        resInt8 >>= rhsShiftInt8
        Assert.equals(lhsInt8 >> rhsShiftInt8, resInt8)

        let rhsShiftInt16 = rnd.nextInt16(16)
        resInt16 = lhsInt16
        resInt16 <<= rhsShiftInt16
        Assert.equals(lhsInt16 << rhsShiftInt16, resInt16)

        resInt16 = lhsInt16
        resInt16 >>= rhsShiftInt16
        Assert.equals(lhsInt16 >> rhsShiftInt16, resInt16)

        let rhsShiftInt32 = rnd.nextInt32(32)
        resInt32 = lhsInt32
        resInt32 <<= rhsShiftInt32
        Assert.equals(lhsInt32 << rhsShiftInt32, resInt32)

        resInt32 = lhsInt32
        resInt32 >>= rhsShiftInt32
        Assert.equals(lhsInt32 >> rhsShiftInt32, resInt32)

        let rhsShiftInt64 = rnd.nextInt64(64)
        resInt64 = lhsInt64
        resInt64 <<= rhsShiftInt64
        Assert.equals(lhsInt64 << rhsShiftInt64, resInt64)

        resInt64 = lhsInt64
        resInt64 >>= rhsShiftInt64
        Assert.equals(lhsInt64 >> rhsShiftInt64, resInt64)

        let rhsShiftUInt8 = rnd.nextUInt8(8)
        resUInt8 = lhsUInt8
        resUInt8 <<= rhsShiftUInt8
        Assert.equals(lhsUInt8 << rhsShiftUInt8, resUInt8)

        resUInt8 = lhsUInt8
        resUInt8 >>= rhsShiftUInt8
        Assert.equals(lhsUInt8 >> rhsShiftUInt8, resUInt8)

        let rhsShiftUInt16 = rnd.nextUInt16(16)
        resUInt16 = lhsUInt16
        resUInt16 <<= rhsShiftUInt16
        Assert.equals(lhsUInt16 << rhsShiftUInt16, resUInt16)

        resUInt16 = lhsUInt16
        resUInt16 >>= rhsShiftUInt16
        Assert.equals(lhsUInt16 >> rhsShiftUInt16, resUInt16)

        let rhsShiftUInt32 = rnd.nextUInt32(32)
        resUInt32 = lhsUInt32
        resUInt32 <<= rhsShiftUInt32
        Assert.equals(lhsUInt32 << rhsShiftUInt32, resUInt32)

        resUInt32 = lhsUInt32
        resUInt32 >>= rhsShiftUInt32
        Assert.equals(lhsUInt32 >> rhsShiftUInt32, resUInt32)

        let rhsShiftUInt64 = rnd.nextUInt64(64)
        resUInt64 = lhsUInt64
        resUInt64 <<= rhsShiftUInt64
        Assert.equals(lhsUInt64 << rhsShiftUInt64, resUInt64)

        resUInt64 = lhsUInt64
        resUInt64 >>= rhsShiftUInt64
        Assert.equals(lhsUInt64 >> rhsShiftUInt64, resUInt64)


    }
}
