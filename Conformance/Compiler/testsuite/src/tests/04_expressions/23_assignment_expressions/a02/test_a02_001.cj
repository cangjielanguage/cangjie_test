
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_23_a02_001

  @Level:         1

  @Assertion:   4.23(2) Note that the type of the right value must be the subtype of the type of the left value.
  @Description: Checks that a value of type T1 can be assigned to a value of T2 for various T1 and T2,
                where T1 is a subtype of T2.
  @Mode: run
  @Negative: no
  @Structure: complex-main
  @Dependencies: aux_a02.cj
  @CompileWarning: ignore
  @Comment: Auto-generated by gen.py

*/

func assign1(x: A, y: Object) {
    var v = y
    v = x
}

func assign2(x: (A, B, C), y: (A, A, A)) {
    var v = y
    v = x
}

func assign3(x: (A, B) -> (A, C), y: (A, B) -> (A, A)) {
    var v = y
    v = x
}

func assign4(x: K, y: I) {
    var v = y
    v = x
}

func assign5(x: C, y: A) {
    var v = y
    v = x
}

func assign6(x: CK, y: I) {
    var v = y
    v = x
}

func assign7(x: C, y: J) {
    var v = y
    v = x
}

main() {
    assign1(A(), Object())
    assign2((A(), B(), C()), (A(), A(), A()))
    assign3({x0 : A, x1 : B => ((A(), C()))}, {x0 : A, x1 : B => ((A(), A()))})
    assign4(k(), i())
    assign5(C(), A())
    assign6(CK(), i())
    assign7(C(), j())
    return 0
}
