
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_15_a62_68

  @Level:         1

  @Assertion:   4.15(62) Arithmetic operators introduced above are safe in the Cangjie programming language. That is,
                if an overflow (i.e., the value of an expression is beyond the range of its type) is detected at
                compile time, then a compilation error will be reported; otherwise an ArithmeticException is thrown
                at runtime.
  @Description: Checks for UInt32 a, b that a - b causes an ArithmeticException (lower bound overflow).
  @Mode: run
  @Negative: no
  @Structure: single
  @CompileWarning: no
  @Comment: Auto-generated by gen_exception.py

*/

import utils.assert.Assert

func f(a: UInt32, b: UInt32) {
    a - b
}

main() {
    let a = 0u32
    let b = 4294967295u32
    var caught : Bool = false
    try {
        f(a, b)
    } catch (e: ArithmeticException) {
        caught = true
    }
    Assert.isTrue(caught)
}
