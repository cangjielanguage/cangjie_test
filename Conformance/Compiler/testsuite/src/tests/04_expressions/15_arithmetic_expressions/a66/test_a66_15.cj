
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_15_a66_15

  @Level:         1

  @Assertion:   4.15(66)   If overflow occurs, throwing an exception
  @Description: Checks for UInt8 a, b that a * b overflow causes an ArithmeticException if
                @OverflowThrowing is used.
  @Mode: run
  @Negative: no
  @Structure: single
  @CompileWarning: no
  @Comment: Auto-generated by gen.py
*/

import utils.assert.Assert
import std.random.Random

@OverflowThrowing
func f(a: UInt8, b: UInt8) {
    a * b
}

main() {
    let rnd = Random(123)
    var overflowCount : Int32 = 0

    do {
        let a = rnd.nextUInt8()
        var b = rnd.nextUInt8()
        try {
            f(a, b)
        } catch (e: ArithmeticException) {
            overflowCount++
            var overflowCondition : Bool = false
            try {
                overflowCondition ||= a > UInt8.Max / b
            } catch (e: ArithmeticException) {}
            try {
                overflowCondition ||= a < UInt8.Min / b
            } catch (e: ArithmeticException) {}
            Assert.isTrue(overflowCondition)
        }
    } while (overflowCount < 256)
}
