
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_15_a67_06

  @Level:         1

  @Assertion:   4.15(67) @OverflowWrapping If overflow occurs, wrapping around at the numeric bounds of the type,
                instead of throwing exception
  @Description: Checks for Int16 a, b that if a * b overflows in a function marked by @OverflowWrapping, the
                exception will not be thrown and the operation will be calculated by wrapping around at the numeric
                bounds.
  @Mode: run
  @Negative: no
  @Structure: complex-main
  @Dependencies: aux_a67.cj
  @CompileWarning: no
  @Comment: Auto-generated by gen.py
*/

import utils.assert.Assert
import std.random.Random

func f(a: Int16, b: Int16) {
    a * b
}

@OverflowWrapping
func g(a: Int16, b: Int16) {
    a * b
}

main() {
    let rnd = Random(123)
    var overflowCount : Int32 = 0

    do {
        let a = rnd.nextInt16()
        let b = rnd.nextInt16()
        try {
            f(a, b)
        } catch (e: ArithmeticException) {
            overflowCount++
            let wrapped = g(a, b)
            Assert.equals(0, sub(mul(Int64(a), Int64(b)), Int64(wrapped)) % 65536)
        }
    } while (overflowCount < 256)
}
