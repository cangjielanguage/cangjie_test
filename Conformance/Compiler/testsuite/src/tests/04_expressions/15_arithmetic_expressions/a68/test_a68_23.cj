
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        04_15_a68_23

  @Level:         1

  @Assertion:   4.15(68) @OverflowSaturating If overflow occurs, saturating at the numeric bounds of the type, instead
                of throwing exception
  @Description: Checks for UInt64 a, b that if a - b overflows in a function marked by @OverflowSaturating, the
                exception will not be thrown and the operation will be calculated by saturating at the numeric bounds
                of the type.
  @Mode: run
  @Negative: no
  @Structure: single
  @CompileWarning: no
  @Comment: Auto-generated by gen.py

  @Issue: 0006421

*/

import utils.assert.Assert
import std.random.Random

func f(a: UInt64, b: UInt64) {
    a - b
}

@OverflowSaturating
func g(a: UInt64, b: UInt64) {
    a - b
}

main() {
    let rnd = Random(123)
    var overflowCount : Int32 = 0

    do {
        let a = rnd.nextUInt64()
        let b = rnd.nextUInt64()
        try {
            f(a, b)
        } catch (e: ArithmeticException) {
            overflowCount++
            let sat = g(a, b)
            Assert.isTrue(sat == UInt64.Max || sat == UInt64.Min)
        }
    } while (overflowCount < 256)
}
