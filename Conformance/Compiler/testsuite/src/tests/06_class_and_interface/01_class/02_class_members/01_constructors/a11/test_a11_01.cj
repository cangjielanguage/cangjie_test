/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name: 06_01_02_01_a11_01

  @Level:         1

  @Assertion: 6.1.2.1(11)
              The definitions and expressions of the omissions are automatically generated by the compiler.

  @Description: Check that the definitions of variables 
                constructed from member variable parameters
                are generated and the variables can be interacted with
                even when the primary constructor was not called

  @Mode: run

  @Negative: no

  @Structure: single

  @Issue: 0006183

  @Comment: This assertion is in the context of member variable parameters description

*/

import utils.assert.Assert

var proof_of_init = 0

class Test {
  Test(
        // Unnamed parameters of all types of modifiers
        public let    a: Int64,
        public var    b: Bool,
        protected let c: String,
        protected var d: Rune,
        private let   e: Float64,
        private var   f: Int64,
        let           g: String,
        var           h: Rune,

        // Named parameters of all types of modifiers
        public let    na!: Int64,
        public var    nb!: Bool,
        protected let nc!: String,
        protected var nd!: Rune,
        private let   ne!: Float64,
        private var   nf!: Int64,
        let           ng!: String,
        var           nh!: Rune
      ) {
    proof_of_init = -999999999
  }
  
  init() {
    // Check that the primary constructor was not called
    Assert.equals(0, proof_of_init)

    proof_of_init = 1

    // Check assignment of autogenerated variables
    a = 1
    b = true
    c = ""
    d = r'a'
    e = 0.101
    f = 2
    g = " "
    h = r'v'

    na = 3
    nb = false
    nc = "oooo"
    nd = r'4'
    ne = 1.2938147194
    nf = 4
    ng = "0000000000"
    nh = r'i'
  }

  // Check access to autogenerated variables
  func check_access() {
    Assert.equals(1, proof_of_init)

    Assert.equals(1, a)
    Assert.equals(true, b)
    Assert.equals("", c)
    Assert.equals(r'a', d)
    Assert.approxEquals(0.101, e)
    Assert.equals(2, f)
    Assert.equals(" ", g)
    Assert.equals(r'v', h)

    Assert.equals(3, na)
    Assert.equals(false, nb)
    Assert.equals("oooo", nc)
    Assert.equals(r'4', nd)
    Assert.approxEquals(1.2938147194, ne)
    Assert.equals(4, nf)
    Assert.equals("0000000000", ng)
    Assert.equals(r'i', nh)
  }
}

main() {
  var tst = Test()
  Assert.equals(1, proof_of_init)
  tst.check_access()
}