/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name: 02_01_10_02_a11_01

  @Level:         1

  @Assertion: 2.1.10.2(11)
              The definitions and expressions of the omissions are automatically generated by the compiler.

  @Description: Check that the definitions of variables 
                constructed from member variable parameters
                are generated and the variables can be interacted with
                even when the primary constructor was not called

  @Mode: run

  @Negative: no

  @Structure: single

  @Issue: 0006183

  @Comment: This assertion is in the context of member variable parameters description

*/

import utils.assert.Assert

var proof_of_init = 0

struct Test {
    Test(
         // Unnamed parameters of all types of modifiers
         public let    a: Int64,
         public var    b: Bool,
         private let   c: Float64,
         private var   d: Int64,
         let           e: String,
         var           f: Rune,

         // Named parameters of all types of modifiers
         public let    na!: Int64,
         public var    nb!: Bool,
         private let   nc!: Float64,
         private var   nd!: Int64,
         let           ne!: String,
         var           nf!: Rune
        ) {
        proof_of_init = -999999999
    }
    
    init() {
        // Check that the primary constructor was not called
        Assert.equals(0, proof_of_init)

        proof_of_init = 1

        // Check assignment of autogenerated variables
        a = 1
        b = true
        c = 0.101
        d = 2
        e = " "
        f = r'v'

        na = 3
        nb = false
        nc = 1.2938147194
        nd = 4
        ne = "0000000000"
        nf = r'i'
    }

    // Check access to autogenerated variables
    func check_access() {
        Assert.equals(1, proof_of_init)

        Assert.equals(1, a)
        Assert.equals(true, b)
        Assert.approxEquals(0.101, c)
        Assert.equals(2, d)
        Assert.equals(" ", e)
        Assert.equals(r'v', f)

        Assert.equals(3, na)
        Assert.equals(false, nb)
        Assert.approxEquals(1.2938147194, nc)
        Assert.equals(4, nd)
        Assert.equals("0000000000", ne)
        Assert.equals(r'i', nf)
    }
}

main() {
    var tst = Test()
    Assert.equals(1, proof_of_init)
    tst.check_access()
}