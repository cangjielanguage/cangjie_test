
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:     16_02_a09_01

  @Level:         1

  @Assertion:   16.2(9) 7.Arithmetic, relational, bitwise expressions of the numeric types, Bool, Unit, Rune, String
                types, all operands must be const expressions.
  @Description: Check that arithmetic, relational, bitwise expressions of the numeric types, Bool, Unit, Rune, String
                types, where all operands are const expressions, are const.
  @Mode: run
  @Negative: no
  @Structure: single
  @CompileWarning: no
  @Comment: Auto-generated by gen.py
  @Issue: 6614

*/

import utils.assert.Assert

const func i() { 1 }

const func c() { '1' }

const func s() { "1" }

const func f() { 1.0 }

const func u() { () }

const func b() { true }

main() {
    const neg = -i()
    Assert.equals(-1, neg)
    const add = i() + 1
    Assert.equals(2, add)
    const sub = i() - 1
    Assert.equals(0, sub)
    const mul = i() * 1
    Assert.equals(1, mul)
    const div = i() / 1
    Assert.equals(1, div)
    const rem = i() % 1
    Assert.equals(0, rem)
    const shl = i() << 1
    Assert.equals(2, shl)
    const shr = i() >> 1
    Assert.equals(0, shr)
    const xor = i() ^ 1
    Assert.equals(0, xor)
    const band = i() & 1
    Assert.equals(1, band)
    const bor = i() | 1
    Assert.equals(1, bor)
    const gt = i() > 1
    Assert.equals(false, gt)
    const lt = i() < 1
    Assert.equals(false, lt)
    const geq = i() >= 1
    Assert.equals(true, geq)
    const leq = i() <= 1
    Assert.equals(true, leq)
    const inv = !b()
    Assert.equals(false, inv)
    const land = b() && true
    Assert.equals(true, land)
    const lor = b() || true
    Assert.equals(true, lor)
    const pow = f() ** 1.0
    Assert.equals(1.0, pow)
    const concat = s() + "1"
    Assert.equals("11", concat)
    const ieq = i() == 1
    Assert.equals(true, ieq)
    const ceq = c() == '1'
    Assert.equals(true, ceq)
    const seq = s() == "1"
    Assert.equals(true, seq)
    const feq = f() == 1.0
    Assert.equals(true, feq)
    const ueq = u() == ()
    Assert.equals(true, ueq)
    const beq = b() == true
    Assert.equals(true, beq)
    const ineq = i() != 1
    Assert.equals(false, ineq)
    const cneq = c() != '1'
    Assert.equals(false, cneq)
    const sneq = s() != "1"
    Assert.equals(false, sneq)
    const fneq = f() != 1.0
    Assert.equals(false, fneq)
    const uneq = u() != ()
    Assert.equals(false, uneq)
    const bneq = b() != true
    Assert.equals(false, bneq)

    const s1 = "1"
    const s2 = """
2"""
    const s3 = #"3"#
    const s4 = ###"
4"###
    const s5 = s1 + s2 + s3 + s4
    Assert.equals("123\n4", s5)

    return 0
}
