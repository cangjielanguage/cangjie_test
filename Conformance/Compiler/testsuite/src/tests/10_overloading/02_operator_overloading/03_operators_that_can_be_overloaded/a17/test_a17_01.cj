
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

/*
  @Name:        10_02_03_a17_01

  @Level:         1

  @Assertion:   10.2.3(17)
                4. The function call operator ( ()) overloaded functions have no requirements on input
                parameters and return value types. 
  @Description: Checks that overloading () works for various input parameters and return value types.
  @Mode: run
  @Negative: no
  @Structure: single
  @CompileWarning: ignore
  @Comment: Auto-generated by gen.py

*/

type Tuple = (Int64, Int64)
type Array = Array<Int64>
type Range = Range<Int64>

struct S {
    let x : Int64

    S(y : Int64) { x = y }
}

class C {
    let x : Int64

    C(y : Int64) { x = y }

    operator func ()() : Float16 { 1.0f16 }

    operator func ()(x0: Int32) : Int32 { 1i32 }

    operator func ()(x0: Bool) : S { S(1) }

    operator func ()(x0: Float16) : Rune { r'1' }

    operator func ()(x0: Int64) : Int32 { 1i32 }

    operator func ()(x0: Int16) : Int8 { 1i8 }

    operator func ()(x0: UInt32) : Float64 { 1.0f64 }

    operator func ()(x0: Range) : Unit { () }

    operator func ()(x0: C) : Int64 { 1i64 }

    operator func ()(x0: UInt16) : Int16 { 1i16 }

    operator func ()(x0: String) : Int32 { 1i32 }

    operator func ()(x0: Int8) : UInt8 { 1u8 }

    operator func ()(x0: S) : UInt8 { 1u8 }

    operator func ()(x0: Rune) : Int8 { 1i8 }

    operator func ()(x0: UInt64) : Float32 { 1.0f32 }

    operator func ()(x0: UInt8) : Bool { true }

    operator func ()(x0: Unit) : C { C(1) }

    operator func ()(x0: Tuple) : Tuple { (1, 1) }

    operator func ()(x0: Float32) : Float16 { 1.0f16 }

    operator func ()(x0: Float64) : Tuple { (1, 1) }

    operator func ()(x0: Array) : Int16 { 1i16 }

    operator func ()(x0: Bool, x1: S) : S { S(1) }

    operator func ()(x0: Array, x1: UInt64) : Tuple { (1, 1) }

    operator func ()(x0: Tuple, x1: Float16) : Array { [1] }

    operator func ()(x0: UInt64, x1: Bool) : Bool { true }

    operator func ()(x0: UInt64, x1: Rune) : String { "1" }

    operator func ()(x0: UInt16, x1: UInt16) : Array { [1] }

    operator func ()(x0: String, x1: Tuple) : Int16 { 1i16 }

    operator func ()(x0: UInt64, x1: Array) : UInt16 { 1u16 }

    operator func ()(x0: Float32, x1: Bool) : Int32 { 1i32 }

    operator func ()(x0: Float32, x1: Unit) : Tuple { (1, 1) }

    operator func ()(x0: Int16, x1: Float16) : Float16 { 1.0f16 }

    operator func ()(x0: UInt32, x1: Int8) : UInt16 { 1u16 }

    operator func ()(x0: Int64, x1: Float64) : Float64 { 1.0f64 }

    operator func ()(x0: Float64, x1: Array) : Float64 { 1.0f64 }

    operator func ()(x0: Int32, x1: Bool) : Range { 1..2 }

    operator func ()(x0: Int32, x1: String) : Rune { r'1' }

    operator func ()(x0: Float64, x1: Range) : Int32 { 1i32 }

    operator func ()(x0: Tuple, x1: Bool) : Unit { () }

    operator func ()(x0: UInt32, x1: Array) : Rune { r'1' }

    operator func ()(x0: Int16, x1: Range) : C { C(1) }

    operator func ()(x0: S, x1: C, x2: Tuple) : Float32 { 1.0f32 }

    operator func ()(x0: Bool, x1: Range, x2: UInt32) : Tuple { (1, 1) }

    operator func ()(x0: Bool, x1: UInt32, x2: Int8) : UInt64 { 1u64 }

    operator func ()(x0: Float16, x1: Range, x2: Int64) : Range { 1..2 }

    operator func ()(x0: Int32, x1: Int8, x2: Rune) : Tuple { (1, 1) }

    operator func ()(x0: Int32, x1: Array, x2: Int16) : UInt16 { 1u16 }

    operator func ()(x0: Rune, x1: Int8, x2: Range) : UInt8 { 1u8 }

    operator func ()(x0: UInt64, x1: Range, x2: Rune) : Range { 1..2 }

    operator func ()(x0: Range, x1: Float16, x2: UInt64) : Unit { () }

    operator func ()(x0: UInt16, x1: UInt16, x2: Int8) : Rune { r'1' }

    operator func ()(x0: Int16, x1: UInt64, x2: C) : Unit { () }

    operator func ()(x0: Int32, x1: UInt8, x2: UInt64) : Int16 { 1i16 }

    operator func ()(x0: Range, x1: Bool, x2: UInt8) : Int8 { 1i8 }

    operator func ()(x0: Int64, x1: UInt32, x2: Float16) : UInt8 { 1u8 }

    operator func ()(x0: C, x1: Range, x2: Float64) : Unit { () }

    operator func ()(x0: UInt8, x1: UInt16, x2: Float64) : UInt32 { 1u32 }

    operator func ()(x0: Float16, x1: Array, x2: Unit) : Int8 { 1i8 }

    operator func ()(x0: Float64, x1: Range, x2: Array) : Float16 { 1.0f16 }

    operator func ()(x0: UInt64, x1: Rune, x2: C) : String { "1" }

    operator func ()(x0: Float32, x1: UInt8, x2: Int16) : Float16 { 1.0f16 }

    operator func ()(x0: Int8, x1: Rune, x2: UInt8, x3: Unit) : Int16 { 1i16 }

    operator func ()(x0: Unit, x1: Float32, x2: Tuple, x3: Bool) : Range { 1..2 }

    operator func ()(x0: Bool, x1: UInt8, x2: Int8, x3: Int8) : Float64 { 1.0f64 }

    operator func ()(x0: Unit, x1: Int64, x2: String, x3: Int64) : Bool { true }

    operator func ()(x0: Rune, x1: Int8, x2: Int16, x3: Int32) : String { "1" }

    operator func ()(x0: Range, x1: Float16, x2: Unit, x3: Array) : Int8 { 1i8 }

    operator func ()(x0: Range, x1: Bool, x2: Rune, x3: String) : UInt16 { 1u16 }

    operator func ()(x0: Tuple, x1: Int64, x2: C, x3: Int32) : Bool { true }

    operator func ()(x0: Bool, x1: UInt32, x2: Unit, x3: Int32) : Int32 { 1i32 }

    operator func ()(x0: Int8, x1: C, x2: Int64, x3: Unit) : UInt8 { 1u8 }

    operator func ()(x0: UInt8, x1: Rune, x2: UInt16, x3: Int8) : String { "1" }

    operator func ()(x0: Range, x1: Int32, x2: String, x3: Range) : UInt64 { 1u64 }

    operator func ()(x0: Float16, x1: UInt64, x2: UInt64, x3: Rune) : Int32 { 1i32 }

    operator func ()(x0: Int64, x1: Int64, x2: Float16, x3: Int32) : Int16 { 1i16 }

    operator func ()(x0: Int64, x1: UInt8, x2: C, x3: Range) : Array { [1] }

    operator func ()(x0: Int8, x1: C, x2: UInt8, x3: Bool) : Rune { r'1' }

    operator func ()(x0: C, x1: Int16, x2: S, x3: Int8) : Range { 1..2 }

    operator func ()(x0: Float64, x1: UInt32, x2: String, x3: Float64) : Float32 { 1.0f32 }

    operator func ()(x0: Int64, x1: Int16, x2: Rune, x3: Float16) : UInt8 { 1u8 }

    operator func ()(x0: UInt16, x1: Bool, x2: Float32, x3: Tuple) : Float32 { 1.0f32 }

    operator func ()(x0: String, x1: Bool, x2: Int16, x3: UInt8, x4: Float64) : Unit { () }

    operator func ()(x0: String, x1: Range, x2: Int64, x3: Bool, x4: Float32) : Float32 { 1.0f32 }

    operator func ()(x0: Bool, x1: Int32, x2: UInt32, x3: UInt32, x4: Int64) : Bool { true }

    operator func ()(x0: S, x1: Int8, x2: Float32, x3: Int8, x4: Unit) : Int8 { 1i8 }

    operator func ()(x0: C, x1: UInt16, x2: Int16, x3: Range, x4: Float16) : UInt16 { 1u16 }

    operator func ()(x0: Float32, x1: UInt8, x2: Int32, x3: String, x4: Bool) : Array { [1] }

    operator func ()(x0: Range, x1: Unit, x2: Bool, x3: Int32, x4: Int64) : Float64 { 1.0f64 }

    operator func ()(x0: UInt64, x1: Int8, x2: Int32, x3: Float64, x4: Array) : Array { [1] }

    operator func ()(x0: Range, x1: Int8, x2: Float32, x3: UInt64, x4: UInt8) : Array { [1] }

    operator func ()(x0: Int32, x1: UInt8, x2: S, x3: Float16, x4: Tuple) : Range { 1..2 }

    operator func ()(x0: Bool, x1: Int16, x2: Float64, x3: Int32, x4: Float64) : UInt8 { 1u8 }

    operator func ()(x0: Int64, x1: Tuple, x2: String, x3: UInt32, x4: String) : Float64 { 1.0f64 }

    operator func ()(x0: Int8, x1: Unit, x2: Float64, x3: Rune, x4: Int16) : Array { [1] }

    operator func ()(x0: Float64, x1: Unit, x2: Bool, x3: Float16, x4: S) : Int64 { 1i64 }

    operator func ()(x0: String, x1: UInt8, x2: UInt32, x3: String, x4: Int64) : Range { 1..2 }

    operator func ()(x0: Int8, x1: UInt32, x2: Float16, x3: C, x4: String) : String { "1" }

    operator func ()(x0: Float64, x1: Int64, x2: Float32, x3: Float64, x4: Range) : UInt64 { 1u64 }

    operator func ()(x0: Unit, x1: Int32, x2: Array, x3: Float64, x4: Int8) : C { C(1) }

    operator func ()(x0: Tuple, x1: Int64, x2: UInt16, x3: Int64, x4: Float32) : Float64 { 1.0f64 }

    operator func ()(x0: C, x1: Bool, x2: Tuple, x3: Tuple, x4: String) : Int32 { 1i32 }

    operator func ()(x0: UInt32, x1: UInt32, x2: Rune, x3: S, x4: Bool, x5: UInt16) : UInt32 { 1u32 }

    operator func ()(x0: Float32, x1: UInt8, x2: Range, x3: S, x4: Float32, x5: S) : Float16 { 1.0f16 }

    operator func ()(x0: Range, x1: UInt16, x2: Int64, x3: UInt64, x4: Rune, x5: Float64) : C { C(1) }

    operator func ()(x0: String, x1: Tuple, x2: Float16, x3: Int8, x4: Int32, x5: UInt16) : UInt64 { 1u64 }

    operator func ()(x0: Array, x1: UInt64, x2: Int64, x3: UInt16, x4: UInt16, x5: UInt8) : Int32 { 1i32 }

    operator func ()(x0: Float64, x1: Int32, x2: Float32, x3: Array, x4: String, x5: C) : S { S(1) }

    operator func ()(x0: Unit, x1: UInt8, x2: Rune, x3: Int16, x4: Tuple, x5: UInt32) : Float64 { 1.0f64 }

    operator func ()(x0: Tuple, x1: Range, x2: Int64, x3: S, x4: Float64, x5: UInt16) : Int32 { 1i32 }

    operator func ()(x0: Float16, x1: Range, x2: Int16, x3: Int8, x4: UInt64, x5: Float16) : Float64 { 1.0f64 }

    operator func ()(x0: Range, x1: UInt32, x2: C, x3: Int8, x4: C, x5: Int8) : Range { 1..2 }

    operator func ()(x0: Float32, x1: UInt32, x2: Unit, x3: Float64, x4: Bool, x5: S) : Range { 1..2 }

    operator func ()(x0: UInt8, x1: C, x2: Range, x3: C, x4: Float32, x5: Float64) : UInt8 { 1u8 }

    operator func ()(x0: Float32, x1: Float32, x2: Int32, x3: Unit, x4: Bool, x5: Int16) : Range { 1..2 }

    operator func ()(x0: Rune, x1: Int8, x2: UInt64, x3: Bool, x4: Int32, x5: UInt8) : UInt8 { 1u8 }

    operator func ()(x0: Float16, x1: C, x2: UInt32, x3: Range, x4: String, x5: Float64) : Tuple { (1, 1) }

    operator func ()(x0: Unit, x1: Float16, x2: Float64, x3: Bool, x4: Int64, x5: UInt8) : Tuple { (1, 1) }

    operator func ()(x0: UInt16, x1: Rune, x2: Float64, x3: S, x4: Range, x5: Tuple) : Rune { r'1' }

    operator func ()(x0: Bool, x1: Int8, x2: Array, x3: Unit, x4: Bool, x5: C) : Int8 { 1i8 }

    operator func ()(x0: Int8, x1: C, x2: Rune, x3: Rune, x4: Bool, x5: C) : Float16 { 1.0f16 }

    operator func ()(x0: UInt64, x1: Int8, x2: S, x3: Int64, x4: UInt64, x5: Int8) : C { C(1) }
}

main() {
    let c0 : Float16 = C(1)()
    let c1 : Int32 = C(1)(1i32)
    let c2 : S = C(1)(true)
    let c3 : Rune = C(1)(1.0f16)
    let c4 : Int32 = C(1)(1i64)
    let c5 : Int8 = C(1)(1i16)
    let c6 : Float64 = C(1)(1u32)
    let c7 : Unit = C(1)(1..2)
    let c8 : Int64 = C(1)(C(1))
    let c9 : Int16 = C(1)(1u16)
    let c10 : Int32 = C(1)("1")
    let c11 : UInt8 = C(1)(1i8)
    let c12 : UInt8 = C(1)(S(1))
    let c13 : Int8 = C(1)(r'1')
    let c14 : Float32 = C(1)(1u64)
    let c15 : Bool = C(1)(1u8)
    let c16 : C = C(1)(())
    let c17 : Tuple = C(1)((1, 1))
    let c18 : Float16 = C(1)(1.0f32)
    let c19 : Tuple = C(1)(1.0f64)
    let c20 : Int16 = C(1)([1])
    let c21 : S = C(1)(true, S(1))
    let c22 : Tuple = C(1)([1], 1u64)
    let c23 : Array = C(1)((1, 1), 1.0f16)
    let c24 : Bool = C(1)(1u64, true)
    let c25 : String = C(1)(1u64, r'1')
    let c26 : Array = C(1)(1u16, 1u16)
    let c27 : Int16 = C(1)("1", (1, 1))
    let c28 : UInt16 = C(1)(1u64, [1])
    let c29 : Int32 = C(1)(1.0f32, true)
    let c30 : Tuple = C(1)(1.0f32, ())
    let c31 : Float16 = C(1)(1i16, 1.0f16)
    let c32 : UInt16 = C(1)(1u32, 1i8)
    let c33 : Float64 = C(1)(1i64, 1.0f64)
    let c34 : Float64 = C(1)(1.0f64, [1])
    let c35 : Range = C(1)(1i32, true)
    let c36 : Rune = C(1)(1i32, "1")
    let c37 : Int32 = C(1)(1.0f64, 1..2)
    let c38 : Unit = C(1)((1, 1), true)
    let c39 : Rune = C(1)(1u32, [1])
    let c40 : C = C(1)(1i16, 1..2)
    let c41 : Float32 = C(1)(S(1), C(1), (1, 1))
    let c42 : Tuple = C(1)(true, 1..2, 1u32)
    let c43 : UInt64 = C(1)(true, 1u32, 1i8)
    let c44 : Range = C(1)(1.0f16, 1..2, 1i64)
    let c45 : Tuple = C(1)(1i32, 1i8, r'1')
    let c46 : UInt16 = C(1)(1i32, [1], 1i16)
    let c47 : UInt8 = C(1)(r'1', 1i8, 1..2)
    let c48 : Range = C(1)(1u64, 1..2, r'1')
    let c49 : Unit = C(1)(1..2, 1.0f16, 1u64)
    let c50 : Rune = C(1)(1u16, 1u16, 1i8)
    let c51 : Unit = C(1)(1i16, 1u64, C(1))
    let c52 : Int16 = C(1)(1i32, 1u8, 1u64)
    let c53 : Int8 = C(1)(1..2, true, 1u8)
    let c54 : UInt8 = C(1)(1i64, 1u32, 1.0f16)
    let c55 : Unit = C(1)(C(1), 1..2, 1.0f64)
    let c56 : UInt32 = C(1)(1u8, 1u16, 1.0f64)
    let c57 : Int8 = C(1)(1.0f16, [1], ())
    let c58 : Float16 = C(1)(1.0f64, 1..2, [1])
    let c59 : String = C(1)(1u64, r'1', C(1))
    let c60 : Float16 = C(1)(1.0f32, 1u8, 1i16)
    let c61 : Int16 = C(1)(1i8, r'1', 1u8, ())
    let c62 : Range = C(1)((), 1.0f32, (1, 1), true)
    let c63 : Float64 = C(1)(true, 1u8, 1i8, 1i8)
    let c64 : Bool = C(1)((), 1i64, "1", 1i64)
    let c65 : String = C(1)(r'1', 1i8, 1i16, 1i32)
    let c66 : Int8 = C(1)(1..2, 1.0f16, (), [1])
    let c67 : UInt16 = C(1)(1..2, true, r'1', "1")
    let c68 : Bool = C(1)((1, 1), 1i64, C(1), 1i32)
    let c69 : Int32 = C(1)(true, 1u32, (), 1i32)
    let c70 : UInt8 = C(1)(1i8, C(1), 1i64, ())
    let c71 : String = C(1)(1u8, r'1', 1u16, 1i8)
    let c72 : UInt64 = C(1)(1..2, 1i32, "1", 1..2)
    let c73 : Int32 = C(1)(1.0f16, 1u64, 1u64, r'1')
    let c74 : Int16 = C(1)(1i64, 1i64, 1.0f16, 1i32)
    let c75 : Array = C(1)(1i64, 1u8, C(1), 1..2)
    let c76 : Rune = C(1)(1i8, C(1), 1u8, true)
    let c77 : Range = C(1)(C(1), 1i16, S(1), 1i8)
    let c78 : Float32 = C(1)(1.0f64, 1u32, "1", 1.0f64)
    let c79 : UInt8 = C(1)(1i64, 1i16, r'1', 1.0f16)
    let c80 : Float32 = C(1)(1u16, true, 1.0f32, (1, 1))
    let c81 : Unit = C(1)("1", true, 1i16, 1u8, 1.0f64)
    let c82 : Float32 = C(1)("1", 1..2, 1i64, true, 1.0f32)
    let c83 : Bool = C(1)(true, 1i32, 1u32, 1u32, 1i64)
    let c84 : Int8 = C(1)(S(1), 1i8, 1.0f32, 1i8, ())
    let c85 : UInt16 = C(1)(C(1), 1u16, 1i16, 1..2, 1.0f16)
    let c86 : Array = C(1)(1.0f32, 1u8, 1i32, "1", true)
    let c87 : Float64 = C(1)(1..2, (), true, 1i32, 1i64)
    let c88 : Array = C(1)(1u64, 1i8, 1i32, 1.0f64, [1])
    let c89 : Array = C(1)(1..2, 1i8, 1.0f32, 1u64, 1u8)
    let c90 : Range = C(1)(1i32, 1u8, S(1), 1.0f16, (1, 1))
    let c91 : UInt8 = C(1)(true, 1i16, 1.0f64, 1i32, 1.0f64)
    let c92 : Float64 = C(1)(1i64, (1, 1), "1", 1u32, "1")
    let c93 : Array = C(1)(1i8, (), 1.0f64, r'1', 1i16)
    let c94 : Int64 = C(1)(1.0f64, (), true, 1.0f16, S(1))
    let c95 : Range = C(1)("1", 1u8, 1u32, "1", 1i64)
    let c96 : String = C(1)(1i8, 1u32, 1.0f16, C(1), "1")
    let c97 : UInt64 = C(1)(1.0f64, 1i64, 1.0f32, 1.0f64, 1..2)
    let c98 : C = C(1)((), 1i32, [1], 1.0f64, 1i8)
    let c99 : Float64 = C(1)((1, 1), 1i64, 1u16, 1i64, 1.0f32)
    let c100 : Int32 = C(1)(C(1), true, (1, 1), (1, 1), "1")
    let c101 : UInt32 = C(1)(1u32, 1u32, r'1', S(1), true, 1u16)
    let c102 : Float16 = C(1)(1.0f32, 1u8, 1..2, S(1), 1.0f32, S(1))
    let c103 : C = C(1)(1..2, 1u16, 1i64, 1u64, r'1', 1.0f64)
    let c104 : UInt64 = C(1)("1", (1, 1), 1.0f16, 1i8, 1i32, 1u16)
    let c105 : Int32 = C(1)([1], 1u64, 1i64, 1u16, 1u16, 1u8)
    let c106 : S = C(1)(1.0f64, 1i32, 1.0f32, [1], "1", C(1))
    let c107 : Float64 = C(1)((), 1u8, r'1', 1i16, (1, 1), 1u32)
    let c108 : Int32 = C(1)((1, 1), 1..2, 1i64, S(1), 1.0f64, 1u16)
    let c109 : Float64 = C(1)(1.0f16, 1..2, 1i16, 1i8, 1u64, 1.0f16)
    let c110 : Range = C(1)(1..2, 1u32, C(1), 1i8, C(1), 1i8)
    let c111 : Range = C(1)(1.0f32, 1u32, (), 1.0f64, true, S(1))
    let c112 : UInt8 = C(1)(1u8, C(1), 1..2, C(1), 1.0f32, 1.0f64)
    let c113 : Range = C(1)(1.0f32, 1.0f32, 1i32, (), true, 1i16)
    let c114 : UInt8 = C(1)(r'1', 1i8, 1u64, true, 1i32, 1u8)
    let c115 : Tuple = C(1)(1.0f16, C(1), 1u32, 1..2, "1", 1.0f64)
    let c116 : Tuple = C(1)((), 1.0f16, 1.0f64, true, 1i64, 1u8)
    let c117 : Rune = C(1)(1u16, r'1', 1.0f64, S(1), 1..2, (1, 1))
    let c118 : Int8 = C(1)(true, 1i8, [1], (), true, C(1))
    let c119 : Float16 = C(1)(1i8, C(1), r'1', r'1', true, C(1))
    let c120 : C = C(1)(1u64, 1i8, S(1), 1i64, 1u64, 1i8)
}
