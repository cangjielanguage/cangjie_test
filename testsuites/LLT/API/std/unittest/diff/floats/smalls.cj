/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 *
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
// EXEC: %compiler %cmp_opt -Woff=all %n.cj -o %output %cmp_utest_opt 2>&1
// EXEC-PIPE-1: %run %run_opt %output %run_utest_opt %run_args 2>&1 | compare %f

import std.unittest.*
import std.unittest.testmacro.*

@Test
public class TestA {
    @TestCase
    func case1() {
        let a = 0.00000000000000000000000000000001 + 0.00000000000000000000000000000001
        let b = 0.00000000000000000000000000000001 + 0.00000000000000000000000000000002
        @Assert(a, b)
    }
    @TestCase
    func case2() {
        let a = 0.00000000000000000000000000000000000000000000001 + 0.00000000000000000000000000000000000000000000001
        let b = 0.00000000000000000000000000000000000000000000001 + 0.00000000000000000000000000000000000000000000002
        @Assert(a, b)
    }
    @TestCase
    func case3() {
        let a = 0.00000000000000000000000000000000000000000000000000000000000000000000000000001 +
            0.00000000000000000000000000000000000000000000000000000000000000000000000000001
        let b = 0.00000000000000000000000000000000000000000000000000000000000000000000000000001 +
            0.00000000000000000000000000000000000000000000000000000000000000000000000000002
        @Assert(a, b)
    }
    @TestCase
    func case4() {
        let a = 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 +
            0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        let b = 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 +
            0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
        @Assert(a, b)
    }
    @TestCase
    func case5() {
        let a = 0.00000000000000005000000000000001 + 0.00000000000000000000000000000001
        let b = 0.00000000000000005000000000000001 + 0.00000000000000000000000000000002
        @Assert(a, b)
    }
    @TestCase
    func case6() {
        let a = 0.00000000000000005000000900000001 + 0.00000000000000000000000000000001
        let b = 0.00000000000000004000000000000001 + 0.00000000000000000000000000000002
        @Assert(a, b)
    }
    @TestCase
    func case7() {
        let a = 0.00000000000000000000000000000001 * 2.0
        let b = 0.00000000000000000000000000000001 * 9.0
        @Assert(a, b)
    }
    @TestCase
    func case8() {
        let a = 0.00000000000000000000000000000001 * 2.0
        let b = 0.0000000000001 * 9.0
        @Assert(a, b)
    }
    @TestCase
    func case9() {
        let a = 0.00000000000000000000000000000000000000000000000000000009
        let b = 1.0
        @Assert(a, b)
    }
    @TestCase
    func case10() {
        let a = 0.00000000000000009
        let b = 1000.0
        @Assert(a, b)
    }
    @TestCase
    func case11() {
        let a = 0.00500000000000009
        let b = 1000.0
        @Assert(a, b)
    }
}

/* SCAN-IN
    Assert Failed: {COLOR=YELLOW}a{/COLOR} != {COLOR=YELLOW}b{/COLOR}
         a: {COLOR=RED}2e-32{/COLOR}
         b: {COLOR=RED}3e-32{/COLOR}
     delta: {COLOR=YELLOW}-1e-32{/COLOR}
 */

/* SCAN-IN
    Assert Failed: {COLOR=YELLOW}a{/COLOR} != {COLOR=YELLOW}b{/COLOR}
         a: {COLOR=RED}2e-47{/COLOR}
         b: {COLOR=RED}3e-47{/COLOR}
     delta: {COLOR=YELLOW}-1e-47{/COLOR}
 */

/* SCAN-IN
    Assert Failed: {COLOR=YELLOW}a{/COLOR} != {COLOR=YELLOW}b{/COLOR}
         a: {COLOR=RED}2e-77{/COLOR}
         b: {COLOR=RED}3e-77{/COLOR}
     delta: {COLOR=YELLOW}-1e-77{/COLOR}
 */

/* SCAN-IN
    Assert Failed: {COLOR=YELLOW}a{/COLOR} != {COLOR=YELLOW}b{/COLOR}
         a: {COLOR=RED}2e-229{/COLOR}
         b: {COLOR=RED}3e-229{/COLOR}
     delta: {COLOR=YELLOW}-1e-229{/COLOR}
 */

/* SCAN-IN
    Assert Failed: {COLOR=YELLOW}a{/COLOR} != {COLOR=YELLOW}b{/COLOR}
         a: 5.000000000000002{COLOR=RED}36068e-17{/COLOR}
         b: 5.000000000000002{COLOR=RED}97698e-17{/COLOR}
     delta: {COLOR=YELLOW}-6.16297582203915472978e-33{/COLOR}
 */

/* SCAN-IN
    Assert Failed: {COLOR=YELLOW}a{/COLOR} != {COLOR=YELLOW}b{/COLOR}
         a: {COLOR=RED}5e-17{/COLOR}
         b: {COLOR=RED}4e-17{/COLOR}
     delta: {COLOR=YELLOW}1e-17{/COLOR}
 */

/* SCAN-IN
    Assert Failed: {COLOR=YELLOW}a{/COLOR} != {COLOR=YELLOW}b{/COLOR}
         a: {COLOR=RED}2e-32{/COLOR}
         b: {COLOR=RED}9e-32{/COLOR}
     delta: {COLOR=YELLOW}-7e-32{/COLOR}
 */

/* SCAN-IN
    Assert Failed: {COLOR=YELLOW}a{/COLOR} != {COLOR=YELLOW}b{/COLOR}
         a: {COLOR=RED}2e-32{/COLOR}
         b: {COLOR=RED}9e-13{/COLOR}
     delta: {COLOR=YELLOW}-9e-13{/COLOR}
 */

/* SCAN-IN
    Assert Failed: {COLOR=YELLOW}a{/COLOR} != {COLOR=YELLOW}b{/COLOR}
         a: {COLOR=RED}9e-56{/COLOR}
         b: {COLOR=RED}1.0{/COLOR}
     delta: {COLOR=YELLOW}-1.0{/COLOR}
 */

/* SCAN-IN
    Assert Failed: {COLOR=YELLOW}a{/COLOR} != {COLOR=YELLOW}b{/COLOR}
         a: {COLOR=RED}9e-17{/COLOR}
         b: {COLOR=RED}1000.0{/COLOR}
     delta: {COLOR=YELLOW}-1000.0{/COLOR}
 */

/* SCAN-IN
    Assert Failed: {COLOR=YELLOW}a{/COLOR} != {COLOR=YELLOW}b{/COLOR}
         a: {COLOR=RED}0.005{/COLOR}
         b: {COLOR=RED}1000.0{/COLOR}
     delta: {COLOR=YELLOW}-999.995{/COLOR}
 */
