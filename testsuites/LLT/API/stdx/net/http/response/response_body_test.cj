/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 *
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
// EXEC: %compiler %import-cangjie-stdx  %cmp_opt %f -o %output %cmp_utest_opt
// RUN-EXEC-PIPE-0: %set_stdx_path %run %run_opt %output %run_utest_opt %run_args 2>&1

/**
 * Test description:
 *      Multiple types of bodies in HttpResponseBuilder can be set.
 *      The response bodySize and toString generated by HttpResponseBuilder.build() meet the expectation.
 * Test API:
 *      public class HttpResponseBuilder
 *          public func body(body: Array<UInt8>): HttpResponseBuilder
 *          public func body(body: InputStream): HttpResponseBuilder
 *          public func body(body: String): HttpResponseBuilder
 *
 *      public class HttpResponse
 *          public func bodySize(): Option<Int64>
 *          public func toString(): String
 */

package tests.response

import stdx.net.http.*
import std.collection.*
import std.io.*

@Test
class TestReaponseBody {
    @TestCase
    func testResponseBodyString1(): Unit {
        let headers = HttpHeaders()
        headers.add("content-type", " text/html; charset=UTF-8")
        var response = HttpResponseBuilder()
            .version(HTTP1_1)
            .status(200)
            .addHeaders(headers)
            .body("body test 1")
            .build()
        let except = "HTTP/1.1 200 OK\r\ncontent-type: text/html; charset=UTF-8\r\n\r\nbody size: 11\r\n"
        @Expect(response.toString(), except)
        @Expect(response.bodySize, 11)
    }

    @TestCase
    func testResponseBodyString2(): Unit {
        let headers = HttpHeaders()
        headers.add("content-type", " text/html; charset=UTF-8")
        let message = BodyWithoutLength("body test 2".toArray())
        var response = HttpResponseBuilder().version(HTTP1_1).status(200).addHeaders(headers).body(message).build()
        let except = "HTTP/1.1 200 OK\r\ncontent-type: text/html; charset=UTF-8\r\n\r\nunknown body size\r\n"
        @Expect(response.toString(), except)
        @Expect(response.bodySize, None)
    }

    @TestCase
    func testResponseBodyString3(): Unit {
        let headers = HttpHeaders()
        headers.add("content-type", " text/html; charset=UTF-8")
        let message = "body test 3".toArray()
        var response = HttpResponseBuilder().version(HTTP1_1).status(200).addHeaders(headers).body(message).build()
        let except = "HTTP/1.1 200 OK\r\ncontent-type: text/html; charset=UTF-8\r\n\r\nbody size: 11\r\n"
        @Expect(response.toString(), except)
        @Expect(response.bodySize, 11)
    }

    @TestCase
    func testResponseBodyString4(): Unit {
        let headers = HttpHeaders()
        headers.add("content-type", " text/html; charset=UTF-8")
        let message = BodyWithLength("body test 2".toArray())
        var response = HttpResponseBuilder().version(HTTP1_1).status(200).addHeaders(headers).body(message).build()
        let except = "HTTP/1.1 200 OK\r\ncontent-type: text/html; charset=UTF-8\r\n\r\nbody size: 11\r\n"
        @Expect(response.toString(), except)
        @Expect(response.bodySize, 11)
    }
}

class BodyWithoutLength <: InputStream {
    var index = 0
    BodyWithoutLength(let data: Array<UInt8>) {}
    public func read(arr: Array<UInt8>): Int64 {
        var readLen = arr.size
        if (data.size - index < arr.size) {
            readLen = data.size - index
        }
        data.copyTo(arr, 0, 0, readLen)
        index += readLen
        return readLen
    }
}

class BodyWithLength <: InputStream & Seekable {
    var index = 0
    BodyWithLength(let data: Array<UInt8>) {}
    public prop length: Int64 {
        get() {
            this.data.size
        }
    }
    public func read(arr: Array<UInt8>): Int64 {
        var readLen = arr.size
        if (data.size - index < arr.size) {
            readLen = data.size - index
        }
        data.copyTo(arr, 0, 0, readLen)
        index += readLen
        return readLen
    }

    public func seek(_: SeekPosition): Int64 {
        0
    }
}
