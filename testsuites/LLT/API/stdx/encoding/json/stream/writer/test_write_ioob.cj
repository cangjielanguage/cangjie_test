/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 *
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */
// EXEC: %compiler  %import-cangjie-stdx  %cmp_opt %f -o %output
// RUN-EXEC:%set_stdx_path %run %run_opt %output

import stdx.encoding.json.stream.*
import stdx.encoding.json.*
import std.fs.*
import std.io.*
import std.collection.*

var v = HashMap<String, Any>()

main(): Int64 {
    println("hello world")
    v.add("organizationId", ())
    v.add("lastUpdateDateTo", ())
    v.add("pageNumber", 1)
    v.add("lastUpdateDateFrom", ())
    v.add(
        "itemNumbers",
        ArrayList<String>(
            [
                "02670076",
                "02670084",
                "02670085",
                "02670086",
                "02670088",
                "02670089",
                "02670089=",
                "02670092",
                "02670093",
                "02670095",
                "02670096",
                "02700001",
                "02700001=",
                "02700002",
                "02700002=",
                "02700003=",
                "02700007",
                "02700008",
                "02700008-001",
                "02700009",
                "02700010",
                "02700012",
                "02700012-001",
                "02700013",
                "02700013-001",
                "02700014",
                "02700014-001",
                "02700017",
                "02700018",
                "02700020",
                "02700022",
                "02700023",
                "02700024",
                "02700025",
                "02700026",
                "02700027",
                "02700028",
                "02700029",
                "02700030=",
                "02700033",
                "02700033-001",
                "02700034",
                "02700034-001",
                "02700048",
                "02700048-001",
                "02700048-001=",
                "02700048-002",
                "02700048-002=",
                "02700048-003",
                "02700048-003=",
                "02700049",
                "02700049-001",
                "02700049-001=",
                "02700049-002",
                "02700049-005",
                "02700053",
                "02700054",
                "02700055",
                "02700055=",
                "02700056",
                "02700056=",
                "02700058",
                "02700058=",
                "02700059",
                "02700060=",
                "02700062",
                "02700070",
                "02700070=",
                "02700071",
                "02700073",
                "02700073=",
                "02700074",
                "02700074=",
                "02700075",
                "02700075=",
                "02700076",
                "02700076=",
                "02700077",
                "02700077=",
                "02700078",
                "02700079",
                "02700079=",
                "02700080",
                "02700081",
                "02700082",
                "02700084=",
                "02700085",
                "02700089=",
                "02700090=",
                "02700093",
                "02700093=",
                "02700095",
                "02700098",
                "02700099",
                "02700099=",
                "02700101",
                "02700101=",
                "02700102",
                "02700102=",
                "02700105",
                "02700101",
                "02700101=",
                "02700102",
                "02700102=",
                "02700105"
            ]
        )
    )
    v.add("crossReferenceType",

    v.add("pageSize", 101)
    v.add(
        "itemCodeList",
        ArrayList<String>(
            [
                "02670076",
                "02670084",
                "02670085",
                "02670086",
                "02670088",
                "02670089",
                "02670089=",
                "02670092",
                "02670093",
                "02670095",
                "02670096",
                "02700001",
                "02700001=",
                "02700002",
                "02700002=",
                "02700003=",
                "02700007",
                "02700008",
                "02700008-001",
                "02700009",
                "02700010",
                "02700012",
                "02700012-001",
                "02700013",
                "02700013-001",
                "02700014",
                "02700014-001",
                "02700017",
                "02700018",
                "02700020",
                "02700022",
                "02700023",
                "02700024",
                "02700025",
                "02700026",
                "02700027",
                "02700028",
                "02700029",
                "02700030=",
                "02700033",
                "02700033-001",
                "02700034",
                "02700034-001",
                "02700048",
                "02700048-001",
                "02700048-001=",
                "02700048-002",
                "02700048-002=",
                "02700048-003",
                "02700048-003=",
                "02700049",
                "02700049-001",
                "02700049-001=",
                "02700049-002",
                "02700049-005",
                "02700053",
                "02700054",
                "02700055",
                "02700055=",
                "02700056",
                "02700056=",
                "02700058",
                "02700058=",
                "02700059",
                "02700060=",
                "02700062",
                "02700070",
                "02700070=",
                "02700071",
                "02700073",
                "02700073=",
                "02700074",
                "02700074=",
                "02700075",
                "02700075=",
                "02700076",
                "02700076=",
                "02700077",
                "02700077=",
                "02700078",
                "02700079",
                "02700079=",
                "02700080",
                "02700081",
                "02700082",
                "02700084=",
                "02700085",
                "02700089=",
                "02700090=",
                "02700093",
                "02700093=",
                "02700095",
                "02700098",
                "02700099",
                "02700099=",
                "02700101",
                "02700101=",
                "02700102",
                "02700102=",
                "02700105",
                "02700098",
                "02700099",
                "02700099=",
                "02700101",
                "02700101=",
                "02700102",
                "02700102=",
                "02700105"
            ]
        )
    )
    v.add("languageCode", ())
    v.add("enableFlag", "Y")
    v.add("crossReferenceValueList", ())
    var query = HashMap<String, Any>()
    query.add("queryDTO", v)
    var request = HashMap<String, Any>()
    request.add("service", "serviceService")
    request.add("method", "invokeServiceConnectionByAssetId")
    request.add("args",
        ["POST$hprod.pd.item.openapi.v1.itemcrossreferenceopen.queryItemCrossReferenceList$queryItemCrossReferenceListDSL$1725422194679",
            query])
    let stream = ByteBuffer()
    let writer = JsonStreamWriter(stream)
    writer.writeValue(request)
    writer.flush()
    return 0
}

public class JsonStreamWriter {
    let writer: JsonWriter
    let visitedObjects = LinkedList<Object>()

    public init(stream: OutputStream) {
        this.writer = JsonWriter(stream)
    }

    func flush(): Unit {
        writer.flush()
    }

    public func writeValue(value: Any): Unit {
        match (value) {
            case s: String => writer.writeValue<String>(s)
            case b: Bool => writer.writeValue<Bool>(b)
            case i: Int => writer.writeValue<Int64>(i)
            case collection: ArrayList<String> => writeCollection(collection)
            case array_: Array<Any> => writeArray(array_)
            case map: HashMap<String, Any> => writeMap(map)
            case unit: Unit => writer.writeNullValue()
            case _ => throw Exception("Cannot convert  to json")
        }
    }

    func writeArray(collection: Array<Any>): Unit {
        writer.startArray()
        for (value in collection) {
            writeValue(value)
        }
        writer.endArray()
    }

    func writeCollection(collection: ArrayList<String>): Unit {
        writer.startArray()
        for (value in collection) {
            writeValue(value)
        }
        writer.endArray()
    }

    func writeMap(map: HashMap<String, Any>): Unit {
        writer.startObject()
        for ((k, v) in map) {
            writer.writeName(k.toString())
            writeValue(v)
        }
        writer.endObject()
    }
}

public class ByteArrayInputStream <: InputStream {
    let bytes: Array<Byte>
    var start: Int64
    var remain: Int64

    public init(bytes: Array<Byte>) {
        this.bytes = bytes
        this.start = 0
        this.remain = bytes.size
    }

    public init(str: String) {
        this(unsafe { str.rawData() })
    }

    public func read(buf: Array<Byte>): Int64 {
        if (remain == 0) {
            return 0
        }
        let bufSize = buf.size
        let size = if (bufSize <= remain) {
            bufSize
        } else {
            remain
        }
        bytes.copyTo(buf, start, 0, size)
        start += size
        remain -= size
        return size
    }
}
