// random seed:1706776136499
// All global variable need to be defined before use!


internal import pkg1.* 


public const var_1706776136499_10: String = #"sC-1bOTBqy"# 
var var_1706776136499_52: Int = Int64(Int16(Int16(UInt8(10)))) 
let var_1706776136499_65: Unit =() 
const var_1706776136499_103: Unit =() 
const var_1706776136499_116: UInt32 = 125 
public let var_1706776136499_548: VArray < Unit, $1 >=[()] 
public let var_1706776136499_645: Class_1706776136499_298 = Class_1706776136499_298() 
let var_1706776136499_712:(VArray < Unit, $1 >, Range < UInt64 >, Int64, Class_1706776136499_298, Rune) =(VArray < Unit, $1 >({ i =>() }),((UInt64(UInt64(UInt16(Int16(78)))) & 127) ..=(UInt64(UInt64(32)) & 127):(Int64(- 53) | 1)), Int64(Int8(Int8(- 123))), Class_1706776136499_298(), r'u') 
public let var_1706776136499_827: Int8 = Int8(UInt8(Int8(37))) 
public var var_1706776136499_833: Int = Int64(Int32(Int16(52))) 
public var var_1706776136499_854: Class_1706776136499_119 = Class_1706776136499_119() 
public var var_1706776136499_925: Array < Int64 >=[Int64(9), Int64(- 43), Int64(- 86), Int64(- 40), Int64(- 104), Int64(- 99), Int64(18), Int64(- 107), Int64(4), Int64(- 50)] 
const func func_1706776136499_100(): Unit { 
    var_1706776136499_103 
    func_1706776136499_106(namedParam_1706776136499_109: var_1706776136499_116) 
} 
 public open class Class_1706776136499_119 { 
    public init() { 
    } 
    
    public init(param_1706776136499_619: Unit, param_1706776136499_620:(String, UInt32) -> Unit, optionalParam_1706776136499_624!: Int64 = Int64(Int8(UInt8(UInt8(96)))), optionalParam_1706776136499_629!:(Array < UInt64 >) -> Unit = { lambdaParameter_1706776136499_632: Array < UInt64 > =>() }) { 
        (var_1706776136499_645.var_1706776136499_648??(var_1706776136499_652??(((UInt8(UInt8(59)) & 127) ..(UInt8(UInt8(184)) & 127):(Int64(- 118) | 1)) as Array < UInt64 >))) 
        try { 
            var_1706776136499_116 
            var_1706776136499_335 
            (VArray < Unit, $1 >(repeat: var_1706776136499_103),((UInt64(var_1706776136499_702) & 127) ..=(UInt64(UInt64(72)) & 127):(var_1706776136499_52 | 1)), var_1706776136499_52, var_1706776136499_645, var_1706776136499_189) 
        } finally { 
            var_1706776136499_65 
            var_1706776136499_712 
        }[3] 
        (try { 
            var_1706776136499_65 
            Option < Option < Array < Bool >>>.Some(var_1706776136499_168) 
        } catch(e: Exception) { 
            ((UInt8(UInt8(75)) & 127) ..=(UInt8(UInt8(21)) & 127):(Int64(- 126) | 1)) 
            VArray < Unit, $1 >(repeat: var_1706776136499_103) 
            Option < Option < Array < Bool >>>.None 
        } finally { 
            UInt64(207) 
            
            var var_1706776136499_746:?Option < Array < Bool >>= Option < Option < Array < Bool >>>.None 
            var_1706776136499_746 
        }??try { 
            var_1706776136499_52 ** UInt64(43) 
            var_1706776136499_754 
            var_1706776136499_168 
        } catch(_) { 
            () 
            var_1706776136499_103 
            Option < Array < Bool >>.None 
        } finally { 
            Option < Array < Bool >>.None 
        }) 
    } 
    
    mut prop var_1706776136499_802: Unit { 
        get() { 
            ((UInt32(UInt32(162)) & 127) ..=(UInt32(UInt32(98)) & 127):(Int64(- 86) | 1)) 
            () 
        } 
        set(Value) { 
            VArray < Unit, $1 >(repeat:()) 
            () 
            () 
        } } 
        
        public static let var_1706776136499_873: Unit =() 
        
        public var var_1706776136499_889: Bool = true 
    } 
    func func_1706776136499_123(): Class_1706776136499_119 { 
        
        let var_1706776136499_500:(Range < Int32 >) -> Bool = func_1706776136499_127 < Float64, Option < Array < Bool >>> 
        
        var var_1706776136499_513: Interface_1706776136499_223 = Class_1706776136499_284() 
        
        var loopTimeVar_1706776136499_518: Array < UInt64 >=[UInt64(103), UInt64(34), UInt64(Int32(UInt32(UInt32(213)))), UInt64(UInt64(Int64(Int8(51)))), UInt64(210), UInt64(UInt32(Int8(UInt8(19)))), UInt64(UInt16(219)), UInt64(26), UInt64(UInt8(174)), UInt64(Int32(16))] 
        for(i in loopTimeVar_1706776136499_518 where((var_1706776136499_351,((UInt16(UInt16(186)) & 127) ..(UInt16(UInt16(133)) & 127):(Int64(- 10) | 1)),((Int32(Int32(- 57)) & 127) ..=(Int32(Int32(- 2)) & 127):(Int64(- 103) | 1)), Option < Array < UInt64 >>.Some(var_1706776136499_510), var_1706776136499_513)[2] |> var_1706776136499_500)) { 
            () 
        } 
        [var_1706776136499_548, var_1706776136499_548, VArray < Unit, $1 >(repeat: var_1706776136499_65), VArray < Unit, $1 >({ i =>() }), VArray < Unit, $1 >(repeat: var_1706776136499_103), VArray < Unit, $1 >(repeat: var_1706776136499_103), VArray < Unit, $1 >(repeat: var_1706776136499_103), VArray < Unit, $1 >({ i =>() }), var_1706776136499_548, var_1706776136499_548][4][0] 
        
        let var_1706776136499_583: Class_1706776136499_119 = Class_1706776136499_119() 
        
        let var_1706776136499_594: Class_1706776136499_119 = Class_1706776136499_119() 
        
        var var_1706776136499_598:?(Class_1706776136499_119, Range < UInt8 >) = Option <(Class_1706776136499_119, Range < UInt8 >) >.Some((Class_1706776136499_119(),((UInt8(UInt8(Int8(60))) & 127) ..(UInt8(UInt8(228)) & 127):(Int64(- 90) | 1)))) 
        (try { 
            var_1706776136499_65 
            
            var var_1706776136499_586: Range < UInt8 >=((UInt8(UInt8(28)) & 127) ..=(UInt8(UInt8(216)) & 127):(Int64(116) | 1)) 
            if(true) { 
                Option <(Class_1706776136499_119, Range < UInt8 >) >.Some((var_1706776136499_583, var_1706776136499_586)) 
            } else { 
                Option <(Class_1706776136499_119, Range < UInt8 >) >.None 
            } 
        } catch(e: Exception) { 
            var_1706776136499_65 
            Option <(Class_1706776136499_119, Range < UInt8 >) >.Some((var_1706776136499_594,((UInt8(UInt8(37)) & 127) ..(UInt8(UInt8(130)) & 127):(Int64(- 100) | 1)))) 
            var_1706776136499_598 
        } finally { 
            
            let var_1706776136499_610: Int64 = Int64(- 111) 
            var_1706776136499_610 & var_1706776136499_52 
            
            var var_1706776136499_615:(Class_1706776136499_119, Range < UInt8 >) =(Class_1706776136499_119((), func_1706776136499_106, optionalParam_1706776136499_624: Int64(80)),((UInt8(UInt8(136)) & 127) ..=(UInt8(UInt8(246)) & 127):(Int64(UInt8(115)) | 1))) 
            Option <(Class_1706776136499_119, Range < UInt8 >) >.Some(var_1706776136499_615) 
        }??Struct_1706776136499_780.var_1706776136499_785)[0] 
    } 
    main(): Int64 { 
        try { 
            
            let var_1706776136499_48: UInt8 = UInt8(28) 
            
            const var_1706776136499_72: Float32 = 106.0 
            if(try { 
                var_1706776136499_10 
                false 
            } finally { 
                r'M' 
                
                let var_1706776136499_16: Bool = false 
                var_1706776136499_16 
            }) { 
                if(false) { 
                    UInt32(53) * var_1706776136499_25 
                } else if(var_1706776136499_32) { 
                    UInt32(194) - UInt32(166) 
                } else { 
                    true 
                    r'S' 
                    UInt32(139) 
                } 
                try { 
                    var_1706776136499_48 
                    var_1706776136499_52 >>=((Int64(- 123)) & 7) 
                } finally { 
                    var_1706776136499_61 >>=((var_1706776136499_61) & 7) 
                    var_1706776136499_65 
                    () 
                } 
                
                var loopTimeVar_1706776136499_76: Int64 = 0 
                do { 
                    loopTimeVar_1706776136499_76 ++ 
                    var_1706776136499_72 
                    UInt8(165) 
                } while((true) && loopTimeVar_1706776136499_76 < 100) 
            } else if(var_1706776136499_32) { 
                
                var loopTimeVar_1706776136499_83: Range < UInt64 >=((UInt64(UInt64(UInt32(117))) & 127) ..(UInt64(UInt64(UInt16(216))) & 127):(Int64(- 122) | 1)) 
                for(i in loopTimeVar_1706776136499_83 where true) { 
                    UInt16(195) 
                } 
                func_1706776136499_100() 
            } 
            func_1706776136499_123().var_1706776136499_802 
            (Struct_1706776136499_780.func_1706776136499_819 < VArray < Unit, $1 >, Array < Unit >>(UInt32(113))) %(((match(UInt8(55)) { case _: Range < Int64 > => var_1706776136499_65 
                var_1706776136499_10 
                var_1706776136499_52 
                case 125 => Int64(- 42) 
                case _ => var_1706776136499_52 
            } & Int64(UInt16(248)))) | 1) 
            
            var crcCheck = CrcCheck(5000, 32) 
            crcCheck.updateBuffer(UInt64(var_1706776136499_48), 64) 
            crcCheck.updateBuffer(UInt64(var_1706776136499_52 * var_1706776136499_52), 64) 
            crcCheck.updateBuffer(UInt64(var_1706776136499_116 * var_1706776136499_116), 64) 
            crcCheck.updateBuffer(UInt64(var_1706776136499_833 * var_1706776136499_833), 64) 
            crcCheck.crcCheck() 
            crcCheck.getCrcOutput() 
            () 
        } catch(e: NoneValueException) { 
            println("Exception: NoneValueException") 
        } 
        return 0 
    } 
    class CrcCheck { 
        var buffer: Array < Int64 > 
        
        var poly: Array < Int64 > 
        
        var crc_output: Array < Int64 > 
        
        var poly_n: Int64 
        
        var buffer_index: Int64 
        
        var crc_output_n: Int64 
        
        init(buffer_n: Int64, crc_n: Int64) { 
            buffer_index = 0 
            crc_output_n = 0 
            crc_output = Array < Int64 >(crc_output_n, { i => 0 }) 
            buffer = Array < Int64 >(buffer_n, { i => 0 }) 
            poly_n = crc_n + 1 
            if(crc_n == 32) { 
                poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1] 
            } else if(crc_n == 16) { 
                poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
            } else if(crc_n == 8) { 
                poly = [1, 0, 0, 0, 0, 0, 1, 1, 1] 
            } else { 
                poly = [1, 1, 0, 0, 1]
            } 
        } 
        
        func updateBuffer(input: UInt64, byte_n: Int64): Unit { 
            
            var value = input 
            if(byte_n == 64) { 
                value = value & 0xffffffffffffffff 
            } else if(byte_n == 32) { 
                value = value & 0xffffffff 
            } else if(byte_n == 16) { 
                value = value & 0xffff 
            } else { 
                value = value & 0xff 
            } 
            
            var byteArray = Array < Int64 >(byte_n, { i => 0 }) 
            
            var byte_c = 1 
            
            var byte_index = 0 
            while(value != 0) { 
                if(value % 2 == 1) { 
                    byte_index = byte_n - byte_c 
                    byteArray[byte_index] = 1 
                } 
                byte_c ++ 
                value = value >> 1 
            } 
            
            var i = 0 
            while(i + byte_index < byte_n) { 
                buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index] 
                i ++ 
            } 
            buffer_index =(buffer_index + i) % buffer.size 
        } 
        
        func updateBuffer(input: Bool, byte_n: Int64): Unit { 
            if(input == true) { 
                updateBuffer(1, byte_n) 
            } else { 
                updateBuffer(0, byte_n) 
            } 
        } 
        
        func updateBuffer(input: Rune, byte_n: Int64): Unit { 
            updateBuffer(UInt64(UInt32(input)), byte_n) 
        } 
        
        func updateBuffer(input: String, byte_n: Int64): Unit { 
            for(c in input) { 
                updateBuffer(c, byte_n) 
            } 
        } 
        
        func updateBuffer(input: Unit, byte_n: Int64): Unit { 
            updateBuffer(input.toString(), byte_n) 
        } 
        
        func updateBuffer(input: Any, byte_n: Int64): Unit { 
            if(input is Hashable) { 
                match(input as Hashable) { case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n) 
                    case _ => updateBuffer(1, byte_n) 
                } 
            } else if(input is ToString) { 
                match(input as ToString) { case Some(v) => updateBuffer(v.toString(), byte_n) 
                    case _ => updateBuffer(1, byte_n) 
                } 
            } else { 
                updateBuffer(1, byte_n) 
            } 
        } 
        
        func crcCheck(): Unit { 
            crc_output_n = buffer_index + poly_n - 1 
            
            var crc_buffer = Array < Int64 >(crc_output_n, { i => 0 }) 
            
            var i = 0 
            while(i < buffer_index) { 
                crc_buffer[i] = buffer[i] 
                i ++ 
            } 
            i = 0 
            while(i < buffer_index) { 
                if(crc_buffer[i] == 1) { 
                    
                    var j = 0 
                    while(j < poly_n) { 
                        crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j] 
                        j ++ 
                    } 
                } 
                i ++ 
            } 
            
            let check_code = crc_buffer[buffer_index ..] 
            
            var byte_add = 3 - crc_output_n % 3 
            crc_output_n = byte_add + crc_output_n 
            crc_output = Array < Int64 >(crc_output_n, { i => 0 }) 
            i = 0 
            while(i < crc_output_n - byte_add) { 
                if(i < buffer_index) { 
                    crc_output[i + byte_add] = buffer[i] 
                } else { 
                    crc_output[i + byte_add] = check_code[i - buffer_index] 
                } 
                i ++ 
            } 
        } 
        
        func getCrcOutput(): Unit { 
            
            var i = 0 
            while(i < crc_output_n) { 
                
                var hex_value = 2 ** 2 * crc_output[i] + 2 ** 1 * crc_output[i + 1] + 1 * crc_output[i + 2] 
                print(hex_value.toString()) 
                i = i + 3 
            } 
            print("\n") 
        } 
    } 
    

// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.
