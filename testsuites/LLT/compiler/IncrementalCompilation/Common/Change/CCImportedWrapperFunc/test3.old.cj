// random seed:1708141110504
// All global variable need to be defined before use!
package f1.f2.f3




public var var_1708141110504_77: Int64 = Int64(- 76) 
public var var_1708141110504_85: UInt64 = UInt64(208) 
var var_1708141110504_185: Unit =() 
var var_1708141110504_335: Array < VArray < Unit, $7 >>=[[(),(),(),(),(),(),()],[(),(),(),(),(),(),()],[(),(),(),(),(),(),()],[(),(),(),(),(),(),()],[(),(),(),(),(),(),()],[(),(),(),(),(),(),()],[(),(),(),(),(),(),()],[(),(),(),(),(),(),()],[(),(),(),(),(),(),()],[(),(),(),(),(),(),()]] 
let var_1708141110504_348: Option < Array < Bool >>=(UInt64(Int32(UInt32(70))) as Array < Bool >) 
const var_1708141110504_376: Unit =() 
public let var_1708141110504_450: Int16 = Int16(47) 
public let var_1708141110504_470: VArray < Unit, $5 >=[(),(),(),(),()] 
public const var_1708141110504_571: Int8 = 126 
public func func_1708141110504_30(param_1708141110504_31: Int64): UInt64 { 
    
    let var_1708141110504_35: UInt64 = UInt64(UInt64(155)) 
    
    var var_1708141110504_63: Unit =() 
    match(var_1708141110504_35) { case 127 | 137 | 172 | 62 => 
        const var_1708141110504_42: Float64 = 6.0 
        var_1708141110504_42 
        
        let var_1708141110504_45: Int16 = Int16(UInt16(UInt8(Int8(117)))) 
        var_1708141110504_45 
        
        const var_1708141110504_51: Unit =() 
        var_1708141110504_51 
        case 68 | 164 | 219 | 83 => 
        const var_1708141110504_57: Unit =() 
        var_1708141110504_57 
        case _ => var_1708141110504_63 
    } 
    UInt64((Option < UInt64 >.None??UInt64(28))) 
} 
public open class Class_1708141110504_153 < T0, T1 > { 
    public init() { 
    } 
    
    public var var_1708141110504_169:(Int16, UInt8, UInt64) =(Int16(69), UInt8(60), UInt64(177)) 
    
    public static var var_1708141110504_200: UInt32 = UInt32(82) 
    
    var var_1708141110504_212: Byte = UInt8(41) 
    
    private static const var_1708141110504_217: UInt16 = 111 
    
    public var var_1708141110504_274: Unit =() 
    
    static mut prop var_1708141110504_283: VArray < Unit, $7 > { 
        get() { 
            ((Int64(Int64(97)) & 127) ..(Int64(Int64(11)) & 127):(Int64(- 35) | 1)) 
            VArray < Unit, $7 >({ i =>() }) 
            var_1708141110504_603 
        } 
        set(Value) { 
            () 
            var_1708141110504_603 = Value 
        } } 
        
        public static prop var_1708141110504_413: Class_1708141110504_404 { 
            get() { 
                throw Exception()
            } } 
            
            func func_1708141110504_160(param_1708141110504_161: Range < Int8 >, optionalParam_1708141110504_162!: Int32 = Int32(UInt16(43))): VArray < Unit, $5 > { 
                var_1708141110504_169[1] 
                
                let var_1708141110504_230: Int16 = Int16(10) 
                
                var var_1708141110504_245: Unit =() 
                
                var var_1708141110504_270: Bool = false 
                if(match(var_1708141110504_77) { case 86 =>() 
                    var_1708141110504_185 
                    
                    let var_1708141110504_188: Bool =(((UInt32(Int8(53)) as Int64) as Int64) is Float32) 
                    var_1708141110504_188 
                    case caseVar_1708141110504_196 => var_1708141110504_200 += UInt32(119) 
                    () 
                    
                    const var_1708141110504_205: Bool = false 
                    var_1708141110504_205 
                    case _: String => var_1708141110504_212 -- 
                    () 
                    var_1708141110504_217 <= var_1708141110504_217 
                    case _ =>((Int16(Int16(- 50)) & 127) ..(Int16(Int16(28)) & 127):(Int64(4) | 1)) 
                    var_1708141110504_185 
                    Int32(44) == Int32(120) 
                }) { 
                    match(var_1708141110504_230) { case 78 | 85 => var_1708141110504_185 
                        UInt16(233) 
                        
                        var var_1708141110504_239: Bool =(UInt16(105) is(Int64) -> UInt64) 
                        if(var_1708141110504_239) { 
                            VArray < Unit, $7 >(repeat: var_1708141110504_185) 
                        } else { 
                            VArray < Unit, $7 >({ i =>() }) 
                        } 
                        case - 5 =>(Int16(- 87), var_1708141110504_212, var_1708141110504_85) 
                        var_1708141110504_245 
                        if(var_1708141110504_270) { 
                            VArray < Unit, $7 >(repeat: var_1708141110504_274) 
                        } else { 
                            var_1708141110504_283 
                        } 
                        case - 75 | - 127 => var_1708141110504_212 
                        var_1708141110504_283 
                        case _ =>((Int16(Int16(50)) & 127) ..(Int16(Int16(77)) & 127):(Int64(64) | 1)) 
                        UInt8(146) 
                        var_1708141110504_283 
                        case _ => if(false) { 
                            VArray < Unit, $5 >({ i =>() }) 
                        } else { 
                            VArray < Unit, $5 >({ i =>() }) 
                        } 
                        if(true) { 
                            var_1708141110504_283 
                        } else { 
                            var_1708141110504_283 
                        } 
                    } 
                } else { 
                    var_1708141110504_335[4] 
                }[0] 
                
                let var_1708141110504_387: Array < Bool >=[true, true, true, true, false, true, false, false, false, false] 
                if((var_1708141110504_348??[true, true, true, false, false, true, false, true, false, false])[4]) { 
                    var_1708141110504_270 |> { lambdaParameter_1708141110504_366: Bool => } 
                    
                    let var_1708141110504_401: Rune = 'w' 
                    match(Option < Int64 >.None) { case _ => VArray < Unit, $7 >(repeat: var_1708141110504_376) 
                        if(false) { 
                            var_1708141110504_387 
                        } else { 
                            [var_1708141110504_270, var_1708141110504_270, true, true, false, true, var_1708141110504_270, var_1708141110504_270, false, var_1708141110504_270] 
                        } 
                        var_1708141110504_401 
                    } 
                    var_1708141110504_413.var_1708141110504_419 
                } else { 
                    if(var_1708141110504_270) { 
                    } 
                    
                    let var_1708141110504_433: VArray < Unit, $5 >=[(),(),(),(),()] 
                    if(false) { 
                        var_1708141110504_433 
                    } else { 
                        VArray < Unit, $5 >({ i =>() }) 
                    } 
                } 
            } 
            
            static var var_1708141110504_603: VArray < Unit, $7 >=[(),(),(),(),(),(),()] 
        } 
        const func func_1708141110504_357 < T0 >(param_1708141110504_358: Bool): Unit where T0 <: ToString { 
            
            const var_1708141110504_361: Unit =() 
            var_1708141110504_361 
            var_1708141110504_361 
        } 
         public interface Interface_1708141110504_409 { } 
         public interface Interface_1708141110504_411 { } 
        public interface Interface_1708141110504_410 <: Interface_1708141110504_409 & Interface_1708141110504_411 { } 
         public interface Interface_1708141110504_408 < T0, T1, T2 > <: Interface_1708141110504_409 & Interface_1708141110504_410 { } 
        public interface Interface_1708141110504_407 <: Interface_1708141110504_408 < Range < UInt64 >, Array < Bool >, Int32 > { } 
         public open class Class_1708141110504_404 <: Class_1708141110504_153 < Range < UInt16 >, Range < Int8 >> & Interface_1708141110504_407 & Interface_1708141110504_408 < Range < UInt64 >, Array < Bool >, Int32 > { 
            public init() { 
            } 
            
            public var var_1708141110504_419: VArray < Unit, $5 >= VArray < Unit, $5 >({ i =>() }) 
            
            static let var_1708141110504_444: Range < Int8 >=((Int8(Int8(- 52)) & 127) ..=(Int8(Int8(72)) & 127):(Int64(- 97) | 1)) 
        } 
        public func func_1708141110504_131(param_1708141110504_132: Int64): Option < Int64 > { 
            
            func func_1708141110504_148 < T0 >(param_1708141110504_149: Int16): VArray < Unit, $5 > { 
                ((UInt32(UInt32(32)) & 127) ..(UInt32(UInt32(254)) & 127):(Int64(30) | 1)) 
                
                var var_1708141110504_157: Class_1708141110504_153 < Range < UInt16 >, Range < Int8 >>= Class_1708141110504_153 < Range < UInt16 >, Range < Int8 >>() 
                var_1708141110504_157.func_1708141110504_160(Class_1708141110504_404.var_1708141110504_444) 
            } 
            
            var var_1708141110504_456: UInt32 = UInt32(UInt16(12)) 
            
            let var_1708141110504_461:(Int16, UInt8, UInt64) =(Int16(Int8(UInt8(9))), UInt8(213), UInt64(Int32(83))) 
            if(true) { 
                func_1708141110504_148 < Range < Int32 >>(var_1708141110504_450) 
            } else { 
                try { 
                    var_1708141110504_456 >>=((var_1708141110504_456) & 7) 
                    var_1708141110504_461 
                    var_1708141110504_470 
                } finally { 
                    var_1708141110504_470 
                } 
            }[3] 
            
            let var_1708141110504_484: Bool =((() as Int64) is(Int64) -> UInt64) 
            
            let var_1708141110504_493: Range < Int8 >=((Int8(Int8(8)) & 127) ..(Int8(Int8(Int8(UInt8(UInt8(40))))) & 127):(Int64(- 121) | 1)) 
            
            let var_1708141110504_505: UInt16 = UInt16(84) 
            
            let var_1708141110504_519: VArray < Unit, $7 >=[(),(),(),(),(),(),()] 
            
            var loopTimeVar_1708141110504_579: Int = 0 
            do { 
                loopTimeVar_1708141110504_579 ++ 
            } while((try { 
                
                let var_1708141110504_489: Range < UInt8 >=((UInt8(UInt8(82)) & 127) ..=(UInt8(UInt8(125)) & 127):(Int64(66) | 1)) 
                (false,(), var_1708141110504_484, var_1708141110504_489, var_1708141110504_335, var_1708141110504_493, var_1708141110504_85) 
            } catch(_) { 
                var_1708141110504_185 
                var_1708141110504_505 
                
                var var_1708141110504_513: UInt8 = UInt8(254) 
                
                let var_1708141110504_536: Unit =() 
                
                var var_1708141110504_548: VArray < Unit, $7 >=[(),(),(),(),(),(),()] 
                (false, var_1708141110504_185, var_1708141110504_484,((UInt8(var_1708141110504_513) & 127) ..=(UInt8(var_1708141110504_513) & 127):(Int64(- 34) | 1)),[var_1708141110504_519, VArray < Unit, $7 >(repeat: var_1708141110504_376), VArray < Unit, $7 >(repeat:()), VArray < Unit, $7 >({ i =>() }), var_1708141110504_548, var_1708141110504_519, VArray < Unit, $7 >(repeat: var_1708141110504_376), var_1708141110504_548, var_1708141110504_519, var_1708141110504_519],((Int8(var_1708141110504_571) & 127) ..(Int8(var_1708141110504_571) & 127):(Int64(32) | 1)), var_1708141110504_85) 
            }[2]) && loopTimeVar_1708141110504_579 < 100) 
            Option < Int64 >.None 
        } 
        
        extend Class_1708141110504_404 { } 
        
        
        

// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.
