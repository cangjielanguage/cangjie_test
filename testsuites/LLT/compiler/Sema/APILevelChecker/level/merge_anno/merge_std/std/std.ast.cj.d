// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.

// automatically generated by the FlatBuffers compiler, do not modify
// This source file is part of the Cangjie project.

package std.ast

import std.collection.ArrayList
public import std.collection.ArrayList

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_MatchCase <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_MatchCaseOther <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_Pattern <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ConstPattern <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_WildcardPattern <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_VarPattern <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ExceptTypePattern <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_TypePattern <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_EnumPattern <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_VarOrEnumPattern <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_TuplePattern <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_BinaryExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_IsExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_AsExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_UnaryExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_WildcardExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ArrayExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ParenExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_LitConstExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_FuncArg <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_CallExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_RefExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ReturnExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_AssignExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_MemberAccess <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_IfExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_LetPatternDestructor <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_LambdaExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ArrayLit <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_TupleLit <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_SubscriptExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_MatchExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_RangeExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ForInExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_WhileExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_AdjointExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_GradExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ValWithGradExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_VJPExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_SpawnExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_SynchronizedExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_TrailingClosureExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_TypeConvExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ThrowExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_TryExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_DoWhileExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_IncOrDecExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_OptionalExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_OptionalChainExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_Token <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_TokenPart <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_QuoteExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_Reference <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_FuncParamList <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_FuncParam <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_FuncBody <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_JumpExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_Expr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_PrimitiveTypeExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_TypeBase <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_RefType <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_PrimitiveType <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_FuncType <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ThisType <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ParenType <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_QualifiedType <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_OptionType <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_TupleType <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_VArrayType <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ConstantType <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_Type <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_VarDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_VarWithPatternDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_FuncDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_MainDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_MacroDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_StructBody <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_StructDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ClassBody <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ClassDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_InterfaceBody <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_InterfaceDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_EnumDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_GenericParamDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_PrimaryCtorDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_PropDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_GenericConstraint <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_Generic <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_Annotation <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_Modifier <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_DeclBase <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_TypeAliasDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ExtendDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_Decl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_Block <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_MacroInvocation <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_MacroExpandExpr <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_MacroExpandDecl <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_MacroExpandParam <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_File <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_PackageSpec <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ImportContent <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_ImportSpec <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_NodeBase <: FlatBufferObject {
}

@!APILevel[since: "12", atomicservice : true]
public class NodeFormat_Node <: FlatBufferObject {
}

/**
* Return true if two tokens are considered equal somehow(exclude NL, END and position info).
*/
@!APILevel[since: "12", atomicservice : true]
public func compareTokens(tokens1: Tokens, tokens2: Tokens): Bool

@!APILevel[since: "12", atomicservice : true]
public open class Decl <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public open mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop annotations: ArrayList<Annotation>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop modifiers: ArrayList<Modifier>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop genericParam: GenericParam
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop genericConstraint: ArrayList<GenericConstraint>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop constraintCommas: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func hasAttr(attr: String): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public func getAttrs(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop isGenericDecl: Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public open func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public open func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ClassDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop upperBound: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop superTypes: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop superTypeBitAnds: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop body: Body
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class StructDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop upperBound: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop superTypes: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop superTypeBitAnds: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop body: Body
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class InterfaceDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop upperBound: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop superTypes: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop superTypeBitAnds: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop body: Body
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class EnumDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop upperBound: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop superTypes: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop superTypeBitAnds: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop constructors: ArrayList<Constructor>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop decls: ArrayList<Decl>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop ellipsis: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ExtendDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public override mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop extendType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop upperBound: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop superTypes: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop superTypeBitAnds: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop body: Body
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class FuncDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop overloadOp: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop funcParams: ArrayList<FuncParam>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop colon: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop declType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop block: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public func isConst(): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class MainDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop funcParams: ArrayList<FuncParam>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop colon: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop declType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop block: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class MacroDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop funcParams: ArrayList<FuncParam>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop colon: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop declType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop block: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class PrimaryCtorDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop funcParams: ArrayList<FuncParam>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop block: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public func isConst(): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class VarDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop pattern: Pattern
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop colon: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop declType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop assign: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func isConst(): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public open class FuncParam <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop not: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop colon: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop paramType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop assign: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func isMemberParam(): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public open func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public open func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class PropDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop colon: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop declType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop getter: FuncDecl
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop setter: FuncDecl
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class TypeAliasDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop assign: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop aliasType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class MacroExpandDecl <: Decl {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop fullIdentifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lSquare: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop macroAttrs: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rSquare: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop macroInputs: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop macroInputDecl: Decl
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class MacroExpandParam <: FuncParam {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop fullIdentifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lSquare: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop macroAttrs: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rSquare: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop macroInputs: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop macroInputDecl: Decl
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

/**
* Level of diag report
*/
@!APILevel[since: "12", atomicservice : true]
public enum DiagReportLevel {
    @!APILevel[since: "12", atomicservice : true]
    ERROR |
    @!APILevel[since: "12", atomicservice : true]
    WARNING
    @!APILevel[since: "12", atomicservice : true]
    public func level(): Int32
}

@!APILevel[since: "12", atomicservice : true]
public func diagReport(level: DiagReportLevel, tokens: Tokens, message: String, hint: String): Unit

@!APILevel[since: "12", atomicservice : true]
public class ASTException <: Exception {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public init(message: String)
}

@!APILevel[since: "12", atomicservice : true]
public class ParseASTException <: Exception {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public init(message: String)
}

@!APILevel[since: "12", atomicservice : true]
public open class Expr <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public open func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public open func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class Block <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop nodes: ArrayList<Node>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class BinaryExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop leftExpr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop op: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rightExpr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class UnaryExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop op: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class IsExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop shiftType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class AsExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop shiftType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ParenExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop parenthesizedExpr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class LitConstExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop literal: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class RefExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop typeArguments: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop commas: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ReturnExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ThrowExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class AssignExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop assign: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop leftExpr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rightExpr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class CallExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop callFunc: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop arguments: ArrayList<Argument>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class MemberAccess <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop baseExpr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop dot: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop field: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop typeArguments: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop commas: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class IfExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordI: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop condition: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop ifBlock: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordE: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop elseExpr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class LetPatternExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop pattern: Pattern
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop backArrow: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class MatchExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop selector: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop matchCases: ArrayList<MatchCase>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class WhileExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop condition: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop block: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class DoWhileExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordD: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop block: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordW: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop condition: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class LambdaExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop funcParams: ArrayList<FuncParam>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop doubleArrow: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop nodes: ArrayList<Node>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class SpawnExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop threadContext: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lambdaExpr: LambdaExpr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class SynchronizedExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop structuredMutex: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop block: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class TrailingClosureExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lambdaExpr: LambdaExpr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class TypeConvExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop targetType: PrimitiveType
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ForInExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordF: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop pattern: Pattern
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordI: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordW: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop patternGuard: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop block: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class PrimitiveTypeExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(kind: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ArrayLiteral <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lSquare: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop elements: ArrayList<Expr>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rSquare: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class TupleLiteral <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop elements: ArrayList<Expr>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class RangeExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop start: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop op: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop end: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop colon: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop step: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class SubscriptExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop baseExpr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lSquare: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop indexList: ArrayList<Expr>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rSquare: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class JumpExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(kind: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class IncOrDecExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop op: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class TryExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordT: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop resourceSpec: ArrayList<VarDecl>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop tryBlock: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordsC: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop catchPatterns: ArrayList<Pattern>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop catchBlocks: ArrayList<Block>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordF: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop finallyBlock: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class OptionalExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    // we construct a MemberAccess to help parse OptionalExpr because compiler can't parse OptionalExpr directly.
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop baseExpr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop quest: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class QuoteToken <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public mut prop tokens: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class QuoteExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop exprs: ArrayList<Expr>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class WildcardExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(keyword: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class VArrayExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop vArrayType: VArrayType
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop arguments: ArrayList<Argument>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class MacroExpandExpr <: Expr {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop at: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lSquare: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop macroAttrs: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rSquare: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop macroInputs: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

/**
* @return cangjie tokens.
* @throws IllegalMemoryException if failed to call cangjieLex(code, true).
* @throws IllegalArgumentException if failed to call cangjieLex(code, true).
*/
@!APILevel[since: "12", atomicservice : true]
public func cangjieLex(code: String): Tokens

/**
* XXX: need further consideration.
* @return cangjie tokens.
* @throws IllegalMemoryException if malloc failed.
* @throws IllegalArgumentException if the call of CJ_AST_Lex returns an invalid token array.
*/
@!APILevel[since: "12", atomicservice : true]
public func cangjieLex(code: String, truncated: Bool): Tokens

/**
* This part is the Macro with context related API:
*/
@!APILevel[since: "12", atomicservice : true]
public class MacroContextException <: Exception {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public init(message: String)
}

/**
* For situations an inner macro call finds itself nested inside a particular outer macro call.
*
* @param parentMacroName - a particular outer macro call name.
*
* @return Unit.
*
* Throw an error unless the inner macro call is nested in the given outer macro call.
*/
@!APILevel[since: "12", atomicservice : true]
public func assertParentContext(parentMacroName: String): Unit

/**
* For situations an inner macro call finds itself nested inside a particular outer macro call.
*
* @param parentMacroName - a particular outer macro call name.
*
* @return Bool. Returns true only if the inner macro call is nested in the given outer macro call.
*/
@!APILevel[since: "12", atomicservice : true]
public func insideParentContext(parentMacroName: String): Bool

/**
* For situations an inner macro can sending key/value pairs to the outer macro by setItem.
*
* @param key - the key send to outer macro for index.
*
* @param value - the value that send to outer macro.
*/
@!APILevel[since: "12", atomicservice : true]
public func setItem(key: String, value: String): Unit

@!APILevel[since: "12", atomicservice : true]
public func setItem(key: String, value: Int64): Unit

@!APILevel[since: "12", atomicservice : true]
public func setItem(key: String, value: Bool): Unit

@!APILevel[since: "12", atomicservice : true]
public func setItem(key: String, value: Tokens): Unit

@!APILevel[since: "12", atomicservice : true]
public class MacroMessage {
    /*
    * Check the given 'key' wheather have an item
    */
    @!APILevel[since: "12", atomicservice : true]
    public func hasItem(key: String): Bool
    
    /**
    * Get info of key, and return a string value
    * @param key - the key send to outer macro for index.
    * @return String - return a string value.
    * throw an exception if there is no such key/value pairs.
    */
    @!APILevel[since: "12", atomicservice : true]
    public func getString(key: String): String
    
    /**
    * Get info of key, and return the Int64 value
    * @param key - the key send to outer macro for index.
    * @return Int64 - return the Int64 value.
    * throw an exception if there is no such key/value pairs.
    */
    @!APILevel[since: "12", atomicservice : true]
    public func getInt64(key: String): Int64
    
    /**
    * Get info of key, and return the Bool value
    * @param key - the key send to outer macro for index.
    * @return Bool - return the Bool value.
    * throw an exception if there is no such key/value pairs.
    */
    @!APILevel[since: "12", atomicservice : true]
    public func getBool(key: String): Bool
    
    /**
    * Get info of key, and return the Tokens value
    * @param key - the key send to outer macro for index.
    * @return Tokens - return the Tokens value.
    * throw an exception if there is no such key/value pairs.
    */
    @!APILevel[since: "12", atomicservice : true]
    public func getTokens(key: String): Tokens
}

/**
* Getting one message (a map of key/value pairs) for each inner macro invocation that sent messages.
* @param innerMacroName - the inner macro name that has send to the current outer macro.
* @return String - return the arraylist of hashmap info.
* If there are no such messages, this is not an error, it's just an empty list.
*/
@!APILevel[since: "12", atomicservice : true]
public func getChildMessages(children: String): ArrayList<MacroMessage>

@!APILevel[since: "12", atomicservice : true]
public open class FlatBufferObject {
    @!APILevel[since: "12", atomicservice : true]
    public init(buf: Array<UInt8>, root: UInt32)
}

@!APILevel[since: "12", atomicservice : true]
abstract sealed class Node <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public mut prop beginPos: Position
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop endPos: Position
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
    
    @!APILevel[since: "12", atomicservice : true]
    public func dump(): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class Annotation <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop at: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop arguments: ArrayList<Argument>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop attributes: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop condition: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class Modifier <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init(keyword: Token)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class GenericParam <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init(parameters: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop parameters: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

/*
* GenericConstraint is:
*   where T <: A, K <: B
*/
@!APILevel[since: "12", atomicservice : true]
public class GenericConstraint <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop typeArgument: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop upperBound: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop upperBounds: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop bitAnds: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

/*
* Body is:
*   {...}
* For mutable types, like ClassDecl, StructDecl, InterfaceDecl
*/
@!APILevel[since: "12", atomicservice : true]
public class Body <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init(decls: ArrayList<Decl>)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop decls: ArrayList<Decl>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

/*
* Argument is actual parameter Node:
*   foo(arg1:value1)
*   "arg1:value1" is an Argument type
*/
@!APILevel[since: "12", atomicservice : true]
public class Argument <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop colon: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

/*
* MatchCase is the children node of Match Expression:
*   var scoreResult: String = match (score) {
*       case 0 => "zero" // This is a MatchCase Node
*       case 10 | 20 | 30 | 40 | 50 => "fail" // This is a MatchCase Node
*       case _ => "not a valid score"
*   }
*/
@!APILevel[since: "12", atomicservice : true]
public class MatchCase <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordC: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop expr: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop patterns: ArrayList<Pattern>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop bitOrs: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordW: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop patternGuard: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop arrow: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop block: Block
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

/**
* Program is the Cangjie source File node.
*/
@!APILevel[since: "12", atomicservice : true]
public class Program <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop packageHeader: PackageHeader
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop importLists: ArrayList<ImportList>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop decls: ArrayList<Decl>
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

/**
* PackageHeader node represents the package of the current file.
* The PackageHeader starts with the keyword package, followed by the package name.
*/
@!APILevel[since: "12", atomicservice : true]
public class PackageHeader <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop accessible: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordM: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordP: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop prefixPaths: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop prefixDots: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop packageIdentifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public enum ImportKind <: ToString {
    @!APILevel[since: "12", atomicservice : true]
    Single |
    @!APILevel[since: "12", atomicservice : true]
    Alias |
    @!APILevel[since: "12", atomicservice : true]
    All |
    @!APILevel[since: "12", atomicservice : true]
    Multi
    @!APILevel[since: "12", atomicservice : true]
    public func toString(): String
}

@!APILevel[since: "12", atomicservice : true]
public class ImportContent <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop importKind: ImportKind
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop prefixPaths: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop prefixDots: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop importAlias: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop items: ArrayList<ImportContent>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop commas: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rBrace: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func isImportAlias(): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public func isImportAll(): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public func isImportMulti(): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public func isImportSingle(): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ImportList <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop modifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keywordI: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop content: ImportContent
    
    @!APILevel[since: "12", atomicservice : true]
    public func isImportMulti(): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

/**
* Constructor node represents the values related to enum.
* enum TimeUnit1 {
*   Year | Month | Day | Hour(Float32) // Constructor node
* }
*/
@!APILevel[since: "12", atomicservice : true]
public class Constructor <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop typeArguments: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

extend<T> ArrayList<T> <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend<T> Array<T> <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

@!APILevel[since: "12", atomicservice : true]
public func parseDecl(input: Tokens, astKind!: String = ""): Decl

@!APILevel[since: "12", atomicservice : true]
public func parseDeclFragment(input: Tokens, startFrom!: Int64 = 0): (Decl, Int64)

@!APILevel[since: "12", atomicservice : true]
public func parseExpr(input: Tokens): Expr

@!APILevel[since: "12", atomicservice : true]
public func parseExprFragment(input: Tokens, startFrom!: Int64 = 0): (Expr, Int64)

@!APILevel[since: "12", atomicservice : true]
public func parseProgram(input: Tokens): Program

@!APILevel[since: "12", atomicservice : true]
public func parsePattern(input: Tokens)

@!APILevel[since: "12", atomicservice : true]
public func parsePatternFragment(input: Tokens, startFrom!: Int64 = 0): (Pattern, Int64)

@!APILevel[since: "12", atomicservice : true]
public func parseType(input: Tokens)

@!APILevel[since: "12", atomicservice : true]
public func parseTypeFragment(input: Tokens, startFrom!: Int64 = 0): (TypeNode, Int64)

@!APILevel[since: "12", atomicservice : true]
public open class Pattern <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public open func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public open func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ConstPattern <: Pattern {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop litConstExpr: LitConstExpr
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class WildcardPattern <: Pattern {
    @!APILevel[since: "12", atomicservice : true]
    public init(keyword: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop wildcard: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class VarPattern <: Pattern {
    @!APILevel[since: "12", atomicservice : true]
    public init(identifier: Token)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class VarOrEnumPattern <: Pattern {
    @!APILevel[since: "12", atomicservice : true]
    public init(identifier: Token)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ExceptTypePattern <: Pattern {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop pattern: Pattern
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop colon: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop types: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class TypePattern <: Pattern {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop pattern: Pattern
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop colon: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop patternType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class EnumPattern <: Pattern {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop constructor: Expr
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop patterns: ArrayList<Pattern>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop commas: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class TuplePattern <: Pattern {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop patterns: ArrayList<Pattern>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop commas: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public struct Position <: ToBytes {
    /* Fields */
    @!APILevel[since: "12", atomicservice : true]
    public let fileID: UInt32
    
    @!APILevel[since: "12", atomicservice : true]
    public let line: Int32
    
    @!APILevel[since: "12", atomicservice : true]
    public let column: Int32
    
    /* Constructors *//** Create an empty position. */
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    /** Create a new position which is formed by fileID, line, column. */
    @!APILevel[since: "12", atomicservice : true]
    public init(fileID: UInt32, line: Int32, column: Int32)
    
    /* Methods *//** Returns true if and only if this position line and column equal to 0. */
    @!APILevel[since: "12", atomicservice : true]
    public func isEmpty(): Bool
    
    /** Returns true if and only if the two positions are identical. */
    @!APILevel[since: "12", atomicservice : true]
    public operator func ==(r: Position): Bool
    
    /** Returns true if and only if the two positions are not identical. */
    @!APILevel[since: "12", atomicservice : true]
    public operator func !=(r: Position): Bool
    
    /** Print the information of this position. */
    @!APILevel[since: "12", atomicservice : true]
    public func dump(): Unit
    
    @!APILevel[since: "12", atomicservice : true]
    public func toBytes(): Array<UInt8>
}

@!APILevel[since: "12", atomicservice : true]
public interface ToBytes {
}

@!APILevel[since: "12", atomicservice : true]
public struct Token <: ToBytes {
    /**
    Fields
    */
    @!APILevel[since: "12", atomicservice : true]
    public let kind: TokenKind
    
    @!APILevel[since: "12", atomicservice : true]
    public let value: String
    
    @!APILevel[since: "12", atomicservice : true]
    public let pos: Position
    
    @!APILevel[since: "12", atomicservice : true]
    public var delimiterNum: UInt16 = 1
    
    /**
    Constructors
    */// Create an token with default value.
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    // Create a new token without value, position from enumerated type token.
    @!APILevel[since: "12", atomicservice : true]
    public init(kind: TokenKind)
    
    // Create a new token with empty position from token kind and token value.
    @!APILevel[since: "12", atomicservice : true]
    public init(kind: TokenKind, value: String)
    
    @!APILevel[since: "12", atomicservice : true]
    public func addPosition(fileID: UInt32, line: Int32, colum: Int32): Token
    
    // Returns true if and only if the two token's kind id, value, position are identical.// XXX: Bound check.
    @!APILevel[since: "12", atomicservice : true]
    public operator func ==(r: Token): Bool
    
    // Returns true if and only if the two token's kind id, value, position are not identical.
    @!APILevel[since: "12", atomicservice : true]
    public operator func !=(r: Token): Bool
    
    // Token + Tokens => Tokens
    @!APILevel[since: "12", atomicservice : true]
    public operator func +(r: Tokens): Tokens
    
    // Token + Token => Tokens
    @!APILevel[since: "12", atomicservice : true]
    public operator func +(r: Token): Tokens
    
    // Print the information of this token.
    @!APILevel[since: "12", atomicservice : true]
    public func dump(): Unit
    
    @!APILevel[since: "12", atomicservice : true]
    public func toBytes(): Array<UInt8>
}

/**
* Note: If Tokens.inc is changed, TokenKind and PATTERNS should change accordingly.
*/
@!APILevel[since: "12", atomicservice : true]
public enum TokenKind <: ToString {
    @!APILevel[since: "12", atomicservice : true]
    DOT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "."           */
    COMMA |
    @!APILevel[since: "12", atomicservice : true]
    /*  ","           */
    LPAREN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "("           */
    RPAREN |
    @!APILevel[since: "12", atomicservice : true]
    /*  ")"           */
    LSQUARE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "["           */
    RSQUARE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "]"           */
    LCURL |
    @!APILevel[since: "12", atomicservice : true]
    /*  "{"           */
    RCURL |
    @!APILevel[since: "12", atomicservice : true]
    /*  "}"           */
    EXP |
    @!APILevel[since: "12", atomicservice : true]
    /*  "**"          */
    MUL |
    @!APILevel[since: "12", atomicservice : true]
    /*  "*"           */
    MOD |
    @!APILevel[since: "12", atomicservice : true]
    /*  "%"           */
    DIV |
    @!APILevel[since: "12", atomicservice : true]
    /*  "/"           */
    ADD |
    @!APILevel[since: "12", atomicservice : true]
    /*  "+"           */
    SUB |
    @!APILevel[since: "12", atomicservice : true]
    /*  "-"           */
    INCR |
    @!APILevel[since: "12", atomicservice : true]
    /*  "++"          */
    DECR |
    @!APILevel[since: "12", atomicservice : true]
    /*  "--"          */
    AND |
    @!APILevel[since: "12", atomicservice : true]
    /*  "&&"          */
    OR |
    @!APILevel[since: "12", atomicservice : true]
    /*  "||"          */
    COALESCING |
    @!APILevel[since: "12", atomicservice : true]
    /*  "??"          */
    PIPELINE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "|>"          */
    COMPOSITION |
    @!APILevel[since: "12", atomicservice : true]
    /*  "~>"          */
    NOT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "!"           */
    BITAND |
    @!APILevel[since: "12", atomicservice : true]
    /*  "&"           */
    BITOR |
    @!APILevel[since: "12", atomicservice : true]
    /*  "|"           */
    BITXOR |
    @!APILevel[since: "12", atomicservice : true]
    /*  "^"           */
    BITNOT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "~"           */
    LSHIFT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "<<"          */
    RSHIFT |
    @!APILevel[since: "12", atomicservice : true]
    /*  ">>"          */
    COLON |
    @!APILevel[since: "12", atomicservice : true]
    /*  ":"           */
    SEMI |
    @!APILevel[since: "12", atomicservice : true]
    /*  ";"           */
    ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "="           */
    ADD_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "+="          */
    SUB_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "-="          */
    MUL_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "*="          */
    EXP_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "**="         */
    DIV_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "/="          */
    MOD_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "%="          */
    AND_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "&&="         */
    OR_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "||="         */
    BITAND_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "&="          */
    BITOR_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "|="          */
    BITXOR_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "^="          */
    LSHIFT_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "<<="         */
    RSHIFT_ASSIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  ">>="         */
    ARROW |
    @!APILevel[since: "12", atomicservice : true]
    /*  "->"          */
    BACKARROW |
    @!APILevel[since: "12", atomicservice : true]
    /*  "<-"          */
    DOUBLE_ARROW |
    @!APILevel[since: "12", atomicservice : true]
    /*  "=>"          */
    RANGEOP |
    @!APILevel[since: "12", atomicservice : true]
    /*  ".."          */
    CLOSEDRANGEOP |
    @!APILevel[since: "12", atomicservice : true]
    /*  "..="         */
    ELLIPSIS |
    @!APILevel[since: "12", atomicservice : true]
    /*  "..."         */
    HASH |
    @!APILevel[since: "12", atomicservice : true]
    /*  "#"           */
    AT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "@"           */
    QUEST |
    @!APILevel[since: "12", atomicservice : true]
    /*  "?"           */
    LT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "<"           */
    GT |
    @!APILevel[since: "12", atomicservice : true]
    /*  ">"           */
    LE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "<="          */
    GE |
    @!APILevel[since: "12", atomicservice : true]
    /*  ">="          */
    IS |
    @!APILevel[since: "12", atomicservice : true]
    /*  "is"          */
    AS |
    @!APILevel[since: "12", atomicservice : true]
    /*  "as"          */
    NOTEQ |
    @!APILevel[since: "12", atomicservice : true]
    /*  "!="          */
    EQUAL |
    @!APILevel[since: "12", atomicservice : true]
    /*  "=="          */
    WILDCARD |
    @!APILevel[since: "12", atomicservice : true]
    /*  "_"           */
    INT8 |
    @!APILevel[since: "12", atomicservice : true]
    /*  "Int8"        */
    INT16 |
    @!APILevel[since: "12", atomicservice : true]
    /*  "Int16"       */
    INT32 |
    @!APILevel[since: "12", atomicservice : true]
    /*  "Int32"       */
    INT64 |
    @!APILevel[since: "12", atomicservice : true]
    /*  "Int64"       */
    INTNATIVE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "IntNative"   */
    UINT8 |
    @!APILevel[since: "12", atomicservice : true]
    /*  "UInt8"       */
    UINT16 |
    @!APILevel[since: "12", atomicservice : true]
    /*  "UInt16"      */
    UINT32 |
    @!APILevel[since: "12", atomicservice : true]
    /*  "UInt32"      */
    UINT64 |
    @!APILevel[since: "12", atomicservice : true]
    /*  "UInt64"      */
    UINTNATIVE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "UIntNative"  */
    FLOAT16 |
    @!APILevel[since: "12", atomicservice : true]
    /*  "Float16"     */
    FLOAT32 |
    @!APILevel[since: "12", atomicservice : true]
    /*  "Float32"     */
    FLOAT64 |
    @!APILevel[since: "12", atomicservice : true]
    /*  "Float64"     */
    RUNE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "Rune"        */
    BOOLEAN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "Bool"        */
    NOTHING |
    @!APILevel[since: "12", atomicservice : true]
    /*  "Nothing"     */
    UNIT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "Unit"        */
    STRUCT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "struct"      */
    ENUM |
    @!APILevel[since: "12", atomicservice : true]
    /*  "enum"        */
    VARRAY |
    @!APILevel[since: "12", atomicservice : true]
    /*  "VArray"      */
    THISTYPE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "This"        */
    PACKAGE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "package"     */
    IMPORT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "import"      */
    CLASS |
    @!APILevel[since: "12", atomicservice : true]
    /*  "class"       */
    INTERFACE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "interface"   */
    FUNC |
    @!APILevel[since: "12", atomicservice : true]
    /*  "func"        */
    MACRO |
    @!APILevel[since: "12", atomicservice : true]
    /*  "macro"       */
    QUOTE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "quote"       */
    DOLLAR |
    @!APILevel[since: "12", atomicservice : true]
    /*  "$"           */
    LET |
    @!APILevel[since: "12", atomicservice : true]
    /*  "let"         */
    VAR |
    @!APILevel[since: "12", atomicservice : true]
    /*  "var"         */
    CONST |
    @!APILevel[since: "12", atomicservice : true]
    /*  "const"       */
    TYPE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "type"        */
    INIT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "init"        */
    THIS |
    @!APILevel[since: "12", atomicservice : true]
    /*  "this"        */
    SUPER |
    @!APILevel[since: "12", atomicservice : true]
    /*  "super"       */
    IF |
    @!APILevel[since: "12", atomicservice : true]
    /*  "if"          */
    ELSE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "else"        */
    CASE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "case"        */
    TRY |
    @!APILevel[since: "12", atomicservice : true]
    /*  "try"         */
    CATCH |
    @!APILevel[since: "12", atomicservice : true]
    /*  "catch"       */
    FINALLY |
    @!APILevel[since: "12", atomicservice : true]
    /*  "finally"     */
    FOR |
    @!APILevel[since: "12", atomicservice : true]
    /*  "for"         */
    DO |
    @!APILevel[since: "12", atomicservice : true]
    /*  "do"          */
    WHILE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "while"       */
    THROW |
    @!APILevel[since: "12", atomicservice : true]
    /*  "throw"       */
    RETURN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "return"      */
    CONTINUE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "continue"    */
    BREAK |
    @!APILevel[since: "12", atomicservice : true]
    /*  "break"       */
    IN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "in"          */
    NOT_IN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "!in"         */
    MATCH |
    @!APILevel[since: "12", atomicservice : true]
    /*  "match"       */
    WHERE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "where"       */
    EXTEND |
    @!APILevel[since: "12", atomicservice : true]
    /*  "extend"      */
    WITH |
    @!APILevel[since: "12", atomicservice : true]
    /*  "with"        */
    PROP |
    @!APILevel[since: "12", atomicservice : true]
    /*  "prop"        */
    STATIC |
    @!APILevel[since: "12", atomicservice : true]
    /*  "static"      */
    PUBLIC |
    @!APILevel[since: "12", atomicservice : true]
    /*  "public"      */
    PRIVATE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "private"     */
    INTERNAL |
    @!APILevel[since: "12", atomicservice : true]
    /*  "internal"     */
    PROTECTED |
    @!APILevel[since: "12", atomicservice : true]
    /*  "protected"   */
    OVERRIDE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "override"    */
    REDEF |
    @!APILevel[since: "12", atomicservice : true]
    /*  "redef"       */
    ABSTRACT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "abstract"    */
    SEALED |
    @!APILevel[since: "12", atomicservice : true]
    /*  "sealed"      */
    OPEN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "open"        */
    FOREIGN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "foreign"     */
    INOUT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "inout"       */
    MUT |
    @!APILevel[since: "12", atomicservice : true]
    /*  "mut"         */
    UNSAFE |
    @!APILevel[since: "12", atomicservice : true]
    /*  "unsafe"      */
    OPERATOR |
    @!APILevel[since: "12", atomicservice : true]
    /*  "operator"    */
    SPAWN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "spawn"       */
    SYNCHRONIZED |
    @!APILevel[since: "12", atomicservice : true]
    /*  "synchronized */
    UPPERBOUND |
    @!APILevel[since: "12", atomicservice : true]
    /*  "<:"          */
    MAIN |
    @!APILevel[since: "12", atomicservice : true]
    /*  "main"        */
    IDENTIFIER |
    @!APILevel[since: "12", atomicservice : true]
    /*  "x"           */
    PACKAGE_IDENTIFIER |
    @!APILevel[since: "12", atomicservice : true]
    /*  "x-y"         */
    INTEGER_LITERAL |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. "1"      */
    RUNE_BYTE_LITERAL |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. "b'x'"   */
    FLOAT_LITERAL |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. "'1.0'"  */
    COMMENT |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. "/*xx*/" */
    NL |
    @!APILevel[since: "12", atomicservice : true]
    /*  newline         */
    END |
    @!APILevel[since: "12", atomicservice : true]
    /*  end of file     */
    SENTINEL |
    @!APILevel[since: "12", atomicservice : true]
    /*  ";"             */
    RUNE_LITERAL |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. "r'x'"      */
    STRING_LITERAL |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. ""xx""     */
    SINGLE_QUOTED_STRING_LITERAL |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. "'xx'"     */
    JSTRING_LITERAL |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. "J"xx""     */
    MULTILINE_STRING |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. """"aaa""""   */
    MULTILINE_RAW_STRING |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. "#"aaa"#"     */
    BOOL_LITERAL |
    @!APILevel[since: "12", atomicservice : true]
    /*  "true" or "false"  */
    UNIT_LITERAL |
    @!APILevel[since: "12", atomicservice : true]
    /*  "()"               */
    DOLLAR_IDENTIFIER |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. "$x"          */
    ANNOTATION |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. "@When"       */
    AT_EXCL |
    @!APILevel[since: "12", atomicservice : true]
    /*  e.g. "@!"          */
    ILLEGAL
    @!APILevel[since: "12", atomicservice : true]
    public operator func ==(right: TokenKind): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public operator func !=(right: TokenKind): Bool
    
    @!APILevel[since: "12", atomicservice : true]
    public func toString(): String
}

/**
* Conversion function for UInt16 to Enum
*/
@!APILevel[since: "12", atomicservice : true]
public func getTokenKind(no: UInt16): TokenKind

@!APILevel[since: "12", atomicservice : true]
public class TokensIterator <: Iterator<Token> {
    /* Constructors */
    @!APILevel[since: "12", atomicservice : true]
    public init(tokens: Tokens)
    
    /* Methods *//** Returns the current Option<Token>. */
    @!APILevel[since: "12", atomicservice : true]
    public func peek(): Option<Token>
    
    /** Returns true if current token is the kind, otherwise false. */
    @!APILevel[since: "12", atomicservice : true]
    public func seeing(kind: TokenKind): Bool
    
    /** Returns next Option<Token>. */
    @!APILevel[since: "12", atomicservice : true]
    public func next(): Option<Token>
}

@!APILevel[since: "12", atomicservice : true]
public open class Tokens <: ToString & Iterable<Token> & ToBytes {
    /* Constructors *//** Create an empty tokens. */
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    /** Create a new tokens from token array. */
    @!APILevel[since: "12", atomicservice : true]
    public init(tokArray: Array<Token>)
    
    /** Create a new tokens from token array. */
    @!APILevel[since: "12", atomicservice : true]
    public init(tokArrayList: ArrayList<Token>)
    
    /* Methods *//** Returns the size of tokens. */
    @!APILevel[since: "12", atomicservice : true]
    public open prop size: Int64
    
    /** Returns the token from the index, if the index is out of bound or its element is null then throws IndexOutOfBoundsException. */
    @!APILevel[since: "12", atomicservice : true]
    public open func get(index: Int64): Token
    
    /** Returns an iterator over the tokens. */
    @!APILevel[since: "12", atomicservice : true]
    public func iterator(): TokensIterator
    
    /** Returns the concatenation of this Tokens and the argument. */
    @!APILevel[since: "12", atomicservice : true]
    public func concat(tokens: Tokens): Tokens
    
    /* Operator functions *//** Returns the token at the specified index. */
    @!APILevel[since: "12", atomicservice : true]
    public operator func [](index: Int64): Token
    
    @!APILevel[since: "12", atomicservice : true]
    public open operator func [](range: Range<Int64>): Tokens
    
    /** Returns a tokens which is the result of concatenating `ts1` and `ts2`. */
    @!APILevel[since: "12", atomicservice : true]
    public operator func +(r: Tokens): Tokens
    
    /** Returns a tokens which is the result of concatenating `ts1` and `t2`. */
    @!APILevel[since: "12", atomicservice : true]
    public operator func +(r: Token): Tokens
    
    /** Returns current tokens which is the result of concatenating this and `tks`. */
    @!APILevel[since: "12", atomicservice : true]
    public open func append(tokens: Tokens): Tokens
    
    /** Returns current tokens which is the result of concatenating this and `tk`. */
    @!APILevel[since: "12", atomicservice : true]
    public open func append(token: Token): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func append(node: Node): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func remove(index: Int64): Tokens
    
    /** Print the information of this tokens. */
    @!APILevel[since: "12", atomicservice : true]
    public func dump(): Unit
    
    /** Convert Tokens to String. */
    @!APILevel[since: "12", atomicservice : true]
    public func toString(): String
    
    @!APILevel[since: "12", atomicservice : true]
    public func toBytes(): Array<UInt8>
}

@!APILevel[since: "12", atomicservice : true]
public interface ToTokens {
}

/**
Basical ToTokens method. List of supporting type in the following.
+ Token, Tokens
+ Int64, Int32, Int16, Int8
+ UInt64, UInt32, UInt16, UInt8
+ Float64, Float32, Float16
+ Bool, Rune, String
*/
extend Token <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend Tokens <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend Int64 <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend Int32 <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend Int16 <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend Int8 <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend UInt64 <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend UInt32 <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend UInt16 <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend UInt8 <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend Float64 <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend Float32 <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend Float16 <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend Bool <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend Rune <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

extend String <: ToTokens {
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
}

@!APILevel[since: "12", atomicservice : true]
public open class TypeNode <: Node {
    @!APILevel[since: "12", atomicservice : true]
    public mut prop typeParameterName: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop colon: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public open func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public open func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class PrimitiveType <: TypeNode {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class RefType <: TypeNode {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop typeArguments: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop commas: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class QualifiedType <: TypeNode {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop baseType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop dot: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop identifier: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop typeArguments: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop commas: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ParenType <: TypeNode {
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop parenthesizedType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class TupleType <: TypeNode {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop types: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class ThisType <: TypeNode {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class PrefixType <: TypeNode {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop prefixOps: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop baseType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class FuncType <: TypeNode {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop types: ArrayList<TypeNode>
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop commas: Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rParen: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop arrow: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop returnType: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public class VArrayType <: TypeNode {
    @!APILevel[since: "12", atomicservice : true]
    public init(inputs: Tokens)
    
    @!APILevel[since: "12", atomicservice : true]
    public init()
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop keyword: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop lAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop elementTy: TypeNode
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop dollar: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop size: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public mut prop rAngle: Token
    
    @!APILevel[since: "12", atomicservice : true]
    public func toTokens(): Tokens
    
    @!APILevel[since: "12", atomicservice : true]
    public func traverse(v: Visitor): Unit
}

@!APILevel[since: "12", atomicservice : true]
public abstract class Visitor {
    @!APILevel[since: "12", atomicservice : true]
    public func breakTraverse(): Unit
}

