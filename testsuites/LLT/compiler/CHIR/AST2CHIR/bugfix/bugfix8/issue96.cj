// LEVEL: 0
// EXEC: %compiler %enableO2 --int-overflow=wrapping %f -o %output
// RUN-EXEC-PIPE: %run %run_opt %output %run_args

// random seed:1717842039489
// All global variable need to be defined before use!
public const var_1717842039489_27 : UInt32 = 203
public const var_1717842039489_30 : Bool = true
public var var_1717842039489_55 : Int32 = Int32(UInt16(47))
public var var_1717842039489_134 : UInt16 = UInt16(Int16(UInt16(16)))
public var var_1717842039489_167 : VArray<Rune, $5> = [r's', r'C', r'y', r'S', r'2']
public var var_1717842039489_179 : Bool = ((((Int64(Int64(17))&127)..(Int64(Int64(-124))&127):(Int64(76)|1)) is Range<UInt32>) is Int32)
var var_1717842039489_188 : UInt32 = UInt32(Int16(UInt8(UInt8(83))))
const var_1717842039489_232 : UInt16 = 23
var var_1717842039489_241 : Option<Float64> = (Float64(Float64(Float64(-41.0))) as Float64)
public const var_1717842039489_247 : Float64 = -80.0
let var_1717842039489_261 : UInt16 = UInt16(Int8(-56))
public let var_1717842039489_278 : Rune = r'F'
public const var_1717842039489_282 : Int8 = -113
public var var_1717842039489_293 : Option<Range<Int16>> = Option<Range<Int16>>.None
public const var_1717842039489_388 : Int64 = -56
const var_1717842039489_445 : Unit = ()
public const var_1717842039489_448 : String = ###"-]4=2p|j@0"###
public const var_1717842039489_454 : UInt8 = 206
let var_1717842039489_501 : Enum_1717842039489_84 = Enum_1717842039489_84.enumValue_1717842039489_503(((UInt16(UInt16(Int8(Int8(-42))))&127)..(UInt16(UInt16(UInt8(196)))&127):(Int64(-81)|1)), UInt64(Int16(-90)), ((Int16(Int16(Int8(UInt8(155))))&127)..(Int16(Int16(100))&127):(Int64(-79)|1)), Int32(17))
public let var_1717842039489_541 : Byte = UInt8(111)
public let var_1717842039489_773 : ?Int64 = Option<Int64>.None
public struct Struct_1717842039489_9 {
    public init() { // block id: 11

    }
;
    prop var_1717842039489_16 : Int { // block id: 17
        get() { // block id: 19
            ();
            Int64(Int8(-8))
        }

    }
}

public enum Enum_1717842039489_84 {
    defaultValue |
    enumValue_1717842039489_89(Int32, Array<UInt64>, UInt16) |
    enumValue_1717842039489_503(Range<UInt16>, UInt64, Range<Int16>, Int32)
}
public const func func_1717842039489_228<T0>(param_1717842039489_229 : Float64) : UInt16 { // block id: 230
    var_1717842039489_232
}




const func func_1717842039489_437(optionalParam_1717842039489_438 ! : Int8 = -111, optionalParam_1717842039489_440 ! : UInt32 = 202, namedParam_1717842039489_442 ! : Bool) : String { // block id: 443
    var_1717842039489_445;
    var_1717842039489_448
}

public const func func_1717842039489_374<T0, T1>(optionalParam_1717842039489_375 ! : Bool = false) : Unit { // block id: 377
    const var_1717842039489_381 : UInt16 = 235;
    const var_1717842039489_384 : UInt16 = 209;
    (var_1717842039489_381 - var_1717842039489_384) ^ 219;
    var_1717842039489_388;
    const func func_1717842039489_424(namedParam_1717842039489_425 ! : String) : UInt16 { // block id: 426
        49;
        const func func_1717842039489_432() : UInt16 { // block id: 433
            253
        }
;
        var_1717842039489_384 >> (((func_1717842039489_432() >> ((151) & 7))) & 7)
    }
;
    const func func_1717842039489_391<T0>(optionalParam_1717842039489_392 ! : UInt16 = 66, namedParam_1717842039489_394 ! : T0) : Unit { // block id: 395
        const var_1717842039489_415 : Int16 = -9;
        const func func_1717842039489_409(param_1717842039489_410 : Bool, param_1717842039489_411 : Int32, param_1717842039489_412 : UInt32) : Int16 { // block id: 413
            var_1717842039489_415
        }
;
        const func func_1717842039489_397(optionalParam_1717842039489_398 ! : UInt16 = 228, optionalParam_1717842039489_400 ! : Int16 = -47, optionalParam_1717842039489_402 ! : String = ###"af$|k/.2[6"###, namedParam_1717842039489_404 ! : UInt16) : Int16 { // block id: 405
            "9W#\\+Oy-J[";
            "%JgH&>N5*g";
            func_1717842039489_409(false, 113, 252)
        }
;
        func_1717842039489_397(optionalParam_1717842039489_398 : 192, optionalParam_1717842039489_400 : 74, optionalParam_1717842039489_402 : ###"|7)A+w?)Et"###, namedParam_1717842039489_404 : func_1717842039489_424(namedParam_1717842039489_425 : func_1717842039489_437(namedParam_1717842039489_442 : true)));
        ()
    }
;
    func_1717842039489_391<Rune>(namedParam_1717842039489_394 : r'y')
}

public func func_1717842039489_221(param_1717842039489_222 : Range<Int32>, param_1717842039489_223 : Range<UInt32>, param_1717842039489_224 : UInt64) : (UInt64, Range<Int16>, Rune, Bool, VArray<Rune, $5>, Enum_1717842039489_84, Range<UInt16>) { // block id: 225
    ((var_1717842039489_241 ?? var_1717842039489_247)|>func_1717842039489_228<Int16>) + (Option<Array<UInt16>>.None ?? [UInt16(118), var_1717842039489_134, var_1717842039489_261, var_1717842039489_134, UInt16(145), var_1717842039489_134, UInt16(172), var_1717842039489_134, var_1717842039489_261, UInt16(61)])[0];
    const func func_1717842039489_369<T0, T1>() : Unit { // block id: 370
        ();
        136;
        func_1717842039489_374<Int8, Float32>()
    }
;
    var var_1717842039489_466 : (UInt64, Range<Int16>, Rune, Bool, VArray<Rune, $5>, Enum_1717842039489_84, Range<UInt16>) = (UInt64(156), ((Int16(Int16(UInt8(Int8(-61))))&127)..(Int16(Int16(-106))&127):(Int64(38)|1)), r'K', false, VArray<Rune, $5>({ i => r'w'}), Enum_1717842039489_84.enumValue_1717842039489_89(Int32(UInt8(Int8(-1))), [UInt64(93), UInt64(158), UInt64(220), UInt64(147), UInt64(47), UInt64(252), UInt64(16), UInt64(113), UInt64(209), UInt64(43)], UInt16(UInt8(UInt8(156)))), ((UInt16(UInt16(UInt8(Int8(23))))&127)..=(UInt16(UInt16(UInt16(43)))&127):(Int64(UInt64(62))|1)));
    try { // block id: 273
        (var_1717842039489_278, (), var_1717842039489_282, ((UInt8(UInt8(4))&127)..=(UInt8(UInt8(169))&127):(Int64(-30)|1)), Int16(-63))[1];
        var var_1717842039489_299 : Int64 = Int64(Int32(UInt32(UInt16(Int8(43)))));
        (var_1717842039489_293 ?? ((Int16(Int16(57))&127)..(Int16(Int16(-74))&127):(var_1717842039489_299|1)));
        var var_1717842039489_308 : (Int16, (UInt64, Range<Int16>, Rune, Bool, VArray<Rune, $5>, Enum_1717842039489_84, Range<UInt16>), Int64, Range<Int32>, Bool) = (Int16(116), (UInt64(86), ((Int16(Int16(-123))&127)..(Int16(Int16(99))&127):(Int64(-94)|1)), r'i', (((Int32(Int32(-20))&127)..(Int32(Int32(-79))&127):(Int64(70)|1)) is Int8), VArray<Rune, $5>({ i => r'Y'}), Enum_1717842039489_84.enumValue_1717842039489_89(Int32(UInt8(93)), [UInt64(124), UInt64(148), UInt64(251), UInt64(90), UInt64(233), UInt64(140), UInt64(155), UInt64(5), UInt64(127), UInt64(65)], UInt16(UInt8(245))), ((UInt16(UInt16(Int8(-3)))&127)..(UInt16(UInt16(UInt8(163)))&127):(Int64(57)|1))), Int64(-51), ((Int32(Int32(-39))&127)..=(Int32(Int32(UInt8(85)))&127):(Int64(-121)|1)), false);
        var_1717842039489_308[1]
    } finally { // block id: 346
        var var_1717842039489_355 : Float32 = Float32(-97.0);
        try { // block id: 348
            Float32(-75.0)
        } finally { // block id: 350
            ();
            r'Z';
            var_1717842039489_355 + var_1717842039489_355
        };
        const func func_1717842039489_359(param_1717842039489_360 : UInt8) : Unit { // block id: 361
            ();
            const var_1717842039489_365 : Byte = 139;
            var_1717842039489_365 >> ((var_1717842039489_365) & 7);
            func_1717842039489_369<Int32, Float32>()
        }
;
        func_1717842039489_359(var_1717842039489_454);
        (((UInt32(var_1717842039489_27)&127)..=(UInt32(var_1717842039489_27)&127):(Int64(-30)|1)), ((UInt16(UInt16(20))&127)..=(UInt16(UInt16(57))&127):(Int64(-114)|1)), Option<Array<UInt16>>.None, var_1717842039489_466, Int8(-112), var_1717842039489_501, var_1717842039489_241)[3]
    }
}


sealed public interface Interface_1717842039489_549 {

}

public interface Interface_1717842039489_548<T0> <: Interface_1717842039489_549 {
    func func_1717842039489_734() : Unit { // block id: 735
        Int32(Int16(117));
        match (match (if (false) { // block id: 742
            if (true) { ((Int16(Int16(50))&127)..=(Int16(Int16(76))&127):(Int64(-43)|1)) } else { ((Int16(Int16(-90))&127)..(Int16(Int16(26))&127):(Int64(67)|1)) } 
        } else { // block id: 747
            ((Int16(Int16(-52))&127)..(Int16(Int16(7))&127):(Int64(-14)|1))
        }) {
            case _ => 
                Struct_1717842039489_9()
            
        }) {
            case _ => 
                ()
            
        }
    }

}

public open class Class_1717842039489_545<T0, T1> <: Interface_1717842039489_548<Range<UInt64>> & Resource {
    public init() { // block id: 547

    }
;
    public prop var_1717842039489_554 : Unit { // block id: 555
        get() { // block id: 557
            ()
        }

    };
    public open override func func_1717842039489_734() : Unit { // block id: 735
        Int32(Int16(117));
        match (match (if (false) { // block id: 742
            if (true) { ((Int16(Int16(50))&127)..=(Int16(Int16(76))&127):(Int64(-43)|1)) } else { ((Int16(Int16(-90))&127)..(Int16(Int16(26))&127):(Int64(67)|1)) } 
        } else { // block id: 747
            ((Int16(Int16(-52))&127)..(Int16(Int16(7))&127):(Int64(-14)|1))
        }) {
            case _ => 
                Struct_1717842039489_9()
            
        }) {
            case _ => 
                ()
            
        }
    }

    public func isClosed(): Bool { return false }
    public func close(): Unit {}
}

public func func_1717842039489_213(param_1717842039489_214 : Range<Int8>) : Unit { // block id: 215
    ();
    let var_1717842039489_551 : Class_1717842039489_545<Range<Int32>, UInt16> = Class_1717842039489_545<Range<Int32>, UInt16>();
    let var_1717842039489_564 : Array<VArray<Bool, $5>> = [VArray<Bool, $5>(repeat: ((r'g' as UInt8) is Interface_1717842039489_548<Range<UInt64>>)), VArray<Bool, $5>(repeat: (Int32(-19) is Int8)), VArray<Bool, $5>(repeat: (Enum_1717842039489_84.enumValue_1717842039489_503(((UInt16(UInt16(102))&127)..(UInt16(UInt16(209))&127):(Int64(89)|1)), UInt64(5), ((Int16(Int16(-84))&127)..=(Int16(Int16(45))&127):(Int64(-72)|1)), Int32(80)) is UInt64)), VArray<Bool, $5>({ i => false}), VArray<Bool, $5>({ i => false}), VArray<Bool, $5>({ i => true}), VArray<Bool, $5>(repeat: ([UInt16(4), UInt16(244), UInt16(20), UInt16(20), UInt16(194), UInt16(243), UInt16(20), UInt16(203), UInt16(126), UInt16(170)] is Range<Int32>)), VArray<Bool, $5>(repeat: (((UInt32(UInt32(22))&127)..=(UInt32(UInt32(45))&127):(Int64(-17)|1)) is Array<UInt16>)), VArray<Bool, $5>(repeat: (r'X' is Range<UInt16>)), VArray<Bool, $5>(repeat: (Float64(53.0) is String))];
    if (func_1717842039489_221(((Int32(Int32(-114))&127)..=(Int32(Int32(-84))&127):(Int64(60)|1)), ((UInt32(UInt32(3))&127)..(UInt32(var_1717842039489_27)&127):(Int64(11)|1)), UInt64(115))[3]) { // block id: 533
        (Option<UInt8>.Some(var_1717842039489_541) ?? UInt8(157));
        var_1717842039489_551.var_1717842039489_554
    } else if (var_1717842039489_564[5][4]) { // block id: 730

    };
    var_1717842039489_551.func_1717842039489_734()
}


main(): Int64 {
    try {
        var var_1717842039489_13 : Struct_1717842039489_9 = Struct_1717842039489_9();
        const var_1717842039489_76 : Rune = r'm';
        let var_1717842039489_87 : Enum_1717842039489_84 = Enum_1717842039489_84.enumValue_1717842039489_89(Int32(Int8(56)), [UInt64(246), UInt64(UInt16(11)), UInt64(46), UInt64(UInt16(Int16(109))), UInt64(93), UInt64(148), UInt64(162), UInt64(Int16(UInt16(234))), UInt64(UInt8(UInt8(249))), UInt64(197)], UInt16(17));
        if (match (var_1717842039489_13.var_1717842039489_16) {
            case -27 | -49 => 
                var_1717842039489_27;
                var_1717842039489_30
            
            case caseVar_1717842039489_34 : Struct_1717842039489_9 => 
                var_1717842039489_30
            
            case 126 => 
                "M'dmu]Txji";
                var_1717842039489_30
            
            case 28 | 48 | 33 | 111 => 
                var var_1717842039489_46 : Unit = ();
                var_1717842039489_46;
                true
            
            case _ => 
                ();
                var_1717842039489_55 -= var_1717842039489_55;
                var_1717842039489_30 || var_1717842039489_30
            
        }) { // block id: 62
            VArray<Rune, $5>(repeat: var_1717842039489_76)[2];
            var var_1717842039489_118 : Unit = ();
            var var_1717842039489_145 : Byte = UInt8(176);
            match (var_1717842039489_87) {
                case _ => 
                    var_1717842039489_118
                
                case defaultValue => 
                    var_1717842039489_118;
                    var_1717842039489_118;
                    let var_1717842039489_126 : Unit = ();
                    var_1717842039489_126
                
                case defaultValue => 
                    ();
                    var_1717842039489_134 >>= ((UInt16(3)) & 7);
                    ()
                
                case _ => 
                    var_1717842039489_145 |= UInt8(28)
                
            };
            var loopTimeVar_1717842039489_152 : Int = 0;
            do {
                loopTimeVar_1717842039489_152++;

            } while ((true) && loopTimeVar_1717842039489_152 < 100 ) 
        };
        ();
        let var_1717842039489_758 : (Range<Int8>) -> Unit = func_1717842039489_213;
        try { // block id: 155
            try (resource = Class_1717842039489_545<Range<Int32>, UInt16>()) { // block id: 157
                if (var_1717842039489_30) { VArray<Rune, $5>(repeat: var_1717842039489_76) } else { var_1717842039489_167 } ;
                var var_1717842039489_175 : Range<Int64> = ((Int64(Int64(59))&127)..=(Int64(Int64(88))&127):(Int64(-82)|1));
                var_1717842039489_175;
                var_1717842039489_179 ||= true
            } finally { // block id: 184
                ();
                var_1717842039489_188++
            };
            if (var_1717842039489_30) { // block id: 195
                ((UInt16(UInt16(158))&127)..=(UInt16(UInt16(161))&127):(Int64(-30)|1));
                var_1717842039489_179 &&= false;
                var var_1717842039489_203 : Int64 = Int64(-41);
                Int64(-92) + var_1717842039489_203
            } else if (true) { // block id: 206
                Int64(-38)
            } else { // block id: 208
                Float64(26.0);
                Int64(-53)
            }
        } finally { // block id: 211
            ((Int8(var_1717842039489_282)&127)..(Int8(Int8(-41))&127):(Int64(117)|1))|>var_1717842039489_758;
            let var_1717842039489_765 : UInt64 = UInt64(63);
            var_1717842039489_765;
            (var_1717842039489_773 ?? Int64(117))
        }
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1717842039489_134*var_1717842039489_134), 64)
        crcCheck.updateBuffer(UInt64(var_1717842039489_188*var_1717842039489_188), 64)
        crcCheck.updateBuffer(UInt64(var_1717842039489_261*var_1717842039489_261), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }

    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }

    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }

    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }

    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }

    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}

extend<T0, T1> Class_1717842039489_545<T0, T1> {

}

extend Struct_1717842039489_9 {

}



// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.
