// (CJNATIVE) EXEC: %compiler %enableO2 --int-overflow=wrapping -g %f -o %output
// (CJNATIVE) RUN-EXEC-PIPE: %run %run_opt %output %run_args
// (CJNATIVE) ASSERT: scan-not core dumped
// (CJNATIVE) ASSERT: scan-not stack trace
 
@Deprecated
public let var_1747954920306_29 : Bool = true
var var_1747954920306_44 : UInt = UInt64(UInt16(Int8(Int8(87))))
public var var_1747954920306_70 : Range<Int64> = ((Int64(Int64(Int32(28)))&127)..(Int64(Int64(37))&127):(Int64(Int32(-93))|1))
public var var_1747954920306_121 : Int8 = Int8(UInt8(UInt8(Int8(UInt8(37)))))
@Deprecated
public let var_1747954920306_136 : Struct_1747954920306_19 = Struct_1747954920306_19()
public let var_1747954920306_214 : Float32 = Float32(56.0)
public var var_1747954920306_219 : Int = Int64(UInt64(95))
public let var_1747954920306_224 : Int64 = Int64(Int8(57))
public var var_1747954920306_236 : ?Range<Int8> = Option<Range<Int8>>.None
var var_1747954920306_240 : UInt = UInt64(19)
public var var_1747954920306_249 : UInt32 = UInt32(177)
public var var_1747954920306_258 : Bool = (Int32(-74) is Range<Int16>)
@Deprecated
internal let var_1747954920306_312 : (Range<Int16>, Int16, Range<Int16>, String) = (((Int16(Int16(UInt8(Int8(-86))))&127)..(Int16(Int16(-103))&127):(Int64(Int16(UInt8(8)))|1)), Int16(UInt8(Int8(59))), ((Int16(Int16(35))&127)..(Int16(Int16(3))&127):(Int64(-96)|1)), "G%h?>Fn.hy")
public var var_1747954920306_376 : UInt64 = UInt64(UInt8(Int8(Int8(-71))))
@Deprecated
var var_1747954920306_537 : ?Range<UInt32> = (((UInt32(UInt32(25))&127)..=(UInt32(UInt32(244))&127):(Int64(-19)|1)) as Range<UInt32>)
@Deprecated
public var var_1747954920306_590 : Bool = false
public var var_1747954920306_595 : UInt32 = UInt32(76)
@Deprecated
public let var_1747954920306_703 : Range<Int16> = ((Int16(Int16(-115))&127)..(Int16(Int16(-80))&127):(Int64(126)|1))
public var var_1747954920306_725 : UInt8 = UInt8(114)
@Deprecated
public var var_1747954920306_757 : Array<UInt64> = [UInt64(185), UInt64(100), UInt64(45), UInt64(196), UInt64(241), UInt64(81), UInt64(116), UInt64(131), UInt64(228), UInt64(129)]
public var var_1747954920306_785 : Int16 = Int16(Int16(73))
internal const var_1747954920306_832 : Unit = ()
public var var_1747954920306_848 : Int8 = Int8(-111)
let var_1747954920306_864 : UInt64 = UInt64(53)
public var var_1747954920306_891 : Unit = ()
internal var var_1747954920306_895 : Unit = ()
@Deprecated
internal const var_1747954920306_899 : Unit = ()
internal var var_1747954920306_936 : UInt16 = UInt16(UInt8(149))
public let var_1747954920306_967 : Unit = ()
public var var_1747954920306_1020 : (Option<UInt16>, Int8, Float64, Unit, UInt16, Int16, Array<Unit>, (Range<Int16>, Int16, Range<Int16>, String)) = ((((Int8(Int8(-47))&127)..(Int8(Int8(45))&127):(Int64(UInt8(109))|1)) as UInt16), Int8(-36), Float64(Float32(Float32(-108.0))), (), UInt16(UInt8(Int8(-22))), Int16(UInt16(UInt8(156))), [(), (), (), (), (), (), (), (), (), ()], (((Int16(Int16(0))&127)..=(Int16(Int16(-21))&127):(Int64(-51)|1)), Int16(UInt16(Int8(-84))), ((Int16(Int16(-126))&127)..(Int16(Int16(-58))&127):(Int64(UInt32(242))|1)), ":FL\\,Y3nx?"))
public var var_1747954920306_1143 : Int32 = Int32(Int32(-96))
public let var_1747954920306_1165 : ???Struct_1747954920306_19 = Option<Option<Option<Struct_1747954920306_19>>>.None
public var var_1747954920306_1168 : ??Struct_1747954920306_19 = ((((Int8(Int8(-31))&127)..(Int8(Int8(-62))&127):(Int64(80)|1)) as Range<Int8>) as Option<Struct_1747954920306_19>)
internal let var_1747954920306_1212 : Range<UInt32> = ((UInt32(UInt32(Int32(Int16(UInt8(219)))))&127)..(UInt32(UInt32(115))&127):(Int64(122)|1))
public var var_1747954920306_1242 : Option<Unit> = (Int64(93) as Unit)
@Deprecated
public var var_1747954920306_1251 : Int64 = Int64(114)
public var var_1747954920306_1274 : Int32 = Int32(-24)
public var var_1747954920306_1283 : VArray<Int64, $3> = [Int64(4), Int64(-13), Int64(120)]
@Deprecated
public let var_1747954920306_1297 : Float64 = Float64(1.0)
public var var_1747954920306_1304 : Range<Int8> = ((Int8(Int8(-71))&127)..=(Int8(Int8(68))&127):(Int64(119)|1))
public struct Struct_1747954920306_19 {
    public init() { // block id: 21
 
    }
;
    @Frozen
    public static prop var_1747954920306_1111 : (Array<UInt64>, Range<Int8>, Range<UInt32>, Interface_1747954920306_287, Option<Option<Unit>>, Class_1747954920306_181) { // block id: 1112
        get() { // block id: 1114
            ();
            Class_1747954920306_281();
            ([UInt64(218), UInt64(Int32(-84)), UInt64(182), UInt64(40), UInt64(27), UInt64(UInt32(69)), UInt64(51), UInt64(UInt8(97)), UInt64(237), UInt64(204)], ((Int8(Int8(-57))&127)..(Int8(Int8(-56))&127):(Int64(-57)|1)), ((UInt32(UInt32(128))&127)..=(UInt32(UInt32(101))&127):(Int64(-61)|1)), Class_1747954920306_281(), Option<Option<Unit>>.None, Class_1747954920306_181())
        }
 
    };
    public static let var_1747954920306_1175 : Unit = ();
    private static let var_1747954920306_1180 : Option<Array<UInt64>> = Option<Array<UInt64>>.None;
    @Frozen
    static mut prop var_1747954920306_1194 : ?Struct_1747954920306_395 { // block id: 1195
        get() { // block id: 1197
            ((Class_1747954920306_281(), (Class_1747954920306_181() as Unit)) as Struct_1747954920306_395);
            var_1747954920306_1308
        }
 
        set(Value) { // block id: 1205
            ((Int16(Int16(-51))&127)..(Int16(Int16(101))&127):(Int64(36)|1));
            ();
            ();
            var_1747954920306_1308 = Value
        }
 
    };
    public static func func_1747954920306_272(param_1747954920306_273 : UInt16) : Struct_1747954920306_19 { // block id: 274
        (func_1747954920306_291<Class_1747954920306_281>(var_1747954920306_214, UInt8(248), namedParam_1747954920306_294 : Int16(-40), namedParam_1747954920306_295 : var_1747954920306_785).var_1747954920306_1101 ?? try { // block id: 1109
            var_1747954920306_1111
        } catch (e: Exception) { // block id: 1140
            var_1747954920306_1143 &= Int32(8);
            var_1747954920306_1111
        }[2]);
        (((var_1747954920306_1165 ?? var_1747954920306_1168) ?? try { // block id: 1173
            var_1747954920306_1175;
            Option<Struct_1747954920306_19>.None
        } catch (e: Exception) { // block id: 1178
            var_1747954920306_1180;
            if (true) { Option<Bool>.Some(var_1747954920306_590) } else { Option<Bool>.Some(true) } ;
            Option<Struct_1747954920306_19>.None
        }) ?? (var_1747954920306_136, var_1747954920306_1194)[0])
    }
;
    func func_1747954920306_1228<T0, T1>(param_1747954920306_1229 : Float64, param_1747954920306_1230 : VArray<Int64, $3>, param_1747954920306_1231 : Option<Range<Int8>>) : VArray<Int64, $3> { // block id: 1232
        var_1747954920306_1175;
        try { // block id: 1235
            (var_1747954920306_1242 ?? var_1747954920306_1175);
            var loopTimeVar_1747954920306_1254 : Range<UInt64> = ((UInt64(UInt64(58))&127)..=(UInt64(UInt64(UInt64(169)))&127):(Int64(-32)|1));
            for (i in loopTimeVar_1747954920306_1254 where false) {
                var_1747954920306_1251 <<= ((Int64(-122)) & 7)
            };
            [Int32(-15), Int32(110), Int32(92), Int32(8), Int32(-106), Int32(-72), Int32(41), Int32(125), Int32(-28), Int32(102)][5]
        } finally { // block id: 1264
            var_1747954920306_1143 + Int32(-125)
        };
        try { // block id: 1271
            var_1747954920306_1274 /= ((Int32(96)) | 1);
            (VArray<Int64, $3>({ i => Int64(-27)}), var_1747954920306_1283)
        } finally { // block id: 1285
            var_1747954920306_848 += Int8(-58);
            (var_1747954920306_1283, VArray<Int64, $3>(repeat: var_1747954920306_224))
        }[1]
    }
;
    static var var_1747954920306_1308 : ?Struct_1747954920306_395 = Option<Struct_1747954920306_395>.None
}
 
 
@Deprecated
public open class Class_1747954920306_181 {
    @Frozen
    public init() { // block id: 183
 
    }
;
    @Frozen
    static mut prop var_1747954920306_186 : Bool { // block id: 187
        get() { // block id: 189
            ();
            (((UInt8(UInt8(251))&127)..(UInt8(UInt8(180))&127):(Int64(73)|1)) is Bool)
        }
 
        set(Value) { // block id: 195
            Struct_1747954920306_19();
            ();
            ()
        }
 
    }
    static init() {
    }
}
 
 
 
sealed public interface Interface_1747954920306_286 {
 
}
 
sealed public interface Interface_1747954920306_288<T0, T1> <: Interface_1747954920306_286 {
 
}
 
public interface Interface_1747954920306_287 <: Interface_1747954920306_286 & Interface_1747954920306_288<VArray<Int64, $3>, UInt8> {
 
}
 
public interface Interface_1747954920306_285 <: Interface_1747954920306_286 & Interface_1747954920306_287 {
 
}
 
sealed public interface Interface_1747954920306_284<T0> <: Interface_1747954920306_285 {
 
}
 
sealed public interface Interface_1747954920306_289<T0> {
 
}
 
public open class Class_1747954920306_281 <: Interface_1747954920306_284<Unit> & Interface_1747954920306_289<Int32> & Resource {
    @Frozen
    public init() { // block id: 283
 
    }
;
    @Frozen
    prop var_1747954920306_489 : Bool { // block id: 490
        get() { // block id: 492
            (Float64(Float64(-106.0)) is Array<Unit>)
        }
 
    };
    @Frozen
    public prop var_1747954920306_1101 : ?Range<UInt32> { // block id: 1102
        get() { // block id: 1104
            Option<Range<UInt32>>.None
        }
 
    }
    static init() {
    }
    public func isClosed(): Bool { return true }
    public func close(): Unit {}
}
 
 
@Deprecated
public struct Struct_1747954920306_395 {
    public init() { // block id: 397
 
    }
;
    public let var_1747954920306_419 : Range<UInt32> = ((UInt32(UInt32(1))&127)..(UInt32(UInt32(215))&127):(Int64(-60)|1));
    @Frozen
    public mut prop var_1747954920306_804 : Unit { // block id: 805
        get() { // block id: 807
            ()
        }
 
        set(Value) { // block id: 811
            ()
        }
 
    }
}
 
 
 
 
 
 
 
 
 
 
@Frozen
@Deprecated
public func func_1747954920306_291<T0>(param_1747954920306_292 : Float32, param_1747954920306_293 : UInt8, namedParam_1747954920306_294 ! : Int16, namedParam_1747954920306_295 ! : Int16) : Class_1747954920306_281 where T0 <: Class_1747954920306_281 & Interface_1747954920306_284<Unit> { // block id: 296
    let var_1747954920306_304 : Array<UInt64> = [UInt64(237), UInt64(172), UInt64(82), UInt64(86), UInt64(23), UInt64(56), UInt64(187), UInt64(220), UInt64(127), UInt64(245)];
    let var_1747954920306_343 : Option<Unit> = Option<Unit>.None;
    let var_1747954920306_567 : UInt8 = UInt8(UInt8(UInt8(172)));
    let var_1747954920306_598 : UInt32 = UInt32(107);
    let var_1747954920306_878 : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()];
    func func_1747954920306_300() : Array<Unit> { // block id: 301
        var_1747954920306_304[0];
        let var_1747954920306_450 : Unit = ();
        let var_1747954920306_549 : Option<Bool> = (Int32(Int32(Int16(115))) as Bool);
        let var_1747954920306_639 : Option<Unit> = Option<Unit>.None;
        let var_1747954920306_658 : ?Option<Unit> = (Int64(90) as Option<Unit>);
        func func_1747954920306_498<T0>(namedParam_1747954920306_499 ! : Unit, optionalParam_1747954920306_500 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()], optionalParam_1747954920306_512 ! : UInt32 = UInt32(119), optionalParam_1747954920306_514 ! : (Range<Int64>, Bool) = (((Int64(Int64(109))&127)..(Int64(Int64(-55))&127):(Int64(-44)|1)), false)) : Unit { // block id: 521
            let var_1747954920306_543 : Int16 = Int16(5);
            var var_1747954920306_556 : Range<Int8> = ((Int8(Int8(-2))&127)..=(Int8(Int8(0))&127):(Int64(-104)|1));
            var var_1747954920306_574 : Int8 = Int8(-45);
            var loopTimeVar_1747954920306_579 : Int64 = 0;
            while ((if ((Option<Bool>.None ?? false)) { // block id: 531
                ((Int32(Int32(15))&127)..(Int32(Int32(-10))&127):(var_1747954920306_219|1));
                var_1747954920306_537;
                Int16(32) < var_1747954920306_543
            } else if ((var_1747954920306_549, var_1747954920306_549, var_1747954920306_556, true, r'c')[3]) { // block id: 561
                var_1747954920306_29
            } else { // block id: 563
                UInt8(61) > var_1747954920306_567
            }) && loopTimeVar_1747954920306_579 < 100 ) {
                loopTimeVar_1747954920306_579++;
                ((Int8(var_1747954920306_574)&127)..(Int8(var_1747954920306_574)&127):(var_1747954920306_219|1))
            };
            if (if (try { // block id: 583
                var var_1747954920306_586 : Bool = false;
                var_1747954920306_586 &&= true;
                var_1747954920306_590
            } finally { // block id: 592
                var_1747954920306_595 += var_1747954920306_598;
                let var_1747954920306_602 : Float64 = Float64(-36.0);
                var_1747954920306_602 < Float64(-41.0)
            }) { // block id: 605
                var_1747954920306_29
            } else { // block id: 607
                var_1747954920306_590
            }) { try { // block id: 610
                var_1747954920306_450;
                var_1747954920306_343
            } catch (_) { // block id: 613
                var_1747954920306_567;
                UInt64(90) * UInt64(36);
                Option<Unit>.None
            } finally { // block id: 619
                var var_1747954920306_622 : Int16 = Int16(Int8(-34));
                var_1747954920306_622++;
                if (var_1747954920306_590) { var_1747954920306_343 } else { var_1747954920306_343 } 
            } } else { (if ((UInt8(71) > var_1747954920306_567)) { [Option<Unit>.Some(()), var_1747954920306_639, var_1747954920306_639, var_1747954920306_343, Option<Unit>.Some(()), var_1747954920306_639, var_1747954920306_639, var_1747954920306_639, Option<Unit>.Some(()), var_1747954920306_343][4] } else { (var_1747954920306_658 ?? var_1747954920306_639) } ) } ;
            var_1747954920306_590 &&= var_1747954920306_29 && try { // block id: 667
                var_1747954920306_590
            } catch (e: Exception) { // block id: 669
                var var_1747954920306_672 : Range<Int64> = ((Int64(Int64(-31))&127)..=(Int64(Int64(31))&127):(Int64(118)|1));
                (var_1747954920306_672, true);
                true || true
            }
        }
;
        const var_1747954920306_698 : String = ";3&I(7,&Es";
        try { // block id: 308
            var_1747954920306_312[2];
            let var_1747954920306_348 : ?Range<UInt32> = Option<Range<UInt32>>.None;
            let var_1747954920306_416 : Struct_1747954920306_395 = Struct_1747954920306_395();
            let var_1747954920306_428 : ?UInt16 = (Option<Range<UInt32>>.None as UInt16);
            let var_1747954920306_469 : Int16 = Int16(-5);
            let var_1747954920306_474 : VArray<Int64, $3> = VArray<Int64, $3>(repeat: Int64(Int64(UInt64(1))));
            func func_1747954920306_399(namedParam_1747954920306_400 ! : Array<UInt64>, optionalParam_1747954920306_401 ! : Range<Int16> = ((Int16(Int16(-39))&127)..=(Int16(Int16(UInt8(110)))&127):(Int64(UInt64(UInt32(165)))|1)), optionalParam_1747954920306_409 ! : String = ###"^ J)S*)]_~"###) : Struct_1747954920306_395 { // block id: 411
                let var_1747954920306_486 : Class_1747954920306_281 = Class_1747954920306_281();
                const var_1747954920306_711 : Int64 = 83;
                if (((var_1747954920306_416.var_1747954920306_419) is Interface_1747954920306_287)) { // block id: 421
                    var_1747954920306_428.getOrThrow();
                    try (resource = Class_1747954920306_281()) { // block id: 432
                        Int32(71);
                        ();
                        var var_1747954920306_437 : Float64 = Float64(Float32(Float32(Float32(Float32(54.0)))));
                        var_1747954920306_437 /= Float64((Int32(var_1747954920306_437)) | 1)
                    } finally { // block id: 444
                        ((Int8(Int8(-109))&127)..=(Int8(Int8(82))&127):(Int64(41)|1));
                        var_1747954920306_450
                    };
                    try { // block id: 453
                        ();
                        ();
                        if (false) { VArray<Int64, $3>(repeat: Int64(-119)) } else { VArray<Int64, $3>(repeat: Int64(-75)) } 
                    } finally { // block id: 466
                        ((Int16(var_1747954920306_469)&127)..=(Int16(Int16(8))&127):(var_1747954920306_219|1));
                        var_1747954920306_474
                    }
                } else if (var_1747954920306_486.var_1747954920306_489) { // block id: 496
                    func_1747954920306_498<Array<Option<Unit>>>(namedParam_1747954920306_499 : var_1747954920306_450);
                    (Option<VArray<Int64, $3>>.Some(VArray<Int64, $3>({ i => Int64(107)})) ?? VArray<Int64, $3>(repeat: var_1747954920306_219))
                } else { // block id: 693
                    "x2.t>P:~nF";
                    try { // block id: 696
                        var_1747954920306_698;
                        if (false) { var_1747954920306_703 } else { ((Int16(Int16(-128))&127)..=(Int16(Int16(-45))&127):(Int64(-61)|1)) } ;
                        if (var_1747954920306_29) { VArray<Int64, $3>(repeat: Int64(-115)) } else { VArray<Int64, $3>({ i => Int64(69)}) } 
                    } catch (_) { // block id: 718
                        if (false) { "[-!ytv!k]i" } else { var_1747954920306_698 } ;
                        var_1747954920306_725 <<= ((UInt8(59)) & 7);
                        if (false) { var_1747954920306_474 } else { var_1747954920306_474 } 
                    } finally { // block id: 732
                        var_1747954920306_450;
                        var_1747954920306_474
                    }
                };
                var var_1747954920306_746 : ??Struct_1747954920306_395 = (Float32(Float32(-128.0)) as Option<Struct_1747954920306_395>);
                var_1747954920306_746.getOrThrow().getOrThrow()
            }
;
            let var_1747954920306_761 : ?Struct_1747954920306_395 = (Int32(-104) as Struct_1747954920306_395);
            func func_1747954920306_329(optionalParam_1747954920306_330 ! : Range<Int32> = ((Int32(Int32(122))&127)..(Int32(Int32(-113))&127):(Int64(-74)|1)), namedParam_1747954920306_332 ! : Range<UInt8>, namedParam_1747954920306_333 ! : Unit) : Array<Unit> { // block id: 334
                try (resource = Class_1747954920306_281()) { // block id: 336
                    var_1747954920306_343.getOrThrow()
                } catch (e: Exception) { // block id: 345
                    var var_1747954920306_360 : Int32 = Int32(UInt8(Int8(UInt8(UInt8(3)))));
                    var var_1747954920306_388 : Byte = UInt8(164);
                    match (var_1747954920306_348) {
                        case _ => 
                            ()
                        
                        case caseVar_1747954920306_356 => 
                            var_1747954920306_360 |= var_1747954920306_360
                        
                        case _ : (Range<Int64>, Bool) => 
                            ((Int16(Int16(-78))&127)..=(Int16(Int16(75))&127):(Int64(22)|1));
                            var_1747954920306_376 |= var_1747954920306_376
                        
                        case _ => 
                            ((UInt8(UInt8(119))&127)..(UInt8(var_1747954920306_388)&127):(var_1747954920306_219|1));
                            var_1747954920306_388 *= UInt8(139)
                        
                    }
                };
                func_1747954920306_399(namedParam_1747954920306_400 : Option<Array<UInt64>>.Some(var_1747954920306_757).getOrThrow(), optionalParam_1747954920306_401 : match (var_1747954920306_761) {
                    case caseVar_1747954920306_766 : VArray<Int64, $3> => 
                        ((Int16(var_1747954920306_469)&127)..(Int16(Int16(60))&127):(Int64(17)|1))
                    
                    case caseVar_1747954920306_774 : Unit => 
                        if (var_1747954920306_590) { var_1747954920306_703 } else { ((Int16(Int16(-87))&127)..=(Int16(Int16(-18))&127):(Int64(78)|1)) } 
                    
                    case _ => 
                        var var_1747954920306_789 : Int16 = Int16(33);
                        var_1747954920306_785 = var_1747954920306_789;
                        ();
                        var_1747954920306_703
                    
                    case _ => 
                        var_1747954920306_703
                    
                }, optionalParam_1747954920306_409 : (var_1747954920306_639, var_1747954920306_698)[1]).var_1747954920306_804;
                const var_1747954920306_873 : UInt64 = 95;
                match (Int8(Option<UInt8>.None.getOrThrow())) {
                    case 125 => 
                        var_1747954920306_595 <<= ((UInt32(7)) & 7);
                        var_1747954920306_219 += var_1747954920306_219;
                        [var_1747954920306_832, (), var_1747954920306_450, var_1747954920306_832, (), var_1747954920306_832, var_1747954920306_832, var_1747954920306_450, var_1747954920306_450, var_1747954920306_832]
                    
                    case _ : Option<Option<Struct_1747954920306_395>> => 
                        var_1747954920306_848++;
                        var_1747954920306_785--;
                        [(), (), (), (), (), (), (), (), (), ()]
                    
                    case 79 => 
                        var var_1747954920306_858 : Float64 = Float64(Float64(-115.0));
                        var_1747954920306_858 *= Float64(122.0);
                        [var_1747954920306_864, var_1747954920306_376, UInt64(227), var_1747954920306_376, var_1747954920306_864, var_1747954920306_864, UInt64(48), var_1747954920306_873, UInt64(129), UInt64(175)];
                        var_1747954920306_878
                    
                    case _ => 
                        if (true) { [var_1747954920306_832, var_1747954920306_832, var_1747954920306_450, (), var_1747954920306_891, var_1747954920306_832, var_1747954920306_895, var_1747954920306_891, var_1747954920306_899, ()] } else { [(), (), (), (), (), (), (), (), (), ()] } 
                    
                    case _ => 
                        Option<Bool>.Some(true);
                        [(), (), (), (), (), (), (), (), (), ()]
                    
                }
            }
;
            func_1747954920306_329(namedParam_1747954920306_332 : ((UInt8(UInt8(110))&127)..=(UInt8(var_1747954920306_725)&127):(Int64(-93)|1)), namedParam_1747954920306_333 : ())
        } finally { // block id: 914
            [(), (), (), (), (), (), (), (), (), ()]
        }
    }
;
    func_1747954920306_300()[8];
    let var_1747954920306_998 : (Option<UInt16>, Int8, Float64, Unit, UInt16, Int16, Array<Unit>, (Range<Int16>, Int16, Range<Int16>, String)) = (Option<UInt16>.Some(UInt16(205)), Int8(-112), Float64(Float32(-59.0)), (), UInt16(Int8(Int8(30))), Int16(UInt16(52)), [(), (), (), (), (), (), (), (), (), ()], (((Int16(Int16(97))&127)..=(Int16(Int16(-3))&127):(Int64(67)|1)), Int16(-87), ((Int16(Int16(9))&127)..(Int16(Int16(-96))&127):(Int64(0)|1)), "'d !j$W]W/"));
    if (((var_1747954920306_848 as Option<Unit>) is UInt16)) { // block id: 921
        var var_1747954920306_926 : ?UInt16 = (Int8(Int8(UInt8(Int8(-79)))) as UInt16);
        (var_1747954920306_926, Int8(-8), Float64(-90.0), (), var_1747954920306_936, Int16(123), [(), (), (), (), (), (), (), (), (), ()], var_1747954920306_312)[3];
        try { // block id: 944
            var_1747954920306_891;
            var_1747954920306_219 <<= ((var_1747954920306_219) & 7);
            [var_1747954920306_899, (), (), var_1747954920306_832, var_1747954920306_891, (), (), (), (), ()]
        } catch (e: Exception) { // block id: 960
            var_1747954920306_891;
            [var_1747954920306_899, var_1747954920306_899, var_1747954920306_832, var_1747954920306_967, var_1747954920306_891, var_1747954920306_891, var_1747954920306_895, var_1747954920306_895, (), ()]
        } finally { // block id: 975
            var_1747954920306_895;
            [(), (), var_1747954920306_899, (), var_1747954920306_899, var_1747954920306_832, (), (), var_1747954920306_967, ()]
        }
    } else if (([UInt64(78), UInt64(198), UInt64(179), UInt64(1), UInt64(174), UInt64(12), UInt64(180), UInt64(10), UInt64(66), UInt64(79)] is Range<UInt8>)) { // block id: 990
        var_1747954920306_878
    } else { // block id: 992
        try { // block id: 994
            ();
            ();
            var_1747954920306_998
        } catch (_) { // block id: 1017
            var_1747954920306_343;
            var_1747954920306_1020
        };
        (Option<Array<Unit>>.Some([(), var_1747954920306_891, (), (), (), (), (), (), (), var_1747954920306_891]) ?? [(), (), (), (), (), (), (), (), (), ()])
    };
    var var_1747954920306_1084 : ((Class_1747954920306_281, Option<Unit>), Option<Unit>) = ((Class_1747954920306_281(), ((((Int64(Int64(-69))&127)..=(Int64(Int64(-75))&127):(Int64(32)|1)) as VArray<Int64, $3>) as Unit)), (UInt32(Int16(61)) as Unit));
    var_1747954920306_1084[0][0]
}
 
 
 
 
public func func_1747954920306_177() : Struct_1747954920306_19 { // block id: 178
    let var_1747954920306_209 : ?Bool = Option<Bool>.None;
    Class_1747954920306_181.var_1747954920306_186 &&= (if (var_1747954920306_29) { // block id: 206
        var_1747954920306_70;
        var_1747954920306_209
    } else { // block id: 211
        var_1747954920306_214 * var_1747954920306_214;
        VArray<Int64, $3>(repeat: var_1747954920306_219);
        if (true) { Option<Bool>.Some(false) } else { Option<Bool>.None } 
    } ?? if (var_1747954920306_29) { // block id: 234
        var_1747954920306_236;
        var_1747954920306_240 ^= UInt64(173);
        false
    } else { // block id: 244
        ();
        false
    });
    var_1747954920306_249 -= if (false && var_1747954920306_29) { // block id: 255
        var_1747954920306_258 &&= false;
        !true;
        UInt32(238)
    } else { // block id: 265
        var_1747954920306_249 ^ var_1747954920306_249
    };
    var var_1747954920306_1225 : UInt16 = UInt16(163);
    Struct_1747954920306_19.func_1747954920306_272(match (var_1747954920306_1212) {
        case _ => 
            ();
            var_1747954920306_1225
        
    })
}
 
 
main(): Int64 {
    try {
        let var_1747954920306_34 : UInt64 = UInt64(247);
        let var_1747954920306_62 : Byte = UInt8(Int8(77));
        func func_1747954920306_23() : Struct_1747954920306_19 { // block id: 24
            const var_1747954920306_58 : Int8 = -127;
            let var_1747954920306_110 : Struct_1747954920306_19 = Struct_1747954920306_19();
            var var_1747954920306_168 : UInt32 = UInt32(UInt32(97));
            if (if (var_1747954920306_29) { // block id: 31
                [var_1747954920306_34, UInt64(180), var_1747954920306_34, var_1747954920306_34, var_1747954920306_34, UInt64(45), var_1747954920306_34, UInt64(165), var_1747954920306_44, var_1747954920306_44];
                Int8(117)
            } else if (var_1747954920306_29) { // block id: 52
                Int8(-111) & Int8(-96)
            } else { // block id: 56
                var_1747954920306_58
            } > Int8(var_1747954920306_62)) { // block id: 65
                (var_1747954920306_70, false)[0];
                let var_1747954920306_89 : Int = Int64(Int16(-41));
                (Option<Range<Int8>>.Some(((Int8(var_1747954920306_58)&127)..(Int8(Int8(-79))&127):(var_1747954920306_89|1))) ?? ((Int8(Int8(48))&127)..=(Int8(Int8(61))&127):(Int64(18)|1)));
                var var_1747954920306_100 : UInt32 = UInt32(Int8(Int8(Int8(58))));
                var var_1747954920306_117 : Unit = ();
                match (false) {
                    case _ => 
                        var_1747954920306_100 >>= ((UInt32(161)) & 7);
                        Float32(-128.0);
                        if (true) { var_1747954920306_110 } else { var_1747954920306_110 } 
                    
                    case true => 
                        var_1747954920306_117;
                        var_1747954920306_121 >>= ((var_1747954920306_58) & 7);
                        Struct_1747954920306_19()
                    
                    case _ => 
                        if (var_1747954920306_29) { var_1747954920306_110 } else { var_1747954920306_136 } 
                    
                }
            } else { // block id: 138
                var loopTimeVar_1747954920306_144 : Int64 = 0;
                do {
                    loopTimeVar_1747954920306_144++;
                    UInt16(69)
                } while ((false) && loopTimeVar_1747954920306_144 < 100 ) ;
                var var_1747954920306_154 : Int32 = Int32(-118);
                match (Option<Range<Int8>>.None) {
                    case caseVar_1747954920306_149 => 
                        UInt8(91);
                        var_1747954920306_154 *= var_1747954920306_154;
                        var var_1747954920306_159 : Bool = (UInt32(37) is Int8);
                        var_1747954920306_159 ||= var_1747954920306_159
                    
                    case _ : (Range<Int64>, Bool) => 
                        var_1747954920306_168 >>= ((var_1747954920306_168) & 7)
                    
                    case _ => 
                        ()
                    
                };
                func_1747954920306_177()
            }
        }
;
        var var_1747954920306_1300 : VArray<Int64, $3> = [Int64(21), Int64(27), Int64(-92)];
        func_1747954920306_23().func_1747954920306_1228<UInt64, Range<Int16>>(var_1747954920306_1297, var_1747954920306_1300, Option<Range<Int8>>.Some(var_1747954920306_1304))[2]
        // CRC Check All Variables
        var crcCheck = CrcCheck(5000, 32)
        crcCheck.updateBuffer(UInt64(var_1747954920306_34*var_1747954920306_34), 64)
        crcCheck.updateBuffer(UInt64(var_1747954920306_44*var_1747954920306_44), 64)
        crcCheck.updateBuffer(UInt64(var_1747954920306_62*var_1747954920306_62), 64)
        crcCheck.updateBuffer(UInt64(var_1747954920306_224*var_1747954920306_224), 64)
        crcCheck.updateBuffer(UInt64(var_1747954920306_249*var_1747954920306_249), 64)
        crcCheck.crcCheck()
        crcCheck.getCrcOutput()
        ()
    } catch (e: NoneValueException) { println("Exception: NoneValueException") }
 
    return 0;
}
 
class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64
 
    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        buffer = Array<Int64>(buffer_n, { i => 0 })
        poly_n = crc_n + 1
        if (crc_n == 32) {
            poly = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]
        } else if (crc_n == 16) {
            poly = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
        } else if (crc_n == 8) {
            poly = [1, 0, 0, 0, 0, 0, 1, 1, 1]
        } else {
            poly = [1, 1, 0, 0, 1]
        }
    }
 
    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64>(byte_n, { i => 0 })
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[(i + buffer_index) % buffer.size] = byteArray[i + byte_index]
            i++
        }
        buffer_index = (buffer_index + i) % buffer.size
    }
 
    func updateBuffer(input: Bool, byte_n: Int64): Unit {
        if (input == true) {
            updateBuffer(1, byte_n)
        } else {
            updateBuffer(0, byte_n)
        }
    }
 
    func updateBuffer(input: Rune, byte_n: Int64): Unit {
        updateBuffer(UInt64(UInt32(input)), byte_n)
    }
 
    func updateBuffer(input: String, byte_n: Int64): Unit {
        for (c in input) {
            updateBuffer(c, byte_n)
        }
    }
 
    func updateBuffer(input: Unit, byte_n: Int64): Unit {
        updateBuffer(input.toString(), byte_n)
    }
 
    func updateBuffer(input: Any, byte_n: Int64) : Unit {
        if (input is Hashable) {
            match(input as Hashable) {
                case Some(v) => updateBuffer(UInt64(v.hashCode()), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
            
        } else if (input is ToString) {
            match(input as ToString) {
                case Some(v) => updateBuffer(v.toString(), byte_n)
                case _=> updateBuffer(1, byte_n)
            }
        } else {
            updateBuffer(1, byte_n)
        }
    }     
    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64>(crc_output_n, { i => 0 })
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64>(crc_output_n, { i => 0 })
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }
 
    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
        print("\n")
    }
}
 
extend Struct_1747954920306_395 {
 
}

// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.
