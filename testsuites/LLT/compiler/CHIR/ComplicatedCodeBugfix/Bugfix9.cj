// LEVEL: 0
// EXEC-1: %compiler %n.cj -c

let a = Int32(1)
let b = Int16(6)&127..Int16(1)&127:Int64(Int8(UInt8(UInt8(3))))|1
let c : Array<d> = Array(0){ f => g }
var h = Int8(UInt8(4))
var i = UInt8(Int8(8))
var j = Int64(Int64(UInt32(Int8(UInt8(1)))))
var k = Int32(5)&127..Int32(8)&1279|1
var l = (UInt16(8)&127..UInt16(9)&12735|1) is d
var var188 = ""
var m = Int32(9)
var n = Float32(Float32(Float32(6.0)))
let o : Float32*Unit*Array<Bool>*Range<Int8>*Bool*Bool*Range<UInt8> = (Float32(44.0), (), [false, true, UInt16(0) is p, false, false, false, ((Float32(9.0), 0, [false, false, false, true, false, false, true, false, false, true], Int8(0)&127..Int8(3)&0|1, true, true, UInt8(9)&127..UInt8(234&13|1)), false, (0&127..0&0|1, 3), (Float32(87.0), 0, [false, false, true, true, true, true, true, true, false, false], Int8(6)&127..Int8(6)&103|1, false, false, UInt8(3)&127..UInt8(7)&0|1)) is Int8, Float32(59.0) is UInt8, [d.g, d.g, d.g, d.g, d.g, d.g, d.g, d.g, d.g, d.g] is Int16, (0&127..0&16|1) is Int32], Int8(Int8(Int8(9)))&127..Int8(61&55|1), (")IV\\${var188}oyKP" is Unit), 0 is Int64, UInt8(2)&127..UInt8(3)&75|1)
let q = 0
var r = ("""
LJ\\E${var188}(${var188}
x.${var188}>${var188}PO
""" is UInt32)
let s = 7&127..73&12742|1
let t : Int16*Unit*Range<Int32>*Unit*Range<Int16>*Int16*Int8*Unit = (Int16(1), (), Int32(4)&127..Int32(UInt16(UInt8(1)))&127:Int64(Int32(UInt16(9)))|1, (), Int16(3)&127..Int16(7)&12720|1, Int16(4), Int8(0), ())
let aa = u()
var v = (u(), Int8(8)&127..Int8(6)&0|1, UInt64(3)&127..UInt64(1)&12771|1)
var w = Float32(121.0)
var x = Int64(Int16(4))
let y = Int16(UInt8(4))
var z = d.g
var ab = UInt32(8)&127..UInt32(1)&1270|1
let ac : Result<Array<Int64>> = Err(Exception())
let ad = ()
var ae = UInt64(UInt8(7))
var af = UInt16(2)
var ag : Result<Option<u>> = Err(Exception("LangFuzz Inner Exception"))
var ah = Int16(Int8(UInt8(UInt8(4))))
var ai = 59.0
let aj = 0
let ak = UInt8(UInt8(UInt8(6)))
var al : Result<am> = Err(Exception("LangFuzz Inner Exception"))
var an = Int8(7)&127..Int8(9)&0|1
let ao : Result<UInt8> = Err(Exception("LangFuzz Inner Exception"))
let ap = ()
let aq = ar
let at : Rune*UInt8*Range<UInt64>*Int8*Range<Int32>*Int64 = ('U', UInt8(Int8(Int8(5))), UInt64(0)&127..UInt64(Int64(UInt32(1))&0|1), Int8(9), Int32(2)&127..Int32(6)&127103|1, Int64(Int32(8)))
var au = ()
let av = true
var aw = ar
let ax : Result<d> = Err(Exception("LangFuzz Inner Exception"))
let ay : Option<u>*UInt64*Range<Int16> = (None, UInt64(Int16(0)), Int16(4)&127..Int16(Int16(UInt16(9)))&127:Int64(UInt64(1))|1)
let az = [Int64(Int8(0)), 0, 6, 0, 0, Int64(UInt8(Int8(UInt8(4)))), Int64(Int32(Int8(Int8(4)))), Int64(UInt64(3)), 3, 0]
let ba = UInt64(8)&127..UInt64(4)&1270|1
var bb = UInt16(2)&127..UInt16(5)&1270|1
var bc = Int64(Int16(UInt8(7)))
var bd = ()
let e : Result<Range<Int32>> = Err(Exception("LangFuzz Inner Exception"))
var f = [Int8(3)&127..Int8(4)&34|1, Int8(2)&127..Int8(9)&0|1, Int8(5)&127..Int8(1)&74|1, Int8(3)&127..Int8(2)&75|1, Int8(3)&127..Int8(2)&0|1, Int8(8)&127..Int8(1)&122|1, Int8(8)&127..Int8(7)&6|1, Int8(5)&127..Int8(2)&0|1, Int8(5)&127..Int8(2)&0|1, Int8(4)&127..Int8(3)&107|1]
let be = Int8(UInt8(1))
let bf = Float32(Float32(81.0))
let bg = [p(), p(), p(), p(), p(), p(), p(), p(), p(), p()]
var bh = UInt32(Int8(UInt8(3)))
var bi = 87&127..55&99|1
var bj : Option<Unit> = None
let bk = 0
var bl = Int8(3) is UInt8
let bm : Result<Bool> = Err(Exception("LangFuzz Inner Exception"))
let bn : ((Float32*Unit*Array<Bool>*Range<Int8>*Bool*Bool*Range<UInt8>)*Bool*Range<Int64>*UInt8*(Float32*Unit*Array<Bool>*Range<Int8>*Bool*Bool*Range<UInt8>))*(Int16*Unit*Range<Int32>*Unit*Range<Int16>*Int16*Int8*Unit)*Result<Option<u>>*Int8*(Int16*Unit*Range<Int32>*Unit*Range<Int16>*Int16*Int8*Unit) = (((Float32(94.0), (), [true, false, false, true, false, true, false, true, true, false], Int8(0)&127..Int8(107&0|1), Result<d>.Err(Exception("LangFuzz Inner Exception")) is Int8, Float32(75.0) is UInt64, UInt8(8)&127..UInt8(51&59|1)), true, 0&127..0&1270|1, UInt8(5), (Float32(89.0), (), [true, true, false, false, true, true, true, false, true, false], Int8(1)&127..Int8(1)&0|1, (0, 22&127..84&0|1) is Array<Result<Bool>>, Int8(1) is Bool, UInt8(2)&127..UInt8(1)&4|1)), (Int16(Int8(Int8(5))), (), Int32(7)&127..Int32(Int8(1))&127:Int64(Int16(1))|1, (), Int16(Int8(1))&127..Int16(UInt16(5))&127:Int64(Int8(7))|1, Int16(2), Int8(2), ()), Err(Exception("LangFuzz Inner Exception")), Int8(9), (Int16(Int16(4)), (), Int32(0)&127..Int32(7)&12724|1, (), Int16(3)&127..Int16(Int16(2))&127:Int64(UInt16(6))|1, Int16(8), Int8(UInt8(UInt8(4))), ()))
var bo = UInt32(5)
let bp = bq.g
var br : Array<Unit> = Array(0){ f => 0 }
var bs = UInt8(UInt8(UInt8(UInt8(UInt8(5)))))
let bt : Result<Result<Option<u>>> = Err(Exception("LangFuzz Inner Exception"))
var bu = Int32(6) is u
var bv = 0
var bw = 0
let bx : Result<p> = Err(Exception("LangFuzz Inner Exception"))
var by = 0
var bz = [true, true, false, true, true, false, true, true, false, false]
let ca = 't'
var cb = (UInt8(UInt8(Int8(5)))&127..UInt8(4)&127:Int64(UInt16(UInt16(7)))|1) as p
let cc = (Int32(9)&127..Int32(0)&1270|1) as u
var cd = UInt64(UInt32(0))
let ce = Int8(3)
let cf = Int32(6)
var cg = 0
let ch = 0
let ci = UInt8(6)&127..UInt8(7)&58|1
var cj = d.g as Int32
var ck = UInt8(2)&127..UInt8(7)&0|1
var cl = Int8(UInt8(UInt8(6)))
var cm = (Int16(1)&127..Int16(2)&117|1) as UInt64
let cn = UInt8(UInt8(Int8(UInt8(8))))
let co = 0
var cp : Result<Range<Int32>> = Err(Exception("LangFuzz Inner Exception"))
let cq = (0, 77&127..58&Int64(UInt64(0))|1)
let cr = UInt32(0)
 enum d {
    g |
    cs(Range<Int16>, Range<Int8>, Int32) |
    ar }
func ct(cu : Int8) { 
    0
    var cv = true
    var cw = Int8(4)
    try { 
        let cx = (Int8(UInt8(UInt8(4)))&127..Int8(9)&127:Int64(Int64(Int16(6)))|1) is Rune
        let cy = cs(Int16(7)&127..Int16(Int16(UInt16(2))&0|1), Int8(6)&127..Int8(7)&127:Int64(Int16(1))|1, Int32(Int16(5)))
        var cz = Int8(4)&127..Int8(1)&0|1
        if (cx) { [d.g, d.g, cs(Int16(2)&127..Int16(1)&12762|1, cz, a), cs(b, Int8(8)&127..Int8(6)&0|1, a), d.g] } else { c } 
    } catch (e: Exception) { 
        cv &&= false
        c
    } finally { 
        var da = false
        da
        cw &= Int8(3)
        c
    }[7]
}
struct p {
    init() {}
    static var f = 0var db = [1, 0, 2, 0, 9, 0, 3, 0, 6, 9]static let c : ?Int16 = None
    let dc = 0static var e = 81.0static let dd = UInt64(9)static let de = [false, true, false, true, true, false, true, false, true, false]static var df : Range<Int16>*Array<Unit>*Array<Int64>*((Float32*Unit*Array<Bool>*Range<Int8>*Bool*Bool*Range<UInt8>)*Bool*Range<Int64>*UInt8*(Float32*Unit*Array<Bool>*Range<Int8>*Bool*Bool*Range<UInt8>))*UInt8*Range<UInt64>*UInt16 = (Int16(4)&127..Int16(1)&1270|1, [(), (), (), (), (), (), (), (), (), ()], [5, 0, 4, 0, 2, 7, 0, 0, 0, 0], ((Float32(79.0), (), [false, true, false, true, false, false, true, false, true, false], Int8(7)&127..Int8(0&0|1), true, true, UInt8(8)&127..UInt8(7)&90|1), false, 81&127..0&85|1, UInt8(5), (Float32(95.0), (), [true, true, false, false, true, true, false, true, true, true], Int8(0)&127..Int8(81&28|1), false, false, UInt8(0)&127..UInt8(184&0|1))), UInt8(7), UInt64(7)&127..UInt64(8)&1270|1, UInt16(9))init(dg : UInt32, dh ! : Range<Int32> = Int32(9)&127..Int32(4)&12734|1) { 
        0
        var di = 0
        var dj = 0
        var dk = 0
        [Some(ap) ?? match (UInt64(8)) {
            case 1 | 0 | $dd | $dd => 
                0
                UInt64(5)
                bc /= 0 | 1
            case _ => 
                var dl = UInt32(3)
                dl %= 0 | 1
                m &= a
            case _ => 
                ()
        }, while (true && di < 0 ) {
            di++}, while (r && dj < 0 ) {
            dj++}, bd, try {} catch (_) { 
            0
            ad
        }, while (av && dk < 0 ) {
            dk++
            f
        }, try { 
            var dm = Int32(UInt32(1))
            dm |= dm
            0
            ap
        } catch (_) {} finally {}, if (av) { 
            w++
            0
        }, Option<Unit>.None ?? ()][4]
        let dn = (Int8(5)&127..Int8(4)&0|1) as u as u
        var var3607 = [(), (), (), (), (), (), (), (), (), ()]
        let var3622 : Float32*Unit*Array<Bool>*Range<Int8>*Bool*Bool*Range<UInt8> = (Float32(Float32(Float32(2.0))), (), [true, false, true, true, true, false, true, true, false, true], Int8(8)&127..Int8(0)&0|1, false, false, UInt8(6)&127..UInt8(6)&0|1)
        let var3656 = UInt64(UInt16(9))&127..UInt64(83&50|1)
        let var3677 : Result<Bool> = Err(Exception("LangFuzz Inner Exception"))
        if (if (de[5]) { 
            0
            ae &= dd
            l
        } else if (try { 
            r
        } catch (_) { 
            af == af
        }) { 
            a
            i /= ak | 1
            true
        } else { 
            false || false
        }) { (Ok(ag) ?? Err(Exception("LangFuzz Inner Exception"))) ?? dn } else { try { 
            if (false) { df } else { (Int16(3)&127..Int16(7)&1270|1, var3607, [x, 0, bc, 0, 3, x, x, 0, bc, 5], (var3622, false, s, ak, (w, (), [false, true, r, l, l, false, r, true], Int8(6)&127..Int8(6)&0|1, av, r, UInt8(1)&127..UInt8(1)&80|1)), UInt8(7), var3656, af) } 
            dn
        } catch (_) { 
            ah ^= Int16(6)
            bd
            Option<u>.None
        } finally { 
            (aj, s)
            if (av) { var3677 } else { var3677 } 
            if (r) { dn } 
        } } 
    }
    let var3948 = 't'var var4145 = false
    var var4948 = true
    func func219() { 
        UInt32(Int8(9))
        let var2202 : Result<Range<Int32>> = Err(Exception("LangFuzz Inner Exception"))
        func func1806(optionalParam1807 ! : Array<Unit> = [(), (), (), (), (), (), (), (), (), ()], namedParam1809 ! : d, optionalParam1810 ! : ((Float32*Unit*Array<Bool>*Range<Int8>*Bool*Bool*Range<UInt8>)*Bool*Range<Int64>*UInt8*(Float32*Unit*Array<Bool>*Range<Int8>*Bool*Bool*Range<UInt8>))*(Int16*Unit*Range<Int32>*Unit*Range<Int16>*Int16*Int8*Unit)*Result<Option<u>>*Int8*(Int16*Unit*Range<Int32>*Unit*Range<Int16>*Int16*Int8*Unit) = (((Float32(Float32(113.0)), (), [false, false, true, false, true, true, true, true, true, true], Int8(7)&127..Int8(0)&24|1, (Int16(2)&127..Int16(115&0|1), [(), (), (), (), (), (), (), (), (), ()], [0, 8, 0, 6, 0, 0, 0, 0, 8, 0], ((Float32(36.0), 0, [false, false, true, true, true, false, false, false, true, false], Int8(0)&127..Int8(2)&54|1, false, true, UInt8(9)&127..UInt8(5)&106|1), true, (0&127..10&1270|1, 9), (Float32(43.0), 0, [true, false, true, true, true, false, false, true, true, true], Int8(6)&127..Int8(50&0|1), false, false, UInt8(7)&127..UInt8(99&80|1))), UInt8(6), (UInt64(6)&127..UInt64(7)&127108|1, 2)) is Int16, true, UInt8(8)&127..UInt8(4)&27|1), Ok(Some(u())) is Result<Option<u>>, 0&127..62&12748|1, UInt8(UInt8(Int8(6))), (Float32(Float32(10.0)), (), [false, false, true, true, true, false, false, true, false, true], Int8(0)&127..Int8(8)&20|1, false, (Int32(6)&127..Int32(78&78|1)) is UInt64, UInt8(2)&127..UInt8(9)&26|1)), (Int16(5), (), Int32(5)&127..Int32(Int32(2))&127:Int64(UInt16(3))|1, (), Int16(UInt16(1))&127..Int16(5)&127:Int64(2)|1, Int16(6), Int8(Int8(7)), ()), Err(Exception("LangFuzz Inner Exception")), Int8(UInt8(1)), (Int16(5), (), Int32(Int8(4))&127..Int32(Int16(2))&127:Int64(Int16(4))|1, (), Int16(6)&127..Int16(78&42|1), Int16(5), Int8(3), ())), optionalParam1960 ! : Unit = ()) { 
            if (match (match (  db) {
                    case caseVar1974 => 
                        0}) {
                case caseVar2038 => 
                    l
            }) {}   }
        func1806
    }
    var var7139 : (Float32*Unit*Array<Bool>*Range<Int8>*Bool*Bool*Range<UInt8>)*Bool*Range<Int64>*UInt8*(Float32*Unit*Array<Bool>*Range<Int8>*Bool*Bool*Range<UInt8>) = ((Float32(17.0), (), [true, true, true, true, true, true, false, false, true, true], Int8(4)&127..Int8(7)&0|1, true, false, UInt8(7)&127..UInt8(5)&38|1), false, 0&127..86&0|1, UInt8(3), (Float32(41.0), (), [true, false, false, false, true, false, true, false, true, false], Int8(2)&127..Int8(1)&49|1, true, true, UInt8(0)&127..UInt8(112&0|1)))func func219(param220 : UInt8) : Range<Int32>*Range<UInt8>*Unit*String { 
        match (0) {
            case caseVar7252 => 
                if (false) { (k, 127..89, au, var188) } else { (127..104, 127..218, (), var188) } 
        }
    }
    init(namedParam216  : UInt32) {}
}
 class u {
    var var332 = 2
    var var596 = 0
    var var817 = false
    let p = 0
    let var6719 = 0
}
enum am {
    enumValue47670
}
enum bq {
    g
}


// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.
