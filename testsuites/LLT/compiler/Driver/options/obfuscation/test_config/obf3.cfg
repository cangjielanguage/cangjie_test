obf-layout mymod.mod1.ToPair.fromArray<*>(std.collection.ArrayList<*>)
ob?-* mymod.mod1.**
* mymod.mod1.*
obf-cf-* mymod.mod1.ToPair.*
obf-cf-bogus mymod.mod1.*()
obf-layout mymod.mod1.a**
obf-const mymod.mod1.*.*(...)
obf-layout mymod.**.*.*(...)
obf-cf-flatten mymod.**.*
obf-string mymod.mod1.ToPair<*>.fromArray<*>(std.collection.ArrayList<*>)
obf-const mymod.mod1.ToPair.fromArray<Int64>(std.collection.ArrayList<Int64>)
obf-layout default.pro?.myfunc()
obf-string default.pro0.myfunc()
obf-const pro.**.m*(**.MyClassB, ***, ...)
obf-layout pro.**.m*c(**.MyClassB, ***, ...)
obf-cf-flatten pro.**.m*k(**.MyClassB, ***, ...)
obf-const pro.**.m*k*(**.MyClassB, ***, ...)
obf-string pro.**.m**f*n**?k(**.MyClassB, ***, ...)
obf-cf-flatten pro.**.m*?(**.MyClassB, ***, ...)
obf-layout pro.**.m*?(**.MyClassB, ***, ...)
obf-const pro.zoo.k**.**(**.MyClassB, ***, ..., Int64)
obf-layout pro.zoo.koo.MyClassA.myfunc(pro.zoo.koo.MyClassB, Int64, Int32, Int64, ...)
obf-cf-bogus pro.zoo.koo.***.myfunc(..., Int32, Int64)
obf-cf-flatten pro.zoo.koo.***.myfunc()
obf-string pro.zoo.koo.**myfunc(***)
obf-const pro.zoo.koo.**myfunc(...)
obf-cf-bogus pro.zoo.koo.**myfunc()
obf-const pro.zoo.koo.**myfunc()
obf-layout pro.z**.o*c()
obf-cf-flatten pro.zoo.koo**myfunc()
obf-obf-const pro.**.z*o*m*c()
obf-cf-bogus pro*0.**.a*b*c*d()
obf-const pro*0.**.a??*c*d()
obf-layout pro*0.**.a*b*c*d()
obf-layout pro0(aaa, ?*, *-*)
obf-cf-bogus *.A.<<(...)
obf-cf-bogus default.Base.()(Float64)
obf-cf-bogus *.A.<<(...)
obf-cf-bogus default.Base.()(Float64)