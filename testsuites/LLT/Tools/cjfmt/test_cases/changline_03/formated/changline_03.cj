// Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
// This source file is part of the Cangjie project, licensed under Apache-2.0
// with Runtime Library Exception.
//
// See https://cangjie-lang.cn/pages/LICENSE for license information.

// test case 1
let x = Tensor(
    [1.0f32, 2.0f32, 3.0f32, 4.0f32, 5.0f32, 6.0f32, 7.0f32, 8.0f32, 9.0f32, 1.0f32, 2.0f32, 3.0f32, 4.0f32, 5.0f32,
        6.0f32, 7.0f32, 8.0f32, 9.0f32, 1.0f32, 2.0f32, 3.0f32, 4.0f32, 5.0f32, 6.0f32, 7.0f32, 8.0f32, 9.0f32],
    shape: [3, 3, 3])
let x = Tensor(
    [1.0f32, 2.0f32, 3.0f32, 4.0f32, 5.0f32, 6.0f32, 7.0f32, 8.0f32, 9.0f32, 1.0f32, 2.0f32, 3.0f32, 4.0f32, 5.0f32,
        6.0f32, 7.0f32, 8.0f32, 9.0f32, 1.0f32, 2.0f32, 3.0f32, 4.0f32, 5.0f32, 6.0f32, 7.0f32, 8.0f32, 9.0f32],
    shape: [3, 3, 3])

// test case 2
let x = parameter(Tensor([-178.0730743408f32, -125.8694152832f32, -13.1253213882f32, -64.0065612793f32], shape: [2, 2]),
    "x")
let x = parameter(Tensor([-178.0730743408f32, -125.8694152832f32, -13.1253213882f32, -64.0065612793f32], shape: [2, 2]),
    "x")

// test case 3
let x = parameter(Tensor([-233.6013336182f32, -166.4370422363f32, -264.0430297852f32, -100.0823135376f32], shape: [2, 2]),
    "x")
let y = parameter(Tensor([-96.0830841064f32, -204.3753814697f32, -51.6355972290f32, -98.7397003174f32], shape: [2, 2]),
    "y")
let x = parameter(Tensor([-233.6013336182f32, -166.4370422363f32, -264.0430297852f32, -100.0823135376f32], shape: [2, 2]),
    "x")
let y = parameter(Tensor([-96.0830841064f32, -204.3753814697f32, -51.6355972290f32, -98.7397003174f32], shape: [2, 2]),
    "y")

// test case 4
let input = Tensor(
    [-0.00379059f32, -0.00749117f32, 0.00654396f32, 0.00295572f32, 0.00235576f32, -0.0118451f32, -0.00893178f32,
        0.00429676f32], shape: [1, 1, 2, 4])
let input = Tensor(
    [-0.00379059f32, -0.00749117f32, 0.00654396f32, 0.00295572f32, 0.00235576f32, -0.0118451f32, -0.00893178f32,
        0.00429676f32], shape: [1, 1, 2, 4])

// test case 5
let x = parameter(
    Tensor([0.3f32, 0.6f32, 0.6f32, 0.4f32, 0.3f32, 0.9f32, 0.9f32, 0.4f32, 0.2f32, 0.9f32, 0.9f32, 0.1f32],
        shape: [2, 2, 3]), "x")
let x = parameter(
    Tensor([0.3f32, 0.6f32, 0.6f32, 0.4f32, 0.3f32, 0.9f32, 0.9f32, 0.4f32, 0.2f32, 0.9f32, 0.9f32, 0.1f32],
        shape: [2, 2, 3]), "x")

// test case 6
let x = parameter(Tensor([-11.0726070404f32, -2.7946569920f32, -47.6111984253f32, -186.2480163574f32], shape: [2, 2]),
    "x")
let x = parameter(Tensor([-11.0726070404f32, -2.7946569920f32, -47.6111984253f32, -186.2480163574f32], shape: [2, 2]),
    "x")

// test case 7
let x = Tensor(
    [1.0f32, 2.0f32, 3.0f32, 4.0f32, 5.0f32, 6.0f32, 7.0f32, 8.0f32, 9.0f32, 10.0f32, 11.0f32, 12.0f32, 13.0f32, 14.0f32,
        15.0f32, 16.0f32], shape: [8, 2])
let x = Tensor(
    [1.0f32, 2.0f32, 3.0f32, 4.0f32, 5.0f32, 6.0f32, 7.0f32, 8.0f32, 9.0f32, 10.0f32, 11.0f32, 12.0f32, 13.0f32, 14.0f32,
        15.0f32, 16.0f32], shape: [8, 2])

// test case 8
let input1 = Tensor([0.5965690017f32, 0.7835913897f32, 0.3291122615f32, 0.7661116719f32, 0.5438582897f32,
    0.0798860192f32], shape: [3, 2])
let input2 = Tensor([0.0275930110f32, 0.7529847026f32, 0.4509352744f32, 0.1639176756f32, 0.2969887257f32,
    0.4561915398f32], shape: [3, 2])
let input1 = Tensor([0.5965690017f32, 0.7835913897f32, 0.3291122615f32, 0.7661116719f32, 0.5438582897f32,
    0.0798860192f32], shape: [3, 2])
let input2 = Tensor([0.0275930110f32, 0.7529847026f32, 0.4509352744f32, 0.1639176756f32, 0.2969887257f32,
    0.4561915398f32], shape: [3, 2])

// test case 9
let x = parameter(
    Tensor([-133.8271636963f32, 134.3088836670f32, -176.9140930176f32, 16.7510051727f32, 19.5274810791f32], shape: [5]),
    "x")
let x = parameter(
    Tensor([-133.8271636963f32, 134.3088836670f32, -176.9140930176f32, 16.7510051727f32, 19.5274810791f32], shape: [5]),
    "x")

// test case 10
let x = parameter(
    Tensor([-189.5108184814f32, -213.9907989502f32, -129.7547760010f32, -256.0727233887f32, 53.2714538574f32],
        shape: [1, 5]), "x")
let y = parameter(
    Tensor([-95.8178634644f32, 19.0195846558f32, 65.1648788452f32, -160.8015136719f32, -76.9250640869f32], shape: [1, 5]),
    "y")
let x = parameter(
    Tensor([-189.5108184814f32, -213.9907989502f32, -129.7547760010f32, -256.0727233887f32, 53.2714538574f32],
        shape: [1, 5]), "x")
let y = parameter(
    Tensor(
        [-95.8178634644f32, 19.0195846558f32, 65.1648788452f32, -160.8015136719f32, -76.9250640869f32],
        shape: [1, 5]
    ),
    "y"
)

// test case 11
let x = parameter(
    Tensor([1.5246382952f32, -61.6349449158f32, -30.6520633698f32, -30.2967433929f32, -283.8182678223f32], shape: [1, 5]),
    "x")
let x = parameter(
    Tensor(
        [1.5246382952f32, -61.6349449158f32, -30.6520633698f32, -30.2967433929f32, -283.8182678223f32],
        shape: [1, 5]
    ),
    "x"
)

// test case 12
let input = parameter(
    Tensor(
        [-6.0000000000f32, -5.0000000000f32, -4.0000000000f32, -3.0000000000f32, -2.0000000000f32, -1.0000000000f32,
            0.0000000000f32, 1.0000000000f32, 2.0000000000f32, 3.0000000000f32, 4.0000000000f32, 5.0000000000f32],
        shape: [2, 3, 2]), "x")
let input = parameter(
    Tensor(
        [-6.0000000000f32, -5.0000000000f32, -4.0000000000f32, -3.0000000000f32, -2.0000000000f32, -1.0000000000f32,
            0.0000000000f32, 1.0000000000f32, 2.0000000000f32, 3.0000000000f32, 4.0000000000f32, 5.0000000000f32],
        shape: [2, 3, 2]), "x")

// test case 13
let x = Tensor([-0.9895743132f32, -2.3158619404f32, -1.8102313280f32, 0.3145818710f32, -2.8364603519f32,
    -0.1768671125f32], shape: [2, 3, 1, 1])
let x = Tensor([-0.9895743132f32, -2.3158619404f32, -1.8102313280f32, 0.3145818710f32, -2.8364603519f32,
    -0.1768671125f32], shape: [2, 3, 1, 1])

//test case 14
let x = parameter(Tensor([-81.2111434937f32, -117.9023818970f32, 209.5803375244f32, -161.2210693359f32], shape: [2, 2]),
    "x")
let x = parameter(Tensor([-81.2111434937f32, -117.9023818970f32, 209.5803375244f32, -161.2210693359f32], shape: [2, 2]),
    "x")

// test case 15
let input = Tensor([-0.5889578462f32, 0.6572893858f32, 0.9656294584f32, 0.8302891254f32, -0.4508400559f32,
    0.1614982486f32], shape: [3, 2])
let input = Tensor([-0.5889578462f32, 0.6572893858f32, 0.9656294584f32, 0.8302891254f32, -0.4508400559f32,
    0.1614982486f32], shape: [3, 2])

// test case 16
let input = parameter(
    Tensor([0.0000000000f32, 0.0000000000f32, 0.0000000000f32, 1.0000000000f32, 1.0000000000f32, 1.0000000000f32],
        shape: [2, 3]), "input")
let updates = Tensor([1.0000000000f32, 1.0000000000f32, 1.0000000000f32, 2.0000000000f32, 2.0000000000f32,
    2.0000000000f32], shape: [1, 2, 3])
let input = parameter(
    Tensor([0.0000000000f32, 0.0000000000f32, 0.0000000000f32, 1.0000000000f32, 1.0000000000f32, 1.0000000000f32],
        shape: [2, 3]), "input")
let updates = Tensor([1.0000000000f32, 1.0000000000f32, 1.0000000000f32, 2.0000000000f32, 2.0000000000f32,
    2.0000000000f32], shape: [1, 2, 3])

// test case 17
let input_x = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input_x")
let updates = Tensor([2.0000000000f32, 1.2000000477f32, 1.0000000000f32, 3.0000000000f32, 1.2000000477f32,
    1.0000000000f32], shape: [2, 3])
let input_x = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input_x")
let updates = Tensor([2.0000000000f32, 1.2000000477f32, 1.0000000000f32, 3.0000000000f32, 1.2000000477f32,
    1.0000000000f32], shape: [2, 3])

// test case 18
let input = parameter(Tensor([1.0000000000f32, 2.0000000000f32, 3.0000000000f32, 4.0000000000f32], shape: [1, 1, 2, 2]),
    "input")
let input = parameter(Tensor([1.0000000000f32, 2.0000000000f32, 3.0000000000f32, 4.0000000000f32], shape: [1, 1, 2, 2]),
    "input")

// test case 19
let input_params = Tensor(
    [1.0000000000f32, 2.0000000000f32, 7.0000000000f32, 42.0000000000f32, 3.0000000000f32, 4.0000000000f32,
        54.0000000000f32, 22.0000000000f32, 2.0000000000f32, 2.0000000000f32, 55.0000000000f32, 3.0000000000f32],
    shape: [3, 4])
let input_params = Tensor(
    [1.0000000000f32, 2.0000000000f32, 7.0000000000f32, 42.0000000000f32, 3.0000000000f32, 4.0000000000f32,
        54.0000000000f32, 22.0000000000f32, 2.0000000000f32, 2.0000000000f32, 55.0000000000f32, 3.0000000000f32],
    shape: [3, 4])

// test case 20
let input = parameter(
    Tensor(
        [0.5003513098f32, -0.3798691332f32, -0.3341046572f32, 0.7740871310f32, 0.2986998260f32, 0.7112543583f32,
            -0.8665986061f32, 0.5443865657f32, -0.9524301291f32, -0.4871452749f32, 0.6529405713f32, 0.8801626563f32],
        shape: [1, 3, 2, 2]), "input")
let input = parameter(
    Tensor(
        [0.5003513098f32, -0.3798691332f32, -0.3341046572f32, 0.7740871310f32, 0.2986998260f32, 0.7112543583f32,
            -0.8665986061f32, 0.5443865657f32, -0.9524301291f32, -0.4871452749f32, 0.6529405713f32, 0.8801626563f32],
        shape: [1, 3, 2, 2]), "input")

// test case 21
let input = parameter(
    Tensor(
        [1.0000000000f32, 2.0000000000f32, 3.0000000000f32, 4.0000000000f32, 5.0000000000f32, 1.0000000000f32,
            2.0000000000f32, 3.0000000000f32, 4.0000000000f32, 5.0000000000f32], shape: [1, 1, 2, 5]), "input")
let input = parameter(
    Tensor(
        [1.0000000000f32, 2.0000000000f32, 3.0000000000f32, 4.0000000000f32, 5.0000000000f32, 1.0000000000f32,
            2.0000000000f32, 3.0000000000f32, 4.0000000000f32, 5.0000000000f32], shape: [1, 1, 2, 5]), "input")

// test case 22
let x = parameter(
    Tensor([-0.6458890438f32, -0.5430433154f32, -0.4407467842f32, -0.4004685581f32, 0.6915576458f32], shape: [5]), "x")
let accum = parameter(
    Tensor([0.1707346588f32, 0.1966998577f32, -0.9218196869f32, 0.8483691812f32, 0.8923599124f32], shape: [5]), "accum")
let linear = parameter(
    Tensor([-0.4502078593f32, 0.2068482637f32, -0.2828353047f32, 0.6220275760f32, 0.3832996786f32], shape: [5]),
    "linear")
let gradOut = Tensor([0.5018641949f32, 0.5371343493f32, 0.8976003528f32, 0.6669725180f32, -0.7595016956f32], shape: [5])
let x = parameter(
    Tensor([-0.6458890438f32, -0.5430433154f32, -0.4407467842f32, -0.4004685581f32, 0.6915576458f32], shape: [5]), "x")
let accum = parameter(
    Tensor([0.1707346588f32, 0.1966998577f32, -0.9218196869f32, 0.8483691812f32, 0.8923599124f32], shape: [5]), "accum")
let linear = parameter(
    Tensor([-0.4502078593f32, 0.2068482637f32, -0.2828353047f32, 0.6220275760f32, 0.3832996786f32], shape: [5]),
    "linear")
let gradOut = Tensor([0.5018641949f32, 0.5371343493f32, 0.8976003528f32, 0.6669725180f32, -0.7595016956f32], shape: [5])

// test case 23
let input = parameter(
    Tensor(
        [1.0000000000f32, 2.0000000000f32, 3.0000000000f32, 4.0000000000f32, 5.0000000000f32, 6.0000000000f32,
            7.0000000000f32, 8.0000000000f32], shape: [8]), "input_x")
let updates = parameter(Tensor([6.0000000000f32, 7.0000000000f32, 8.0000000000f32, 9.0000000000f32], shape: [4]),
    "updates")
let input = parameter(
    Tensor(
        [1.0000000000f32, 2.0000000000f32, 3.0000000000f32, 4.0000000000f32, 5.0000000000f32, 6.0000000000f32,
            7.0000000000f32, 8.0000000000f32], shape: [8]), "input_x")
let updates = parameter(Tensor([6.0000000000f32, 7.0000000000f32, 8.0000000000f32, 9.0000000000f32], shape: [4]),
    "updates")

// test case 24
let input = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input")
let input = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input")

// test case 25
let input_x = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input_x")
let input_x = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input_x")

// test case 26
let input_x = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input_x")
let input_x = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input_x")

// test case 27
let input_x = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input_x")
let input_x = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input_x")

// test case 28
let input_x = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input_x")
let input_x = parameter(
    Tensor([-0.1000000015f32, 0.3000000119f32, 3.5999999046f32, 0.4000000060f32, 0.5000000000f32, -3.2000000477f32],
        shape: [2, 3]), "input_x")
