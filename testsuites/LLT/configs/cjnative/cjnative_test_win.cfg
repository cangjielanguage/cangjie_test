# Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
# This source file is part of the Cangjie project, licensed under Apache-2.0
# with Runtime Library Exception.
#
# See https://cangjie-lang.cn/pages/LICENSE for license information.

[root]
  path = ../../
[suffix]
  cj = //
[condition]
condition =
  CJNATIVE
  x86
  Windows
[internal-var]
  core_cmp_opt = %%cmp_opt_chir2hlir

  compiler = cjc.exe -j1
  frontendCompiler = cjc-frontend -j1
  disInst =
  clang = clang.exe --target=x86_64-windows-gnu
  clang_opt = -c
  clang_cmp_opt = --rtlib=compiler-rt -lstdc++ -ldl -fno-omit-frame-pointer
  typecheck = --output-type=staticlib
  dump-parse =
  dump-ast =
  dump-symbols =
  dump-ir =
  disableCodegen = 
  overflowOpt = --int-overflow wrapping
  enableO2 = -O2
  enableCompileDebug = -g
  noColor = --diagnostic-format=noColor
  llvmLibPath = %%CANGJIE_HOME%%\\third_party\\llvm\\lib
  llvmDissembler = set PATH=%%CANGJIE_HOME%%\\third_party\llvm\lib;%%PATH%% && %%CANGJIE_HOME%%\third_party\llvm\bin\llvm-dis

  disableReflection = --disable-reflection
  disableAPC = --apc=1
  stack_trace_format = --stack-trace-format
  conditional_compilation_config_opt = --cfg
  noStackInfo =
  debugCHIROpt =

  disableSemaVic =

  chilDebugFileDIR = %%n\_CHIRDebug
  chilDebugFileExt = chirdebug

  dumpCHIRDebug =

  disableBackendOpt = --disable-backend-opt

  incrementalCompile = --incremental-compile
  cachePath = .\.cached\

  enableConstEvalDebug = --interp-const-eval-debug
  enableConstPropagation = --fchir-constant-propagation
  disableConstPropagation = --fno-chir-constant-propagation
  enableFuncInlining = --fchir-function-inlining

  enableDevirtualization = --fchir-devirtualization

  enableRedundantAssignRemoval = -O2

  cmp_opt_chir2hlir = --error-count-limit=all

  mod_name_opt = --module-name
  pkg_opt = --package
  verbose_opt = --verbose
  coverage_opt = --coverage
  trimpath_opt = --trimpath
  import_path_opt = --import-path
  save_temps_opt = --save-temps
  int_overflow_opt = --int-overflow
  error_count_limit_opt = --error-count-limit
  output_dir_opt = --output-dir
  output_opt = --output
  compile_exe_opt =
  compile_lib_opt = --output-type=staticlib
  lib_extension = a
  compile_shared_lib_opt = --output-type=dylib
  experimental_opt = --experimental

  # Optimization
  optimization_level_2 = -O2
  enableChir2RGetOrThrowE = --enable-chir-redundant-getorthrow-elimination

  error_count_limit_max = --error-count-limit=10000
  error_count_limit_all = --error-count-limit=all

  output = %%n.%%suffix
  suffix = exe
  dylib_suffix  = dll
  realOut = real.exe
  run_args =
  run_opt =
  run =
  cffi-link = -L . -l %%n
  pyffi-link =
  sync-link =
  libversion = windows_x86_64_cjnative
  libdir = %%CANGJIE_HOME%%\modules\windows_x86_64_cjnative
  tool_path = %%CANGJIE_HOME%%\tools\bin

  clang_shared_opt = -shared
  backend_pic =
  ast_lib_opt = -l cangjie-std-ast
  clang_args = -no-pie
  middle = o
  stdc++_opt =

  stdx-package = -L %%CANGJIE_HOME%%\lib\windows_x86_64_cjnative\

  import-cangjie-stdx = -L %%CANGJIE_STDX_PATH%% -lstdx.aspectCJ -lstdx.unittest.data -lstdx.unittest -lstdx.encoding.json -lstdx.serialization.serialization -lstdx.serialization  -lstdx.net.http -lstdx.net.tls -lstdx.net -lstdx.logger -lstdx.log -lstdx.encoding.url -lstdx.encoding.json.stream -lstdx.crypto.keys -lstdx.crypto.x509 -lstdx.encoding.hex -lstdx.encoding.base64 -lstdx.encoding -lstdx.crypto.crypto -lstdx.crypto.digest -lcrypt32 -lstdx.crypto -lstdx.compress.zlib -lstdx.compress -lstdx  %%cangjie-stdx-import-path
  set_stdx_path = set PATH=%%CANGJIE_STDX_PATH%%;%%PATH%% &&
  cangjie-stdx-import-path = --import-path  %%CANGJIE_STDX_PATH%%

  libllvm = %%CANGJIE_HOME%%\lib\windows_x86_64_cjnative
  link-core = -lcangjie-std-core
  main = .\\main.exe

  # macro cfg
  cmp_macro = --error-count-limit=all --compile-macro
  macro_lib = 
  macro_parallel = --parallel-macro-expansion
  run_macro = set PATH=%%pwd;%%PATH%% &&
  ulimit-error = --error-count-limit=all
  macro_debug = --debug-macro
  backend = --backend
  #c ffi
  cffi_output = lib%%n.dll
  cffi_runtime_link = -I%%CANGJIE_HOME%%\\include -L %%CANGJIE_HOME%%\\runtime\\lib\\windows_x86_64_cjnative\\ -lcangjie-runtime -lstdc++ -fno-omit-frame-pointer
  cffi_std_link = -lstdc++
  pwd_to_ld_path = set PATH=%%pwd;%%PATH%%&&

  cmp_opt = --error-count-limit=10000 --diagnostic-format=noColor
  front_cmp_opt = --error-count-limit=10000 --diagnostic-format=noColor
  diag_json = --diagnostic-format=json
  # cross-compile
  target = --target
  toolchain = --toolchain
  sysroot = --sysroot
  host_arch = x86_64
  host_os = windows
  host_env = gnu

  # std/libs/unittest
  cmp_utest_opt = --test
  run_utest_opt = %%utest_no_progress
  utest_no_progress = --no-progress

  # platform-dependent commands
  diff = fc
  rmfile = del /f
  rmdir = del /f /s /q
  redirectNull = nul
  touch = cd . >
  move = move
  mkdir = mkdir
  cpfile = copy
  cpdir = xcopy /e /s /i /q /y /h
  cat = type
  lnfile = mklink
  lndir = mklink /d
  ls = chcp 65001 && dir /b
  ldd = objdump -p
  # In order to make %pwd -> %cd% correctly parsed, "cd" has to be declared before "pwd".
  # Otherwise, %cd% will be wrongly substituted by %cd -> cd (%pwd -> %cd% -> cd%)
  cd = cd
  pwd = %%cd%%
  python = python
  grep = findstr
  chmod = %%chmod%%
[description]
  title = cangjie_cjnative_test_win
[env]
  PATH=.\\;%%PATH%%
