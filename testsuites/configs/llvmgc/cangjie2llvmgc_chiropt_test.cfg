[root]
  path = ../../
[suffix]
  cj = //
[internal-var]
  compiler = cjc
  cmp_opt = -ulimit-error -chir-vic off -select-chir-opt const_folding,const_propagation,letc_folding,ref_folding,devirtualization,redundant_returns
  frontend = -frontend
  typecheck = -typecheck
  dump-parse = -frontend -dump-parse
  enableAD = -enable-ad
  backendjs = -backend js
  mod_opt = -module
  pkg_opt = -package
  output = %%n%%suffix
  suffix = .out
  main = main
  run = export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH &&
  run_macro = export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH &&
  run_opt =
  run_args =
  clang = clang
  llvm = -backend llvm
  closebuf = stdbuf -o0 -e0
  libdir = $CANGJIE_HOME/modules/linux_x86_64_llvm/
  ls = ls
  chirvic = -chir-vic
  copycharjs = ls
  middle = o
  cffi_output = lib%%n.so
  clang_opt = -shared -fPIC
  cffi_opt = %%n.o %%n.cj
  ffic_opt = -ld-options="-lcangjie-ffic -L. -l%%n" %%n.cj
  use_ast = -ld-options="-lcangjie-ast"
  pic_opt = -shared -o libcangjiemacro.so
  macro_lib_opt = -ld-options="-lcangjie-ast -L./ -lcangjiemacro"
  append_opt = -shared -o libappend.so
  append_pic_opt = -ld-options="-L./ -lappend -shared" -o  libcangjiemacro.so
  enable_macro =
  append_macro_lib_opt =
  output_pkg = pkg.o
  compile_pkg = pkg.o
  sync-link = -ld-options=" -L./ -lcangjie-sync"
  pkg_compile = -shared -ld-options="-lcangjie-ffic  -L. -lc_ffi"
  pkg_link = -ld-options="-lcangjie-ffic  -L. -lc_ffi -lpkg"
  pkg_run =

  # stdx cfg
  stdx_cmp_opt = -backend llvm
  stdx_run_args =
  stdx_run_opt =
  stdx_run =
  javac = javac
  enableST = -enable-state-threading
  dump-ir = -frontend -dump-ir
  mpl = -frontend -backend mpl
  hlir = -backend hlir
  jsbackend = -backend js
  pandabackend = -frontend -backend panda
  core-link = -lcangjiecore
  ffiC-link = -L%%stdx-package/stdx -L$CANGJIE_HOME/lib -lcangjie-ffic
  stdx-sync-link = -lcangjie-sync
  # generate .s from maple mpl and binary mplt files
  gen_mpl = %%maple --run=mplipa:me:mpl2mpl:mplcg --option=%%gen_mpl_args --save-temps --infile
  gen_mpl_args ="--effectipa:--enable-ea:-O2 --regnativefunc --maplelinker:-O2 --no-pie --verbose-asm --gen-c-macro-def --maplelinker --fpic"
  # some object files used.
  mrt_module_init_object = $MAPLE_PRODUCT_OUT/maple_arm64/lib/mrt_module_init.o
  maple = $MAPLE_PRODUCT_OUT/maple_arm64/bin/maple
  lds = $MAPLE_PRODUCT_OUT/maple_arm64/lib/linker/maplelld.so.lds
  # run maple .so
  qemu_run = $MAPLE_PRODUCT_OUT/maple_arm64/bin/qemu_run normal -args=noargs -opt=O2
  # backend link options for metaprogramming.
  mtp_opt =
  libcj_opt = -ld-options="$CANGJIE_HOME/lib/libcangjie.a"
  python = python
  stdx-package = -L $CANGJIE_HOME/lib/linux_x86_64_llvm
  link-convert = -lcangjie-convert
  link-log =  -lcangjie-log
  link-io =  -lcangjie-io
  link-os =  -lcangjie-os
  link-collection =  -lcangjie-collection
  link-serialization =  -lcangjie-serialization
  link-time =  -lcangjie-time
  link-math =  -lcangjie-math
  link-format =  -lcangjie-format
  link-util =  -lcangjie-util
  link-net =  -lcangjie-net
  link-ffiC =  -lcangjie-ffic
  link-unicode =  -lcangjie-unicode
  # stdx cfg end
[description]
  title = Cangjie2llvmgc_chiropt Test
