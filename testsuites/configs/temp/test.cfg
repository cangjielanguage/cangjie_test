[root]
  path = ../../
[suffix]
  cj = //
[internal-var]
  compiler = cjc
  cmp_opt = -ulimit-error
  frontend = -frontend
  typecheck = -typecheck
  dump-parse = -frontend -dump-parse
  enableAD = -enable-ad
  backendjs = -backend js
  mod_opt = -module
  pkg_opt = -package
  output = %%n.%%suffix
  middle = o
  suffix = out
  main = main
  run =
  run_opt =
  run_args =
  clang = clang
  copycharjs = ls
  llvm = -backend llvm
  chirvic = -chir-vic
  closebuf = stdbuf -o0 -e0
  enable_macro =
  llvm_attach =
  mv_or_ls = ls
  cur_dir =
  run_macro =
  use_ast = -backend-options="-lcangjie-ast"
  use_pic_ast = -backend-options="-fPIC -lcangjie-ast"
  backend_pic = -backend-options="-fPIC"
  pic_opt = -c -backend-options="-fPIC" -o define.o
  macro_lib_opt = -backend-options="-lcangjie-ast" ./define.o
  append_opt = -c -backend-options="-fPIC" -o append.o
  append_pic_opt = -c -backend-options="-fPIC" -o define.o
  append_macro_lib_opt = -backend-options="-lcangjie-ast" ./append.o ./define.o
  libdir = $CANGJIE_HOME/modules/linux_x86_64_llvm/
  ls = ls

  javac = javac
  enableST = -enable-state-threading
  dump-ir = -frontend -dump-ir
  mpl = -frontend -backend mpl
  hlir = -backend hlir
  jsbackend = -backend js
  pandabackend = -frontend -backend panda
  stdx_cmp_opt = -backend llvm
  core-link = -lcangjiecore
  ffiC-link = -L%%libdir/stdx -L$CANGJIE_HOME/lib -lcangjie-ffic
  sync-link = -lcangjie-sync
  # generate .s from maple mpl and binary mplt files
  gen_mpl = %%maple --run=mplipa:me:mpl2mpl:mplcg --option=%%gen_mpl_args --save-temps --infile
  gen_mpl_args ="--effectipa:--enable-ea:-O2 --regnativefunc --maplelinker:-O2 --no-pie --verbose-asm --gen-c-macro-def --maplelinker --fpic"
  # some object files used.
  mrt_module_init_object = $MAPLE_PRODUCT_OUT/maple_arm64/lib/mrt_module_init.o
  maple = $MAPLE_PRODUCT_OUT/maple_arm64/bin/maple
  lds = $MAPLE_PRODUCT_OUT/maple_arm64/lib/linker/maplelld.so.lds
  # run maple .so
  qemu_run = $MAPLE_PRODUCT_OUT/maple_arm64/bin/qemu_run normal -args=noargs -opt=O2
  # backend link options for metaprogramming.
  mtp_opt =
  libcj_opt = -backend-options="$CANGJIE_HOME/lib/libcangjie.a"
  python = python
  link-convert = -L $CANGJIE_HOME/lib -lcangjie-convert
  link-log = -L $CANGJIE_HOME/lib -lcangjie-log
  link-io = -L $CANGJIE_HOME/lib -lcangjie-io
  link-os = -L $CANGJIE_HOME/lib -lcangjie-os
  link-collection = -L $CANGJIE_HOME/lib -lcangjie-collection
  link-serialization = -L $CANGJIE_HOME/lib -lcangjie-serialization
  link-time = -L $CANGJIE_HOME/lib -lcangjie-time
  link-math = -L $CANGJIE_HOME/lib -lcangjie-math
  link-format = -L $CANGJIE_HOME/lib -lcangjie-format
  link-util = -L $CANGJIE_HOME/lib -lcangjie-util
  link-unicode = -L $CANGJIE_HOME/lib -lcangjie-unicode

  clang_opt = -shared -fPIC

[description]
  title = Char Test
