// DEPENDENCE: p1
// EXEC: %compiler %cmp_opt -c ./p1/*.cj -o p1.%middle
// EXEC: %compiler %cmp_opt p1.%middle %f -o %output
// EXEC: %run %run_opt %output %run_args

import p1.A
import p1.B as Boo

func main(): Int64 {
    var a1 = A<Int32>()
    if ( A<Int32>.goo<Int64>(1) != 1 ){
        return 1
    }
    var a2 = Boo<Int32>(1)
    if ( Boo<Int32>.goo<Int32>(1) != 1 ){
        return 1
    }
    return 0
}

extend A<T> {
    static func goo<V>(x:V){return x}
}

extend Boo<T> <: I<T>{
}

interface I<T> {
    static func goo<T>(x:T){return x}
}
