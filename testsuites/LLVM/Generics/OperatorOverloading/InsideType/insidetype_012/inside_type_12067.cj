// EXEC: %compiler %cmp_opt %f -o %output
// EXEC: %run %run_opt %output %run_args



class A<X,Y> where X <: AddInt64<X>, X <: Comparable<X>, X <: Equatable<X>{
    //operator func ~(a:A<X,Range<X>>):Bool {true}
    //operator func !(a:A<X,Range<X>>):Bool {true}
    //operator func +(a:A<X,Range<X>>):Bool {true}
    //operator func -(a:A<X,Range<X>>):Bool {true}
    /*
    operator func ++(a:A<X,Range<X>>):Bool {true}
    operator func --(a:A<X,Range<X>>):Bool {true}
    */
    operator func [](b:A<X,Range<X>>):Bool {true}
// operator ** is illegal
    operator func *(b:A<X,Range<X>>):Bool  {true}
    operator func /(b:A<X,Range<X>>):Bool  {true}
    operator func %(b:A<X,Range<X>>):Bool  {true}
// operator *& is illegal
    operator func +(b:A<X,Range<X>>):Bool  {true}
    operator func -(b:A<X,Range<X>>):Bool  {true}
    operator func <<(b:A<X,Range<X>>):Bool {true}
    operator func >>(b:A<X,Range<X>>):Bool {true}
    operator func <(b:A<X,Range<X>>):Bool  {true}
    operator func <=(b:A<X,Range<X>>):Bool {true}
    operator func >(b:A<X,Range<X>>):Bool  {true}
    operator func >=(b:A<X,Range<X>>):Bool {true}
    operator func ==(b:A<X,Range<X>>):Bool {true}
    operator func !=(b:A<X,Range<X>>):Bool {true}
    operator func &(b:A<X,Range<X>>):Bool  {true}
    operator func ^(b:A<X,Range<X>>):Bool  {true}
    operator func |(b:A<X,Range<X>>):Bool  {true}
//     operator func ^^(b:A<X,Range<X>>):Bool {true}
// operator +& is illegal
// operator -& is illegal
}



func main(): Int64 {
    var a : A<Int32,Range<Int32>> = A<Int32,Range<Int32>>()
    var b : A<Int32,Range<Int32>> = A<Int32,Range<Int32>>()
    if (!(b[a])) {
        return 1
    }
    if (!(true)) {
        return 8
    }
    if (!(b*a)) {
        return 9
    }
    if (!(b/a)) {
        return 10
    }
    if (!(b%a)) {
        return 11
    }
    if (!(true)) {
        return 12
    }
    if (!(b+a)) {
        return 13
    }
    if (!(b-a)) {
        return 14
    }
    if (!(true)) {
        return 15
    }
    if (!(true)) {
        return 16
    }
    if (!(b<<a)) {
        return 17
    }
    if (!(b>>a)) {
        return 18
    }
    if (!(b<a)) {
        return 19
    }
    if (!(b<=a)) {
        return 20
    }
    if (!(b>a)) {
        return 21
    }
    if (!(b>=a)) {
        return 22
    }
    if (!(b==a)) {
        return 23
    }
    if (!(b!=a)) {
        return 24
    }
    if (!(b&a)) {
        return 25
    }
    if (!(b^a)) {
        return 26
    }
    if (!(b|a)) {
        return 27
    }
    return 0
}
