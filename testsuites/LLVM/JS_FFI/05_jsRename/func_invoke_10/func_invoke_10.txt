 /*
 * -@TestCaseID: func_invoke_10
 * -@TestCaseName: func_invoke_10.cj
 * -@TestCaseType: Function Test
 * -@RequirementID: SR-Lang-1005
 * -@RequirementName: JS互操作
 * -@Conditon: cjc, clang, maple test framework and python3.
 * -@Brief: 仓颉通过jsMember,jsRename调用js中入参无和返回值为含function的类的函数
 * -#step1: js侧的全局函数,入参无,返回值为含成员函数的类,函数体为普通表达式,作为成员导出
 * -#step2: 仓颉侧@JsMember,@JsRename修饰top-level的函数,用@JavaScript修饰返回值类的函数，入参为无,返回值为含成员函数的类
 * -#step3: 定义Enum A，内含未static函数sa及bs
 * -#step4: sa返回函数的返回类返回step2的函数，函数bs返回类的返回值为step2函数的返回值，在main中通过A.sa()()、A.bs()调用
 * -@Expect: 编译通过.
 * -@Priority: level0
 * -@SpecVersion: spec 0.22.6
 * -@SpecChapter: @JsRename
 * -@SpecDetail: 1、仓颉侧Bool映射Js侧boolean 2、当 `JavaScript` 中的函数或变量作为包成员导出时可通过 `@JsMember` 注解来表示 3、函数的参数和返回值类型仅支持部分类型
 * -@SpecDetail: 4、@JavaScript 注解表示该 foreign 声明映射 JavaScript 对象（与其他外部对象区分）。所有用于表示外部JavaScript 声明的 foreign 语句都必须添加 @JavaScript 注解
 * -@SpecDetail: 5、当声明的函数或变量名称与仓颉语法冲突时（仓颉不支持的字符或关键字冲突等等）或者其他需要重命名的情况（省略 NameSpace 定义等）可以通过 `@JsRename` 注解来修改名称
 * -@catalog: # 语言互操作## JavaScript 互操作### 仓颉调用 JavaScript#### @JsRename--1
 * -@catalog: # 语言互操作## JavaScript 互操作### 类型映射#### 值类型映射--1
 * -@catalog: # 语言互操作## JavaScript 互操作### 仓颉调用 JavaScript#### @JsMember--1
 * -@catalog: # 语言互操作## JavaScript 互操作### 仓颉调用 JavaScript#### foreign 修饰符--6
 * -@catalog: # 语言互操作## JavaScript 互操作### 仓颉调用 JavaScript#### foreign 修饰符##### foreign 函数--5
 */


