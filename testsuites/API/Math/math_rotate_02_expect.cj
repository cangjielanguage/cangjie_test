// DEPENDENCE: caserunner.cj
// EXEC: %compiler %stdx_cmp_opt %f caserunner.cj -o %output
// EXEC: %stdx_run %stdx_run_opt %output %stdx_run_args | compare %f
// ASSERT: scan-not AssertionError
from std import math.*
//函数：func rotate(num: Int8, d: Int8):Int8
//函数功能：先判断d是不是一个正数，如果d是一个正数，功能就是把num的二进制表达式左移d位。如果d是一个负数，功能就是把num的二进制表达式右移d位。
//测试入参x范围是（-1，1）
//针对num是Int，经过该函数处理可能会修改正负号
func main() {
  //func rotate(num: Int8, d: Int8):Int8
  CaseRunner<Int8>().runCases(
      [
        //边界值
        //负数右移，正数左移
        (rotate(Int8(1),Int8(-1)),Int8(-128)),
        (rotate(Int8(0b00000001),Int8(-1)),Int8(-128)),
        //负数需要用二进制补码进行表示
        (rotate(Int8(-1),Int8(-1)),Int8(-64)),
        (rotate(Int8(0b11111111),Int8(-1)),Int8(-64)),

        (rotate(Int8(8),Int8(-1)),Int8(4)),
        (rotate(Int8(0b00001000),Int8(-1)),Int8(4)),

        (rotate(Int8(-8),Int8(-1)),Int8(68)),
        //<二进制结果：124>
        (rotate(Int8(0b11111000),Int8(-1)),Int8(68)),

        (rotate(Int8(2),Int8(1)),Int8(4)),
        (rotate(Int8(0b00000010),Int8(1)),Int8(4)),

        (rotate(Int8(-2),Int8(1)),Int8(5)),
        (rotate(Int8(0b11111110),Int8(1)),Int8(5)),

        (rotate(Int8(64),Int8(1)),Int8(-128)),
        (rotate(Int8(0b01000000),Int8(1)),Int8(-128)),

        (rotate(Int8(-64),Int8(1)),Int8(-1)),
        (rotate(Int8(0b11000000),Int8(1)),Int8(-1)),
        //特殊值
        //针对于Int8，num=-0，左移右移结果存在差异
        //num=0,左移右移都是0
        (rotate(Int8(0),Int8(-1)),Int8(0)),
        (rotate(Int8(0b00000000),Int8(-1)),Int8(0)),

        (rotate(Int8(0),Int8(1)),Int8(0)),
        (rotate(Int8(0b00000000),Int8(1)),Int8(0)),

        (rotate(Int8(-0),Int8(-1)),Int8(0)),
        (rotate(Int8(0b00000000),Int8(-1)),Int8(0)),

        (rotate(Int8(-0),Int8(1)),Int8(0)),
        (rotate(Int8(0b00000000),Int8(1)),Int8(0)),
        //特殊场景，
        //移动位数超过当前数字位数，循环移动
        (rotate(Int8(64),Int8(-9)),Int8(32)),
        (rotate(Int8(0b01000000),Int8(-9)),Int8(32)),

        (rotate(Int8(-64),Int8(-9)),Int8(96)),
        (rotate(Int8(0b11000000),Int8(-9)),Int8(96)),

        (rotate(Int8(64),Int8(9)),Int8(-128)),
        (rotate(Int8(0b01000000),Int8(9)),Int8(-128)),

        (rotate(Int8(-64),Int8(9)),Int8(-1)),
        (rotate(Int8(0b11000000),Int8(9)),Int8(-1))
      ],
    description: "test case 1"
  )
   //func rotate(num: Int16, d: Int16):Int16
  CaseRunner<Int16>().runCases(
      [
        //边界值
        //负数右移，正数左移
        (rotate(Int16(1),Int8(-1)),Int16(-32768)),
        (rotate(Int16(0b0000000000000001),Int8(-1)),Int16(-32768)),

        (rotate(Int16(-1),Int8(-1)),Int16(-16384)),
        (rotate(Int16(0b1111111111111111),Int8(-1)),Int16(-16384)),

        (rotate(Int16(8),Int8(-1)),Int16(4)),
        (rotate(Int16(0b0000000000001000),Int8(-1)),Int16(4)),

        (rotate(Int16(-8),Int8(-1)),Int16(16388)),
        (rotate(Int16(0b1111111111111000),Int8(-1)),Int16(16388)),

        (rotate(Int16(2),Int8(1)),Int16(4)),
        (rotate(Int16(0b0000000000000010),Int8(1)),Int16(4)),

        (rotate(Int16(-2),Int8(1)),Int16(5)),
        (rotate(Int16(0b1111111111111110),Int8(1)),Int16(5)),

        (rotate(Int16(32367),Int8(1)),Int16(-31966)),
        (rotate(Int16(0b0111111001101111),Int8(1)),Int16(-31966)),

        (rotate(Int16(-32367),Int8(1)),Int16(-31967)),
        (rotate(Int16(0b1000000110010001),Int8(1)),Int16(-31967)),

        //特殊值
        //针对于Int16，num=-0，左移右移结果存在差异
        //num=0,左移右移都是0
        (rotate(Int16(0),Int8(-1)),Int16(0)),
        (rotate(Int16(0b0000000000000000),Int8(-1)),Int16(0)),
        (rotate(Int16(0),Int8(1)),Int16(0)),
        (rotate(Int16(0b0000000000000000),Int8(1)),Int16(0)),
        //num=-0
        (rotate(Int16(-0),Int8(-1)),Int16(0)),
        (rotate(Int16(0b0000000000000000),Int8(-1)),Int16(0)),

        (rotate(Int16(-0),Int8(1)),Int16(0)),
        (rotate(Int16(0b0000000000000000),Int8(1)),Int16(0)),

        //特殊场景，
        //移动位数超过当前数字位数，循环移动
        (rotate(Int16(32367),Int8(-17)),Int16(-16183)),
        (rotate(Int16(0b0111111001101111),Int8(-17)),Int16(-16183)),

        (rotate(Int16(-32367),Int8(-17)),Int16(-32567)),
        (rotate(Int16(0b1000000110010001),Int8(-17)),Int16(-32567)),

        (rotate(Int16(32367),Int8(17)),Int16(-31966)),
        (rotate(Int16(0b0111111001101111),Int8(17)),Int16(-31966)),

        (rotate(Int16(-32367),Int8(17)),Int16(-31967)),
        (rotate(Int16(0b1000000110010001),Int8(17)),Int16(-31967))
      ],
    description: "test case 2"
  )
  CaseRunner<Int32>().runCases(
      [
         //边界值
        //负数右移，正数左移
        (rotate(Int32(1),Int8(-1)),Int32(-2147483648)),
        (rotate(Int32(0b00000000000000000000000000000001),Int8(-1)),Int32(-2147483648)),
        (rotate(Int32(-1),Int8(-1)),Int32(-1073741824)),
        (rotate(Int32(0b11111111111111111111111111111111),Int8(-1)),Int32(-1073741824)),

        (rotate(Int32(8),Int8(-1)),Int32(4)),
        (rotate(Int32(0b00000000000000000000000000001000),Int8(-1)),Int32(4)),
        (rotate(Int32(-8),Int8(-1)),Int32(1073741828)),
        (rotate(Int32(0b11111111111111111111111111111000),Int8(-1)),Int32(1073741828)),

        (rotate(Int32(2),Int8(1)),Int32(4)),
        (rotate(Int32(0b00000000000000000000000000000010),Int8(1)),Int32(4)),
        (rotate(Int32(-2),Int8(1)),Int32(5)),
        (rotate(Int32(0b11111111111111111111111111111110),Int8(1)),Int32(5)),

        (rotate(Int32(1073741824),Int8(1)),Int32(-2147483648)),
        (rotate(Int32(0b01000000000000000000000000000000),Int8(1)),Int32(-2147483648)),
        (rotate(Int32(-1073741824),Int8(1)),Int32(-1)),
        (rotate(Int32(0b11000000000000000000000000000000),Int8(1)),Int32(-1)),
        //特殊值
        //针对于Int32，num=-0，左移右移结果存在差异
        //num=0,左移右移都是0
        (rotate(Int32(0),Int8(-1)),Int32(0)),
        (rotate(Int32(0b00000000000000000000000000000000),Int8(-1)),Int32(0)),
        (rotate(Int32(0),Int8(1)),Int32(0)),
        (rotate(Int32(0b00000000000000000000000000000000),Int8(1)),Int32(0)),
        //num=-0
        (rotate(Int32(-0),Int8(-1)),Int32(0)),
        (rotate(Int32(0b00000000000000000000000000000000),Int8(-1)),Int32(0)),
        (rotate(Int32(-0),Int8(1)),Int32(0)),
        (rotate(Int32(0b00000000000000000000000000000000),Int8(1)),Int32(0)),
        //特殊场景，
        //移动位数超过当前数字位数，循环移动
        (rotate(Int32(1073741824),Int8(-33)),Int32(536870912)),
        (rotate(Int32(0b01000000000000000000000000000000),Int8(-33)),Int32(536870912)),
        (rotate(Int32(-1073741824),Int8(-33)),Int32(1610612736)),
        (rotate(Int32(0b11000000000000000000000000000000),Int8(-33)),Int32(1610612736)),

        (rotate(Int32(1073741824),Int8(33)),Int32(-2147483648)),
        (rotate(Int32(0b01000000000000000000000000000000),Int8(33)),Int32(-2147483648)),
        (rotate(Int32(-1073741824),Int8(33)),Int32(-1)),
        (rotate(Int32(0b11000000000000000000000000000000),Int8(33)),Int32(-1))
      ],
    description: "test case 3"
  )

  //func rotate(num: Int64, d: Int64):Int64
  CaseRunner<Int64>().runCases(
      [
        //边界值
        //负数右移，正数左移
        (rotate(Int64(1),Int8(-1)),Int64(-9223372036854775808)),
        (rotate(Int64(0b0000000000000000000000000000000000000000000000000000000000000001),Int8(-1)),Int64(-9223372036854775808)),

        (rotate(Int64(-1),Int8(-1)),Int64(-4611686018427387904)),
        (rotate(Int64(0b1111111111111111111111111111111111111111111111111111111111111111),Int8(-1)),Int64(-4611686018427387904)),

        (rotate(Int64(8),Int8(-1)),Int64(4)),
        (rotate(Int64(0b0000000000000000000000000000000000000000000000000000000000001000),Int8(-1)),Int64(4)),

        (rotate(Int64(-8),Int8(-1)),Int64(4611686018427387908)),
        (rotate(Int64(0b1111111111111111111111111111111111111111111111111111111111111000),Int8(-1)),Int64(4611686018427387908)),

        (rotate(Int64(2),Int8(1)),Int64(4)),
        (rotate(Int64(0b0000000000000000000000000000000000000000000000000000000000000010),Int8(1)),Int64(4)),

        (rotate(Int64(-2),Int8(1)),Int64(5)),
        (rotate(Int64(0b1111111111111111111111111111111111111111111111111111111111111110),Int8(1)),Int64(5)),

        (rotate(Int64(4611686018427387904),Int8(1)),Int64(-9223372036854775808)),
        (rotate(Int64(0b0100000000000000000000000000000000000000000000000000000000000000),Int8(1)),Int64(-9223372036854775808)),

        (rotate(Int64(-4611686018427387904),Int8(1)),Int64(-1)),
        (rotate(Int64(0b01100000000000000000000000000000000000000000000000000000000000000),Int8(1)),Int64(-1)),
        //特殊值
        //针对于Int64，num=0,左移右移都是0
        (rotate(Int64(0),Int8(-1)),Int64(0)),
        (rotate(Int64(0b0000000000000000000000000000000000000000000000000000000000000000),Int8(-1)),Int64(0)),

        (rotate(Int64(0),Int8(1)),Int64(0)),
        (rotate(Int64(0b0000000000000000000000000000000000000000000000000000000000000000),Int8(1)),Int64(0)),
        //num=-0
        (rotate(Int64(-0),Int8(-1)),Int64(0)),
        (rotate(Int64(0b0000000000000000000000000000000000000000000000000000000000000000),Int8(-1)),Int64(0)),

        (rotate(Int64(-0),Int8(1)),Int64(0)),
        (rotate(Int64(0b0000000000000000000000000000000000000000000000000000000000000000),Int8(1)),Int64(0)),
        //特殊场景，
        //移动位数超过当前数字位数，循环移动,即d=65等价于d=1,d=-65等价于-1
        (rotate(Int64(4611686018427387904),Int8(-65)),Int64(2305843009213693952)),
        (rotate(Int64(0b0100000000000000000000000000000000000000000000000000000000000000),Int8(-65)),Int64(2305843009213693952)),

        (rotate(Int64(-4611686018427387904),Int8(-65)),Int64(6917529027641081856)),
        (rotate(Int64(0b01100000000000000000000000000000000000000000000000000000000000000),Int8(-65)),Int64(6917529027641081856)),

        (rotate(Int64(4611686018427387904),Int8(65)),Int64(-9223372036854775808)),
        (rotate(Int64(0b0100000000000000000000000000000000000000000000000000000000000000),Int8(65)),Int64(-9223372036854775808)),

        (rotate(Int64(-4611686018427387904),Int8(65)),Int64(-1)),
        (rotate(Int64(0b01100000000000000000000000000000000000000000000000000000000000000),Int8(65)),Int64(-1))
      ],
    description: "test case 4"
  )
  return 0
}
