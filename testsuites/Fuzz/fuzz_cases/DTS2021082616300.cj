// EXEC-PIPE-1: %compiler %cmp_opt %f -o %output 2>&1 | compare %f
// ASSERT: regex-not core dumped
// ASSERT: regex-not stack trace

// random seed:1629777734455

// All global variable need to be defined before use!
internal let var97 : Unit = ()
internal let var103 : Option<Unit> = Option<Unit>.Some(var97)
internal var var114 : (String*Unit) = ("w_C^3e- ^V", ())
external var var126 : Bool = (Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>() is Range<UInt64>)
external var var145 : Bool = ((false as Unit) is String)
internal var var164 : List<Int64> = [56, 36, (-64), 24, 75]
external let var168 : Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64> = Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>()
external let var220 : String = "~~eIs\",QDp"
internal let var241 : Enum231<Char, Range<Int8>, Float64> = Enum231<Char, Range<Int8>, Float64>.defaultValue
external var var342 : (Range<Int64>*(Range<UInt8>*UInt64*List<Int64>*Range<UInt64>*UInt16)) = ((Int64(UInt8(157))..Int64(Float64(Float32(102.0))):(Int64(Int16(Int32(19)))|1)), ((UInt8(Int16(64))..=UInt8(213):(Int64(UInt8(38))|1)), UInt64(Float64(UInt8(240))), [(-128), 55, Int64(UInt32(204)), (-68), 54], (UInt64(168)..UInt64(222):(-3)|1), UInt16(45)))
internal let var376 : UInt8 = UInt8(244)
external var var404 : Interface25<Result<Int64>, List<Float64>, Range<UInt8>> = Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>()
external let var413 : Int64 = Int64(Int8(-30))
external let var447 : UInt16 = UInt16(UInt64(170))
external var var479 : List<Interface25<Result<Int64>, List<Float64>, Range<UInt8>>> = [Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>(), Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>(), Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>(), Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>(), Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>()]
external var var523 : List<String> = ["MEW@/ne_8T", "<QQf@#|}un", "+A3zl/;h4,", "b</XGBjL<m", "6YJwT_`w(v"]
external let var555 : Range<UInt64> = (UInt64(74)..=UInt64(96):(-96)|1)
internal var var587 : ((Range<Int32>*UInt32*UInt16*UInt32)*Char*Bool*UInt16*Range<UInt8>) = (((Int32(67)..=Int32(97.0):((-94)|1)), UInt32(93), UInt16(229), UInt32(Float32(58.0))), 't', true, UInt16(UInt32(231)), (UInt8(87)..UInt8(88):82|1))
internal let var606 : (Range<Int32>*UInt32*UInt16*UInt32) = ((Int32(12)..Int32(70):20|1), UInt32(32), UInt16(130), UInt32(163))
external let var631 : UInt32 = UInt32(UInt64(86.0))
external var var664 : (Range<UInt8>*UInt64*List<Int64>*Range<UInt64>*UInt16) = ((UInt8(UInt8(149))..=UInt8(0):((-47)|1)), UInt64(93), [79, (-99), (-112), (-85), Int64(UInt16(58))], (UInt64(UInt16(UInt8(65)))..UInt64(UInt32(0)):(85|1)), UInt16(UInt32(Int32(-84))))
internal let var708 : Int32 = Int32(69)
external var var791 : Unit = ()
func main(): Int64 {
    let var46 : Range<UInt64> = (UInt64(Int32(UInt32(UInt64(107))))..UInt64(51):(Int64(Int64(UInt64(171)))|1));
    let var58 : Bool = (Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>() is Interface25<Result<Int64>, List<Float64>, Range<UInt8>>);
    let var223 : Char = '3';
    let var257 : Enum231<Char, Range<Int8>, Float64> = Enum231<Char, Range<Int8>, Float64>.defaultValue;
    func func16<T0>(namedParam17 ! : Range<UInt8>, namedParam18 ! : Range<UInt8>, namedParam19 ! : Int8, namedParam20 ! : Unit) : List<Int64> { // block id: 21
        var var29 : Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64> = Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>();
        var var63 : UInt8 = UInt8(UInt8(159));
        (var29.func32("EvDu*5p9\\N", namedParam34 : var46)..if (var58) { // block id: 61
            var63
        } else { // block id: 66
            var63
        }:(85|1));
        ();
        let var207 : UInt32 = UInt32(181);
        let var270 : Int64 = 28;
        func func71<T0, T1>(namedParam72 ! : List<Int64>, namedParam73 ! : Bool, namedParam74 ! : Bool, namedParam75 ! : Range<Int8>) : List<Int64> { // block id: 76
            let var79 : Int64 = (-16);
            let var335 : Result<List<Int64>> = Result<List<Int64>>.Err(Exception());
            func func300<T0, T1>(optionalParam301 ! : UInt64 = UInt64(UInt16(215)), optionalParam304 ! : UInt16 = UInt16(Int16(-27)), namedParam307 ! : UInt8) : List<Int64> { // block id: 308
                (if (if (var126) { // block id: 318
                    var145;
                    true
                } else { // block id: 321
                    var var323 : Enum37 = Enum37.defaultValue;
                    var323;
                    true
                }) { // block id: 326
                    var var328 : Unit = ();
                    var328;
                    var328;
                    Result<List<Int64>>.Err(Exception())
                } else { // block id: 332
                    ();
                    var335
                } ?? var342[1][2])
            }
;
            [var79, func82(optionalParam83 : Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>(), namedParam89 : if (var126) { namedParam19 } else { Int8(-50) } ), match (var207) {
                case $var207 => 
                    namedParam20;
                    ();
                    124
                
                case _ => 
                    var220;
                    var223;
                    (-76)
                
                case _ => 
                    namedParam18;
                    (-106)
                
            }, match (match (namedParam18) {
                    case _ => 
                        namedParam20;
                        var220;
                        var241
                    
                    case _ : Range<UInt16> => 
                        ();
                        ();
                        Enum231<Char, Range<Int8>, Float64>.defaultValue
                    
                    case _ : UInt16 => 
                        Enum231<Char, Range<Int8>, Float64>.defaultValue
                    
                    case _ => 
                        'L';
                        var257
                    
                }) {
                case defaultValue => 
                    8
                
                case caseVar265 : UInt8 => 
                    Enum37.defaultValue;
                    Result<Bool>.Err(Exception());
                    var270
                
                case _ => 
                    var var278 : UInt8 = UInt8(161);
                    (UInt8(43)..var278:(var79|1));
                    (-56)
                
                case defaultValue => 
                    namedParam20;
                    (-7)
                
                case _ => 
                    ();
                    let var291 : Range<UInt32> = (UInt32(40)..UInt32(Int32(-14)):((-16)|1));
                    var291;
                    var270
                
            }, match (func300<Range<Int16>, List<Int32>>(optionalParam301 : UInt64(180), namedParam307 : var376)) {
                case _ => 
                    ();
                    ();
                    111
                
                case _ => 
                    var270;
                    ();
                    (-23)
                
                case _ => 
                    (-18)
                
                case _ => 
                    var270
                
            }]
        }
;
        func71<Unit, Range<Int32>>(namedParam72 : [var270, [(-22), (-123), (-15), 77, (-39)][3], func82(optionalParam83 : var404, namedParam89 : namedParam19), (Result<Int64>.Ok(var413) ?? var413), var404.func422()], namedParam73 : var126, namedParam74 : var58, namedParam75 : match (Enum37.defaultValue) {
            case defaultValue => 
                var var733 : List<Bool> = [false, ((UInt8(17)..=UInt8(127):39|1) is Result<List<Int64>>), ((((Int32(105)..=Int32(11):((-30)|1)), UInt32(143), UInt16(86), UInt32(171)), '0', (UInt32(55) is Range<UInt32>), UInt16(85), (UInt8(145)..UInt8(109):88|1)) is Range<Int8>), false, ((UInt64(210)..UInt64(32):(-106)|1) is Option<Unit>)];
                var733;
                namedParam20;
                (namedParam19..namedParam19:(var270|1))
            
            case _ => 
                (UInt8(50)..UInt8(77):(var413|1));
                (namedParam19..=namedParam19:(105|1))
            
            case defaultValue => 
                (Int8(70)..Int8(-75):(-27)|1)
            
            case _ => 
                (Int8(-96)..=Int8(6):22|1)
            
        })
    }
;
    var var788 : Int8 = Int8(102);
    func16<List<Bool>>(namedParam17 : (var376..=UInt8(224):((-13)|1)), namedParam18 : (var376..UInt8(113):((-33)|1)), namedParam19 : var788, namedParam20 : var791)[3]
    // CRC Check All Variables
    var crccheck = CrcCheck(5000, 32)
    crccheck.updateBuffer(UInt64(var788), 64)
    crccheck.updateBuffer(UInt64(var376), 64)
    crccheck.updateBuffer(UInt64(var413), 64)
    crccheck.updateBuffer(UInt64(var447), 64)
    crccheck.updateBuffer(UInt64(var631), 64)
    crccheck.updateBuffer(UInt64(var708), 64)
    crccheck.crcCheck()
    crccheck.getCrcOutput()

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64> (crc_output_n, 0)
        buffer = Array<Int64> (buffer_n, 0)
        poly_n = crc_n + 1
        poly = Array<Int64> (poly_n, 0)
        if (crc_n == 32) {
            poly = @{1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1}
        } else if (crc_n == 16) {
            poly = @{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1}
        } else if (crc_n == 8) {
            poly = @{1, 0, 0, 0, 0, 0, 1, 1, 1}
        } else {
            poly = @{1, 1, 0, 0, 1}
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64> (byte_n, 0)
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64> (crc_output_n, 0)
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64> (crc_output_n, 0)
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
    }
}
external open class Class24<T0, T1, T2> <: Interface25<Result<Int64>, List<Float64>, Range<UInt8>> where T0 <: Int32, T1 <: Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, T2 <: Float64 {
    public init() { // block id: 27

    }
;
    public func func32(param33 : String, namedParam34 ! : Range<UInt64>) : UInt8 { // block id: 35
        match (Enum37.defaultValue) {
            case _ => 
                (UInt16(19)..UInt16(222):126|1);
                UInt8(154)
            
        }
    }
;
    public let var171 : Bool = (UInt16(47) is UInt32);
    public var var472 : Enum37 = Enum37.defaultValue;
    public static var var515 : Result<Bool> = Result<Bool>.Err(Exception());
    public static let var531 : (Range<Int32>*UInt32*UInt16*UInt32) = ((Int32(UInt64(153))..Int32(70):(36|1)), UInt32(251), UInt16(Int8(UInt32((-118.0)))), UInt32(110.0));
    open func func428(param429 : Range<Int8>, namedParam430 ! : Bool, namedParam431 ! : Range<Int16>) : Bool { // block id: 432
        match (try { // block id: 437
                Float32(-87.0);
                this;
                Enum434<Option<Unit>, String, Int16>.defaultValue
            } catch (e: Exception) { // block id: 441
                Enum434<Option<Unit>, String, Int16>.defaultValue
            }) {
            case _ => 
                (var447..=var447:(var413|1));
                Result<Int64>.Err(Exception())
            
        };
        let var705 : Int32 = Int32(77);
        Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>().func456([Int32(61), Int32(102), Int32(28), var705, var708][0])
    }

}

external interface Interface25<T0, T1, T2> {
    func func549(namedParam550 ! : Range<UInt64>, namedParam551 ! : Range<Int32>) : Char { // block id: 552
        'Q'
    }
;
    func func456(param457 : Int32) : Bool { // block id: 458
        func460(Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>.var515, if (true) { ["4#HCR [n47", "]zbeK:)hZB", "{#?sV$3G'%", "`Zi\" 4H=ww", "uAS(3>sW>L"] } else { var523 } [4], Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>.var531[1], namedParam464 : this.func549(namedParam550 : var555, namedParam551 : (Int32(40)..=Int32(-65):(-42)|1)));
        var var564 : (UInt32*Bool) = (UInt32(119), (Float32(-26.0) is Int8));
        if (var564[1]) { // block id: 570
            UInt32(144);
            [(-95.0), 40.0, (-67.0), 89.0, (-17.0)]
        } else { // block id: 573
            ();
            [(-112.0), (-67.0), (-53.0), (-21.0), 69.0]
        }[1];
        var var613 : Char = 'A';
        let var641 : Range<UInt8> = (UInt8(148)..=UInt8(74):9|1);
        var var648 : Result<List<Int64>> = Result<List<Int64>>.Err(Exception());
        if ((Result<Bool>.Ok(var126) ?? true)) { (if (var145) { var587 } else { (var606, var613, var126, UInt16(39), (UInt8(44)..UInt8(236):(-39)|1)) } ) } else { match (var220) {
            case _ => 
                Int16(39);
                var var625 : Unit = ();
                var625;
                (((Int32(28)..=Int32(53):(-62)|1), var631, UInt16(248), var631), 'B', var145, var447, var641)
            
            case caseVar645 : (String*Unit) => 
                var648;
                ();
                var587
            
            case $var220 | $var220 | "|~!| OKPbF" => 
                ();
                (((-27)..var413:((-39)|1)), var664);
                var587
            
            case _ : Int16 => 
                var587
            
            case _ => 
                var587
            
        } } [2]
    }
;
    func func422() : Int64 { // block id: 423
        let var714 : Int8 = Int8(-122);
        func82(optionalParam87 : var168.func428((var714..Int8(82):(var413|1)), namedParam430 : var145, namedParam431 : (Int16(58)..Int16(-118):(-23)|1)), namedParam89 : Int8([UInt16(5), UInt16(18), UInt16(155), UInt16(167), UInt16(14)][4]))
    }
;
    func func428(param429 : Range<Int8>, namedParam430 ! : Bool, namedParam431 ! : Range<Int16>) : Bool 

}

enum Enum37 {
    defaultValue
}
internal func func82(optionalParam83 ! : Interface25<Result<Int64>, List<Float64>, Range<UInt8>> = Class24<Int32, Interface25<Result<Int64>, List<Float64>, Range<UInt8>>, Float64>(), optionalParam85 ! : Enum37 = Enum37.defaultValue, optionalParam87 ! : Bool = false, namedParam89 ! : Int8) : Int64 { // block id: 90
    (try { // block id: 100
        (UInt8(147)..UInt8(174):88|1);
        var103
    } finally { // block id: 106
        var97;
        namedParam89;
        Option<Unit>.Some(var97)
    } ?? var114[1]);
    var loopTimeVar154 : Int64 = 0;
    if ((if (false) { Result<Bool>.Ok(var126) } else { Result<Bool>.Err(Exception()) }  ?? false)) { var97 } else { (if (try { // block id: 137
        ();
        ();
        true
    } finally { // block id: 141
        "Nwq R&!?(w";
        ();
        var145
    }) { var97 } else { while (true && loopTimeVar154 < 100 ) {
        loopTimeVar154++;

    } } ) } ;
    match {
        case [false, false, false, false, false][0] => 
        Float32(76.0);
        var164
        case var168.var171 => 
        'W';
        var97;
        var var179 : Int64 = Int64(Int16(Int16(Int32(Int16(47)))));
        [var179, 32, var179, var179, 112]
        case _ => 
        var var195 : Int64 = Int64(UInt64(5));
        [60, 124, 96, var195, var195]
    }[3]
}



external enum Enum231<T0, T1, T2> {
    defaultValue
}


external enum Enum434<T0, T1, T2> {
    defaultValue
}
func func460(param461 : Result<Bool>, param462 : String, param463 : UInt32, namedParam464 ! : Char) : Interface25<Result<Int64>, List<Float64>, Range<UInt8>> { // block id: 465
    match (var168.var472) {
        case _ => 
            ();
            var479
        
        case _ : Enum37 => 
            var479
        
        case _ => 
            var479
        
        case _ => 
            Int16(-117);
            var479
        
    }[4]
}

extend Enum37 {

}

extend Enum434<T0, T1, T2> where T0 <: Option<Unit>, T1 <: String, T2 <: Int16 {

}

extend Enum231<T0, T1, T2> where T0 <: Char, T1 <: Range<Int8>, T2 <: Float64 {

}


/*
return code: 139
*/
