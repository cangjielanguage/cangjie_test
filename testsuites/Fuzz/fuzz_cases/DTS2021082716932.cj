// EXEC: %compiler %cmp_opt -overflow wrapping %f -o %output
// EXEC: %run %run_opt %output %run_args
// ASSERT: regex-not core dumped
// ASSERT: regex-not stack trace

// random seed:1629901844002

// All global variable need to be defined before use!
external var var94 : Unit = ()
internal let var113 : String = ">Q.50mP/.h"
external let var144 : Int8 = Int8(42)
external var var154 : Range<UInt64> = (UInt64(Int8(UInt8(Int32(-14))))..UInt64(151):((-100)|1))
internal var var168 : Int16 = Int16(Float32(22.0))
external var var209 : Int64 = 37
external let var217 : Result<Int64> = Result<Int64>.Ok(var209)
external let var231 : UInt8 = UInt8(Int32(-9))
external var var256 : List<Float64> = [4.0, (-64.0), 61.0, 14.0, (-127.0)]
external let var311 : Int32 = Int32(Int32(Float32(-127.0)))
internal var var360 : List<List<Float64>> = [[119.0, 126.0, (-47.0), 41.0, 3.0], [(-54.0), (-92.0), 106.0, 45.0, 101.0], [(-91.0), (-21.0), (-8.0), 98.0, (-33.0)], [(-118.0), (-42.0), 111.0, (-24.0), 14.0], [59.0, (-105.0), (-56.0), (-88.0), (-77.0)]]
external var var366 : Result<List<List<Float64>>> = Result<List<List<Float64>>>.Err(Exception())
external let var402 : Aggregate398 = Aggregate398()
external var var606 : Range<UInt32> = (UInt32(162)..=UInt32(142):(Int64(Int16(UInt64((-115))))|1))
external let var674 : UInt16 = UInt16(238)
external var var678 : (UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool) = (UInt16(109), (Int16(22), (Int32(55)..Int32(-113):(-42)|1), (), (-55), Int64((-120.0))), Result<List<List<Float64>>>.Ok(var360), ['f', 'T', 'M', 't', 'H'], false)
external var var720 : Result<UInt16> = Result<UInt16>.Ok(var674)
external var var758 : (List<Float64>*Range<Int8>) = ([(-115.0), (-105.0), (-70.0), 18.0, 47.0], (Int8(-39)..=Int8(102):(-80)|1))
external var var769 : List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)> = [(UInt16(152), (Int16(20.0), (Int32(116)..Int32(-23):42|1), (), Int64(Int8(12)), Int64(UInt32(96))), Result<List<List<Float64>>>.Ok(var360), ['d', 'f', 'r', 'N', 'q'], (Enum122<Int64, List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)>, Option<Result<Int64>>>.defaultValue is Result<Unit>)), (UInt16(75), (Int16(63), (Int32(75)..Int32(25):27|1), (), Int64(UInt32(191)), Int64(Int16(78))), Result<List<List<Float64>>>.Err(Exception()), ['p', '8', 'M', 'p', '9'], (Int16(91) is Float64)), (UInt16(UInt8(16.0)), (Int16(-110), (Int32(-13)..=Int32(7):15|1), (), (-128), Int64(Int32(-60))), Result<List<List<Float64>>>.Err(Exception()), ['V', 'g', 'F', '2', 'A'], false), (UInt16(UInt32(Int16(90))), (Int16(105), (Int32(-28)..=Int32(74):(67|1)), (), 115, Int64(UInt16(160))), Result<List<List<Float64>>>.Err(Exception()), ['5', 'k', 'r', 'w', 'a'], false), (UInt16(Int64(Float32(-91.0))), (Int16(99), (Int32(126)..Int32(-79):((-81)|1)), (), Int64(UInt64(6)), 113), Result<List<List<Float64>>>.Err(Exception()), ['K', '7', 'r', 'R', 'l'], ((UInt32(45)..=UInt32(136):((-12)|1)) is Enum122<Int64, List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)>, Option<Result<Int64>>>))]
external let var929 : Result<Unit> = Result<Unit>.Ok(var94)
external let var935 : Interface633<List<Float64>, List<(Bool*Range<UInt32>)>, Int8> = Class632()
external let var947 : Class632 = Class632()
external let var994 : (Int16*Range<Int32>*Unit*Int64*Int64) = (Int16(Float32(-97.0)), (Int32(-46)..Int32(-55):(Int64(UInt32(20))|1)), (), 69, Int64(Int8(UInt64(UInt32(9)))))
external var var1045 : (Float32*Bool*(Bool*Range<UInt32>)*(Int16*Range<Int32>*Unit*Int64*Int64)) = (Float32(79.0), (Int32(UInt16(79)) is Bool), (false, (UInt32(236)..=UInt32(233):(-43)|1)), (Int16(19), (Int32(32)..Int32(121):55|1), (), Int64(Float64(UInt32(253))), Int64(Int16(Float32(-36.0)))))
external let var1154 : Bool = false
internal var var1158 : Option<Aggregate398> = (Option<Aggregate398>.None as Aggregate398)
external var var1187 : UInt32 = UInt32(UInt16(Int32(Float64(UInt64(31)))))
external let var1269 : Int32 = Int32(Int32(UInt32(Int64(Float32(-65.0)))))
func main(): Int64 {
    var var7 : Unit = ();
    var7;
    ();
    let var49 : Unit = ();
    let var740 : List<Int64> = [(-70), (-46), 79, 6, (-119)];
    let var749 : Char = 'v';
    func func11<T0>(namedParam12 ! : UInt16, namedParam13 ! : Unit) : Int64 { // block id: 14
        var var30 : Bool = ([true, false, false, false, false] is Range<Int8>);
        var loopTimeVar38 : Int64 = 0;
        do {
            loopTimeVar38++;

        } while ([true, true, var30, var30, var30][3] && loopTimeVar38 < 100 ) ;
        var var44 : UInt64 = UInt64(Int8(UInt32(192)));
        let var52 : (Int16*Range<Int32>*Unit*Int64*Int64) = (Int16(UInt64(44)), (Int32(82)..=Int32(109):(-101)|1), (), (-8), (-81));
        let var62 : UInt32 = UInt32(90);
        let var72 : Int64 = Int64(UInt8(162));
        try { // block id: 42
            var44;
            var49;
            var52
        } finally { // block id: 60
            var62;
            let var66 : Int16 = Int16(106);
            (var66, (Int32(50)..Int32(-11):(-69)|1), (), 126, var72)
        }[2];
        let var711 : Bool = (UInt32(Float64(UInt16(208))) is Result<Unit>);
        func77(namedParam78 : (match (var678) {
            case (caseVar693 : Range<Int16>,(_ : Bool,caseVar694 : Result<UInt16>,caseVar695 : UInt8,caseVar696,87 | 80),_ : Int32,caseVar697 : Result<Int64>,caseVar698) => 
                caseVar694
            
            case _ : Int64 => 
                Result<UInt16>.Ok(var674)
            
            case (caseVar707,_ : List<Float64>,caseVar708 : Range<UInt32>,caseVar709 : List<Char>,true | $var711 | false) => 
                ();
                var674;
                var720
            
            case ($var674 | $var674 | $var674 | 136,_ : Int32,caseVar728 : Option<Result<Int64>>,_ : Range<UInt64>,caseVar729) => 
                Int16(-22);
                Result<UInt16>.Err(Exception())
            
            case _ => 
                (var62..UInt32(201):(110|1));
                var740;
                Result<UInt16>.Ok(var674)
            
        } ?? try { // block id: 745
            ();
            [var749, 'y', '9', 'c', var749];
            UInt16(81)
        } finally { // block id: 756
            var758;
            UInt16(59)
        }), namedParam79 : try { // block id: 764
            [(-24), (-20), 34, (-46), (-97)];
            (UInt32(203)..UInt32(123):(-19)|1)
        } catch (e: Exception) { // block id: 767
            var769;
            (UInt32(238)..UInt32(161):((-6)|1))
        })
    }
;
    let var1264 : List<Bool> = [false, true, false, false, false];
    func func863(param864 : UInt16, param865 : Bool, optionalParam866 ! : Result<Int64> = Result<Int64>.Ok(var209), optionalParam868 ! : Option<Result<Int64>> = Option<Result<Int64>>.None) : UInt16 { // block id: 870
        var231;
        let var878 : List<(Bool*Range<UInt32>)> = [(false, (UInt32(115.0)..UInt32(228):(Int64(UInt8(230))|1))), (true, (UInt32(57)..UInt32(68):(Int64(Float32(12.0))|1))), (false, (UInt32(40)..=UInt32(Float32(36.0)):((-27)|1))), (true, (UInt32(Int16(-15))..UInt32(171):(Int64(UInt64(101))|1))), (((23..=(-78):69|1) is Result<Int64>), (UInt32(UInt8(120))..=UInt32(Int32(-17)):((-86)|1)))];
        if (var878[2][0]) { // block id: 922
            var94;
            (Result<Unit>.Err(Exception()) ?? ());
            (var929 ?? ())
        };
        var935.func938(if (false) { [var1154, param865, false, false, false] } else { var1264 } , (Result<Int32>.Err(Exception()) ?? var1269), namedParam941 : (Result<Int64>.Err(Exception()), ()), namedParam942 : UInt8(135))
    }
;
    func11<Range<Int64>>(namedParam12 : func863(var674, var1154), namedParam13 : var94)
    // CRC Check All Variables
    var crccheck = CrcCheck(5000, 32)
    crccheck.updateBuffer(UInt64(var231), 64)
    crccheck.updateBuffer(UInt64(var674), 64)
    crccheck.updateBuffer(UInt64(var1187), 64)
    crccheck.crcCheck()
    crccheck.getCrcOutput()

    return 0;
}

class CrcCheck {
    var buffer: Array<Int64>
    var poly: Array<Int64>
    var crc_output: Array<Int64>
    var poly_n: Int64
    var buffer_index: Int64
    var crc_output_n: Int64

    init(buffer_n: Int64, crc_n: Int64) {
        buffer_index = 0
        crc_output_n = 0
        crc_output = Array<Int64> (crc_output_n, 0)
        buffer = Array<Int64> (buffer_n, 0)
        poly_n = crc_n + 1
        poly = Array<Int64> (poly_n, 0)
        if (crc_n == 32) {
            poly = @{1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1}
        } else if (crc_n == 16) {
            poly = @{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1}
        } else if (crc_n == 8) {
            poly = @{1, 0, 0, 0, 0, 0, 1, 1, 1}
        } else {
            poly = @{1, 1, 0, 0, 1}
        }
    }

    func updateBuffer(input: UInt64, byte_n: Int64): Unit {
        var value = input
        if (byte_n == 64) {
            value = value & 0xffffffffffffffff
        } else if (byte_n == 32) {
            value = value & 0xffffffff
        } else if (byte_n == 16) {
            value = value & 0xffff
        } else {
            value = value & 0xff
        }
        var byteArray = Array<Int64> (byte_n, 0)
        var byte_c = 1
        var byte_index = 0
        while(value != 0) {
            if (value % 2 == 1) {
                byte_index = byte_n - byte_c
                byteArray[byte_index] = 1
            }
            byte_c++
            value = value >> 1
        }
        var i = 0
        while (i + byte_index < byte_n) {
            buffer[i + buffer_index] = byteArray[i + byte_index]
            i++
        }
        buffer_index = buffer_index + i
    }

    func crcCheck(): Unit {
        crc_output_n = buffer_index + poly_n - 1
        var crc_buffer = Array<Int64> (crc_output_n, 0)
        var i = 0
        while (i < buffer_index) {
            crc_buffer[i] = buffer[i]
            i++
        }
        i = 0
        while (i < buffer_index) {
            if (crc_buffer[i] == 1) {
                var j = 0
                while (j < poly_n) {
                    crc_buffer[j + i] = crc_buffer[j + i] ^ poly[j]
                    j++
                }
            }
            i++
        }
        let check_code = crc_buffer[buffer_index..]
        var byte_add = 3 - crc_output_n % 3
        crc_output_n = byte_add + crc_output_n
        crc_output = Array<Int64> (crc_output_n, 0)
        i = 0
        while (i < crc_output_n - byte_add) {
            if (i < buffer_index) {
                crc_output[i + byte_add] = buffer[i]
            } else {
                crc_output[i + byte_add] = check_code[i - buffer_index]
            }
            i++
        }
    }

    func getCrcOutput(): Unit {
        var i = 0
        while (i < crc_output_n) {
            var hex_value = 2**2 * crc_output[i] + 2**1 * crc_output[i + 1] + 1 * crc_output[i + 2]
            print(hex_value.toString())
            i = i + 3
        }
    }
}
external func func77(namedParam78 ! : UInt16, namedParam79 ! : Range<UInt32>, optionalParam80 ! : UInt64 = UInt64(200), optionalParam82 ! : Int64 = Int64(UInt32(UInt8(127)))) : Int64 { // block id: 86
    try { // block id: 90
        [39.0, 58.0, 18.0, (-64.0), 75.0]
    } catch (e: Exception) { // block id: 92
        var94;
        UInt16(211);
        [96.0, 51.0, 106.0, (-119.0), 31.0]
    } finally { // block id: 98
        92.0;
        ();
        [(-46.0), 73.0, (-97.0), 80.0, (-9.0)]
    }[0];
    let var198 : (List<Float64>*Range<Int8>) = ([(-105.0), (-50.0), 125.0, (-82.0), 126.0], (Int8(71)..Int8(10):28|1));
    if (try { // block id: 105
        false
    } catch (e: Exception) { // block id: 107
        ((-86)..=(-21):(optionalParam82|1));
        var113;
        false
    }) { // block id: 116
        ['W', 'q', 'j', '7', '6'][1];
        match (Enum122<Int64, List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)>, Option<Result<Int64>>>.defaultValue) {
            case _ : Int8 => 
                ();
                var94;
                var94
            
            case _ : Bool => 
                optionalParam82;
                ()
            
            case _ => 
                ();
                var94
            
        };
        try { // block id: 141
            (var144..=var144:((-7)|1))
        } finally { // block id: 148
            optionalParam82;
            var94;
            (Int8(93)..Int8(-43):92|1)
        }
    } else { // block id: 152
        var154;
        match (Enum122<Int64, List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)>, Option<Result<Int64>>>.defaultValue) {
            case _ : UInt16 => 
                var168
            
            case caseVar173 => 
                var94;
                Int16(25)
            
            case _ => 
                let var182 : UInt8 = UInt8(55);
                (var182..=UInt8(148):(optionalParam82|1));
                var168
            
            case defaultValue => 
                ();
                Int16(-81)
            
            case _ => 
                var168
            
        };
        var198[1]
    };
    func func246(namedParam247 ! : List<Float64>, optionalParam248 ! : (List<Float64>*Range<Int8>) = ([68.0, 4.0, (-127.0), 112.0, 94.0], (Int8(-96)..=Int8(7):86|1)), namedParam252 ! : (List<Float64>*Range<Int8>)) : Bool { // block id: 253
        true
    }
;
    var var261 : Float64 = (-106.0);
    ((if (true) { // block id: 222
        ();
        ();
        var var226 : Option<Result<Int64>> = Option<Result<Int64>>.Some(var217);
        var226
    } else if (true) { // block id: 229
        var231;
        Result<Int64>.Ok(var209);
        Option<Result<Int64>>.Some(var217)
    } else { // block id: 236
        Option<Result<Int64>>.None
    } ?? (Result<Int64>.Err(Exception()), var94)[0]) ?? if (func246(namedParam247 : var256, namedParam252 : ([var261, var261, 88.0, var261, var261], (Int8(68)..=Int8(94):(-101)|1)))) { func269(var209) } else { (-22) } )
}

external enum Enum122<T0, T1, T2> where T0 <: Int64, T1 <: List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)>, T2 <: Option<Result<Int64>> {
    defaultValue
}


func func269(param270 : Int64, optionalParam271 ! : Bool = (['B', 'W', 'X', 'y', 'U'] is Bool), optionalParam279 ! : (List<Float64>*Range<Int8>) = ([Float64(Int8(Int8(-88))), (-36.0), (-25.0), Float64(Int64(Int8(-121))), Float64(Int64((-45)))], (Int8(Int32(124))..=Int8(Float32(Int32(-20))):(Int64((-69))|1)))) : Int64 { // block id: 301
    let var534 : Range<Int8> = (Int8(UInt16(20))..Int8(111):((-15)|1));
    let var617 : UInt64 = UInt64(154);
    try { // block id: 303

    } catch (_) { // block id: 304
        match (Option<Result<Int64>>.None) {
            case _ => 
                ();
                var311
            
        };
        Option<Result<Int64>>.None;
        let var318 : Bool = ((Int32(3)..=Int32(104):((-42)|1)) is Enum122<Int64, List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)>, Option<Result<Int64>>>);
        var loopTimeVar326 : Int64 = 0;
        do {
            loopTimeVar326++;

        } while (var318 && loopTimeVar326 < 100 ) 
    } finally { // block id: 327
        let var547 : Range<Int32> = (Int32(Float64(UInt64(94)))..=Int32(UInt64(Int32(UInt32(15)))):(Int64(UInt32(116))|1));
        func func369(namedParam370 ! : Range<UInt64>, namedParam371 ! : String, namedParam372 ! : Int16) : List<List<Float64>> { // block id: 373
            let var576 : List<List<Float64>> = [[Float64(UInt64(162)), Float64(Int8(-38)), Float64(UInt8(Float32(95.0))), (-100.0), Float64(UInt32((-100.0)))], [(-49.0), 98.0, (-3.0), 3.0, (-20.0)], [(-19.0), 75.0, (-93.0), (-45.0), (-75.0)], [(-69.0), (-11.0), 46.0, (-117.0), (-79.0)], [(-14.0), (-96.0), 79.0, (-88.0), (-30.0)]];
            match (func376(match (Enum122<Int64, List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)>, Option<Result<Int64>>>.defaultValue) {
                    case defaultValue => 
                        var534;
                        var94;
                        (Int32(-26)..=Int32(-96):(-123)|1)
                    
                    case caseVar544 : Int64 => 
                        var547
                    
                    case caseVar561 : Float32 => 
                        ();
                        var94;
                        var547
                    
                    case _ => 
                        (UInt8(35)..=UInt8(229):(-44)|1);
                        (Int32(-8)..Int32(92):19|1)
                    
                })) {
                case caseVar572 : Range<Int8> => 
                    ();
                    var576
                
                case caseVar596 : Range<UInt8> => 
                    var576
                
                case _ : Int64 => 
                    var576
                
                case _ => 
                    var606;
                    var360
                
            }
        }
;
        func func329(param330 : Range<Int64>, namedParam331 ! : Result<Int64>, optionalParam332 ! : List<Bool> = [(['T', 'u', 'A', 't', 'J'] is Range<UInt64>), ((UInt16(34)..=UInt16(201):99|1) is Range<UInt32>), ((UInt8((-110.0))..UInt8(UInt64(14)):(Int64(UInt16(204))|1)) is Range<UInt64>), (UInt8(Int32(Int32(-56))) is Option<Result<Int64>>), false]) : Unit { // block id: 351
            (if (optionalParam271) { Result<List<List<Float64>>>.Err(Exception()) } else { var366 }  ?? func369(namedParam370 : (var617..var617:((-113)|1)), namedParam371 : "eGo`]cX*{4", namedParam372 : Int16(-119)))[2];
            (Result<Unit>.Ok(var94) ?? Class632.var638)
        }
;
        func329((82..=(-86):50|1), namedParam331 : Result<Int64>.Err(Exception()), optionalParam332 : [false, true, false, false, true]);
        try { // block id: 644

        } finally { // block id: 645
            Aggregate398();
            var94
        }
    };
    (Result<Int64>.Err(Exception()) ?? if (optionalParam271) { // block id: 654
        (UInt64(90)..UInt64(76):(-96)|1);
        [(-122), 17, (-66), 49, (-27)]
    } else { // block id: 657
        var94;
        [85, (-87), var209, (-8), 10]
    }[4])
}


func func376(param377 : Range<Int32>) : Result<List<List<Float64>>> { // block id: 378
    match (if (((UInt8(170)..=UInt8(156):(-8)|1) is List<Char>)) { // block id: 383
            Result<Int64>.Err(Exception())
        } else { // block id: 385
            Option<Result<Int64>>.None;
            Result<Int64>.Err(Exception())
        }) {
        case _ => 
            var94;
            ()
        
    };
    var94;
    var402.var405[1][2]
}

external record Aggregate398 {
    public init() { // block id: 400

    }
;
    public var var405 : List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)> = [(UInt16(160), (Int16(Int16(-122)), (Int32(58)..Int32(-21):(4|1)), (), Int64(Int16(28)), 75), Result<List<List<Float64>>>.Ok(var360), ['k', 'D', 'q', 'M', 'N'], (Int16(67) is Range<UInt32>)), (UInt16(19), (Int16(UInt32(110)), (Int32(-6)..=Int32(-120):58|1), (), 20, Int64(UInt8(197))), Result<List<List<Float64>>>.Ok(var360), ['E', 'w', 'G', 'y', 'f'], (Result<Int64>.Ok(var209) is Int16)), (UInt16(81), (Int16(Int16(-71)), (Int32(59)..Int32(9):(-41)|1), (), Int64(UInt16(175)), Int64(Int16(112))), Result<List<List<Float64>>>.Ok(var360), ['N', 'e', 'P', 'g', 'e'], ((Int8(88)..Int8(52):((-127)|1)) is Int32)), (UInt16(Int8((-55))), (Int16(-119), (Int32(-60)..=Int32(-87):((-103)|1)), (), Int64(104), (-59)), Result<List<List<Float64>>>.Err(Exception()), ['a', '0', '7', 'y', 'p'], (Int8(91) is List<Float64>)), (UInt16(Int32(69)), (Int16((-81.0)), (Int32(44)..Int32(66):100|1), (), 102, Int64(Int8(-100))), Result<List<List<Float64>>>.Err(Exception()), ['l', 'O', 'F', 'E', 'B'], false)]
}


external open class Class632 <: Interface633<List<Float64>, List<(Bool*Range<UInt32>)>, Int8> {
    public init() { // block id: 635

    }
;
    public static let var638 : Unit = ();
    public static var var974 : Bool = (Int64(UInt16(210)) is Range<UInt8>);
    static var var1081 : Option<Aggregate398> = Option<Aggregate398>.Some(var402);
    private let var1106 : List<Result<Int32>> = [Result<Int32>.Ok(var311), Result<Int32>.Err(Exception()), Result<Int32>.Ok(var311), Result<Int32>.Err(Exception()), Result<Int32>.Ok(var311)];
    protected static func func957(optionalParam958 ! : Range<UInt64> = (UInt64(74)..UInt64(78):(-109)|1)) : Int32 { // block id: 960
        var loopTimeVar1017 : Int64 = 0;
        do {
            loopTimeVar1017++;
            let var1011 : List<Char> = ['G', 'Y', 'd', 'Y', 'x'];
            var loopTimeVar1015 : Int64 = 0;
            do {
                loopTimeVar1015++;
                (var674, var994, Result<List<List<Float64>>>.Ok(var360), var1011, var974)
            } while (var974 && loopTimeVar1015 < 100 ) 
        } while (match (Enum122<Int64, List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)>, Option<Result<Int64>>>.defaultValue) {
            case _ : List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)> => 
                ();
                var638;
                true
            
            case defaultValue => 
                var974
            
            case _ => 
                false
            
            case _ => 
                ();
                var606;
                var974
            
        } && loopTimeVar1017 < 100 ) ;
        var var1088 : Result<Unit> = Result<Unit>.Ok(var94);
        if (try { // block id: 1020
            var974
        } catch (_) { // block id: 1022
            var94;
            var974
        }) { // block id: 1025
            if (var974) { () } else { () } ;
            ();
            if (var974) { // block id: 1033
                var402
            } else { // block id: 1035
                var402
            }
        } else if (if ((var769 is List<Char>)) { // block id: 1040
            var974
        } else if (var1045[1]) { // block id: 1066
            ();
            Float32(-82.0);
            var974
        } else { // block id: 1070
            var974
        }) { // block id: 1072
            ();
            (var1081 ?? Aggregate398())
        } else { // block id: 1085
            (var1088 ?? ());
            (var1081 ?? Aggregate398())
        };
        (var947.var1106[0] ?? if (var974) { Int32(-11) } else { var311 } )
    }
;
    protected var var1131 : Result<Range<UInt64>> = Result<Range<UInt64>>.Ok(var154);
    public open func func950(param951 : Aggregate398, param952 : Range<UInt16>) : Bool { // block id: 953
        Class632.func957(optionalParam958 : (var1131 ?? (UInt64(160)..UInt64(179):13|1)));
        var935.func1137();
        true
    }

}

external interface Interface633<T0, T1, T2> where T0 <: List<Float64>, T1 <: List<(Bool*Range<UInt32>)>, T2 <: Int8 {
    func func1137() : Unit { // block id: 1138
        var94
    }
;
    func func938(param939 : List<Bool>, param940 : Int32, namedParam941 ! : (Result<Int64>*Unit), namedParam942 ! : UInt8) : UInt16 { // block id: 943
        var loopTimeVar1146 : Range<UInt64> = (UInt64(154)..=UInt64(44):(118|1));
        for (i in loopTimeVar1146) if (var947.func950(var402, (UInt16(97)..UInt16(223):(-126)|1))) {
            ();
            ()
        };
        match (if (var1154) { match (var1158) {
                case caseVar1163 : Range<Int64> => 
                    (Result<Int64>.Err(Exception()), var94);
                    Int32(-35);
                    Result<Int64>.Err(Exception())
                
                case _ => 
                    var217
                
            } } else { match (Enum122<Int64, List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)>, Option<Result<Int64>>>.defaultValue) {
                case caseVar1177 : List<List<Float64>> => 
                    Result<Int64>.Err(Exception())
                
                case caseVar1182 => 
                    Enum122<Int64, List<(UInt16*(Int16*Range<Int32>*Unit*Int64*Int64)*Result<List<List<Float64>>>*List<Char>*Bool)>, Option<Result<Int64>>>.defaultValue;
                    (var1187..=UInt32(69):(var209|1));
                    var217
                
                case _ => 
                    var94;
                    var var1204 : Float64 = Float64(Int32(-51));
                    [[(-4.0), (-23.0), (-112.0), (-25.0), 26.0], [var1204, var1204, var1204, (-42.0), var1204], [(-121.0), 106.0, (-83.0), (-79.0), 57.0], [(-111.0), (-128.0), (-52.0), (-86.0), (-125.0)], var256];
                    Result<Int64>.Err(Exception())
                
                case caseVar1217 : Result<List<List<Float64>>> => 
                    var217
                
                case _ => 
                    Result<Int64>.Ok(var209)
                
            } } ) {
            case _ : List<Float64> => 
                ()
            
            case caseVar1229 : List<Char> => 
                ();
                Int32(-42);
                ()
            
            case _ => 
                ();
                var94
            
        };
        let var1247 : Option<Bool> = (true as Bool);
        var var1253 : Int32 = Int32(2);
        UInt16(if ((var1247 ?? true)) { Int32(57) } else { var1253 } )
    }
;
    func func950(param951 : Aggregate398, param952 : Range<UInt16>) : Bool 

}







/*
return code: 139
*/
