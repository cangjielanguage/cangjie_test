/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 2
// DEPENDENCE: files
// (not Windows) EXEC: %compiler %import-cangjie-stdx %cmp_opt %f -o %output %cmp_utest_opt
// (not Windows) RUN-EXEC: %run_stdx %output %run_utest_opt %run_args 
import std.unittest.*
import std.unittest.testmacro.*
import std.time.*
import std.sync.*
import std.net.*
import std.collection.*
import stdx.net.http.*
import stdx.net.tls.*
import stdx.crypto.x509.{X509Certificate, PrivateKey}
import std.io.*
import std.math.*
import std.fs.*

public func serverConfig(): TlsServerConfig {
    let pem0 = String.fromUtf8(readToEnd(File("./files/end_rsa.cer", Read)))
    let pem02 = String.fromUtf8(readToEnd(File("./files/end_rsa_private_key.pem", Read)))
    var tlsConfig = TlsServerConfig(X509Certificate.decodeFromPem(pem0), PrivateKey.decodeFromPem(pem02))
    tlsConfig.supportedAlpnProtocols = ["h2"]
    tlsConfig
}

public func clientConfig(): TlsClientConfig {
    var tlsConfig = TlsClientConfig()
    let pem = String.fromUtf8(readToEnd(File("./files/root_rsa.cer", Read)))
    tlsConfig.verifyMode = CustomCA(X509Certificate.decodeFromPem(pem))
    tlsConfig.alpnProtocolsList = ["h2"]
    tlsConfig
}

@Test
public class Test_servicePoolConfig_H2 {
    @TestCase
    func capacity(): Unit {
        var cnt = 0

        try {
            let s = ServerBuilder()
                .addr("0.0.0.0")
                .port(0)
                .tlsConfig(serverConfig())
                .servicePoolConfig(ServicePoolConfig(capacity: 0))
                .build()
        } catch (e: IllegalArgumentException) {
            cnt++
            @Expect(e.message, "capacity should greater than 0, but got 0")
        }
        @Expect(cnt, 1)

        try {
            let s = ServerBuilder()
                .addr("0.0.0.0")
                .port(0)
                .tlsConfig(serverConfig())
                .servicePoolConfig(ServicePoolConfig(capacity: -1))
                .build()
        } catch (e: IllegalArgumentException) {
            cnt++
            @Expect(e.message, "capacity should greater than 0, but got -1")
        }

        @Expect(cnt, 2)
    }

    @TestCase
    func queueCapacity(): Unit {
        var cnt = 0

        try {
            let s = ServerBuilder()
                .addr("0.0.0.0")
                .port(0)
                .tlsConfig(serverConfig())
                .servicePoolConfig(ServicePoolConfig(queueCapacity: 0))
                .build()
        } catch (e: IllegalArgumentException) {
            cnt++
            @Expect(e.message, "queue capacity should greater than 0, but got 0")
        }
        @Expect(cnt, 1)

        try {
            let s = ServerBuilder()
                .addr("0.0.0.0")
                .port(0)
                .tlsConfig(serverConfig())
                .servicePoolConfig(ServicePoolConfig(queueCapacity: -1))
                .build()
        } catch (e: IllegalArgumentException) {
            cnt++
            @Expect(e.message, "queue capacity should greater than 0, but got -1")
        }

        @Expect(cnt, 2)
    }

    @TestCase
    func preheat(): Unit {
        var cnt = 0

        try {
            let s = ServerBuilder()
                .addr("0.0.0.0")
                .port(0)
                .tlsConfig(serverConfig())
                .servicePoolConfig(ServicePoolConfig(capacity: 1, preheat: 2))
                .build()
        } catch (e: IllegalArgumentException) {
            cnt++
            @Expect(e.message, "preheat size should between 0 and 1, but got 2")
        }
        @Expect(cnt, 1)

        try {
            let s = ServerBuilder()
                .addr("0.0.0.0")
                .port(0)
                .tlsConfig(serverConfig())
                .servicePoolConfig(ServicePoolConfig(preheat: -1))
                .build()
        } catch (e: IllegalArgumentException) {
            cnt++
            @Expect(e.message, "preheat size should between 0 and 10000, but got -1")
        }

        @Expect(cnt, 2)
    }

    @TestCase
    func get_servicePoolConfig(): Unit {
        let server = ServerBuilder()
            .addr("0.0.0.0")
            .port(0)
            .tlsConfig(serverConfig())
            .servicePoolConfig(ServicePoolConfig(capacity: 1000, queueCapacity: 1000, preheat: 1000))
            .build()
        let cfg = server.servicePoolConfig
        @Expect(cfg.capacity, 1000)
        @Expect(cfg.queueCapacity, 1000)
        @Expect(cfg.preheat, 1000)
    }

    @TestCase
    func over_size(): Unit {
        let server = ServerBuilder()
            .addr("127.0.0.1")
            .port(0)
            .tlsConfig(serverConfig())
            .servicePoolConfig(ServicePoolConfig(capacity: 1, queueCapacity: 1))
            .build()
        server.distributor.register("/hello", {
            ctx => sleep(Duration.second)
        })

        spawn {server.serve()}
        while (server.port == 0) {
            sleep(Duration.millisecond)
        }

        let request = HttpRequestBuilder()
            .method("GET")
            .url("https://127.0.0.1:${server.port}/hello")
            .version(HTTP2_0)
            .build()

        spawn {
            let client = ClientBuilder().tlsConfig(clientConfig()).build()
            try {
                client.send(request)
            } finally {
                client.close()
            }
        }
        spawn {
            let client = ClientBuilder().tlsConfig(clientConfig()).build()
            try {
                client.send(request)
            } finally {
                client.close()
            }
        }
        sleep(Duration.millisecond * 200)

        let client = ClientBuilder().tlsConfig(clientConfig()).build()
        try {
            let res = client.send(request)
        } catch (e: SocketException) {
            if (e.message.contains("Connection reset by peer") || e
                .message
                .contains("forcibly closed by the remote host")) {
                return // limited
            }
        } catch (e: ConnectionException) {
            if (e.message.contains("Socket is closed")) {
                return
            }
        } catch (e: TlsException) {
            if (e.message.contains("TLS handshake failed (client)")) {
                return
            }
        } catch (e: SocketTimeoutException) {
            return
        } finally {
            client.close()
            server.close()
        }
        throw Exception("not limited")
    }

    func _sleep(sleepTime: Duration) {
        let startTime = DateTime.now()
        var elapsed = DateTime.now() - startTime
        while (elapsed <= sleepTime) {
            sleep(sleepTime - elapsed)
            elapsed = DateTime.now() - startTime
        }
    }
}
