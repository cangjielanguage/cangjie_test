/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 0
// DEPENDENCE: files
// EXEC: %compiler %import-cangjie-stdx %cmp_opt %f -o %output %cmp_utest_opt
// RUN-EXEC: %run_stdx %output %run_utest_opt %run_args 
import std.unittest.*
import std.unittest.testmacro.*
import std.time.*
import std.sync.*
import std.net.*
import std.collection.*
import stdx.net.http.*
import stdx.crypto.kit.*
import stdx.crypto.keys.*
import stdx.net.tls.common.*
import stdx.net.tls.*
import stdx.crypto.x509.X509Certificate
import std.fs.*
import std.io.*

public func serverConfig(): TlsServerConfig {
    let pem0 = String.fromUtf8(readToEnd(File("./files/end_rsa.cer", Read)))
    let pem02 = String.fromUtf8(readToEnd(File("./files/end_rsa_private_key.pem", Read)))
    var tlsConfig = TlsServerConfig(X509Certificate.decodeFromPem(pem0), GeneralPrivateKey.decodeFromPem(pem02))
    tlsConfig.supportedAlpnProtocols = ["h2"]
    tlsConfig
}

public func clientConfig(): TlsClientConfig {
    var tlsConfig = TlsClientConfig()
    let pem = String.fromUtf8(readToEnd(File("./files/root_rsa.cer", Read)))
    tlsConfig.verifyMode = CustomCA(X509Certificate.decodeFromPem(pem).map({c => c}))
    tlsConfig.supportedAlpnProtocols = ["h2"]
    tlsConfig
}

@Test
public class Test_ServerBuilder_addr_h2 {
    @TestCase
    func case1(): Unit {
        let server = ServerBuilder().addr("127.0.0.1").port(0).tlsConfig(serverConfig()).build()
        @Expect(server.addr, "127.0.0.1")
        server.close()
    }

    @TestCase
    func case2(): Unit {
        let server = ServerBuilder().addr("255.255.255.255").port(0).tlsConfig(serverConfig()).build()
        @Expect(server.addr, "255.255.255.255")
        server.close()
    }

    @TestCase
    func case3(): Unit {
        let server = ServerBuilder().addr("172.168.1.1").port(0).tlsConfig(serverConfig()).build()
        @Expect(server.addr, "172.168.1.1")
        server.close()
    }

    @TestCase
    func abnormal_01(): Unit {
        var flag = false
        try {
            let server = ServerBuilder().addr("").port(0).tlsConfig(serverConfig()).build()
        } catch (e: IllegalFormatException) {
            flag = true
            @Expect(e.message.contains("Unable to parse IP"))
        }
        @Expect(flag, true)
    }

    @TestCase
    func abnormal_02(): Unit {
        var flag = false
        try {
            let server = ServerBuilder().addr("#$%一二三").port(0).tlsConfig(serverConfig()).build()
        } catch (e: IllegalFormatException) {
            flag = true
            @Expect(e.message.contains("Missing IPv6 address"))
        }
        @Expect(flag, true)
    }

    @TestCase
    func abnormal_03(): Unit {
        var flag = false
        try {
            let server = ServerBuilder().addr("256.255.255.255").port(0).tlsConfig(serverConfig()).build()
        } catch (e: IllegalFormatException) {
            flag = true
            @Expect(e.message.contains("IPv4 field has value >255"))
        }
        @Expect(flag, true)
    }

    @TestCase
    func addr_overwrite(): Unit {
        let server = ServerBuilder().addr("127.0.0.1").addr("127.0.0.1").port(0).tlsConfig(serverConfig()).build()
        @Expect(server.addr, "127.0.0.1")
        server.close()
    }
}
