/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 1
// DEPENDENCE: ./data
// (not Windows and not MAC) EXEC: %compiler %import-cangjie-stdx %cmp_opt %cmp_utest_opt  %f -o %output
// (not Windows and not MAC) RUN-EXEC: %run_stdx %output %run_utest_opt %run_args

import std.net.*
import std.sync.*
import std.time.*
import std.net.*
import std.fs.*
import stdx.net.tls.*
import stdx.crypto.x509.{X509Certificate, PrivateKey}
import std.sync.*
import std.time.*
import std.runtime.*
import std.io.*

var sum = 0
var sum1 = 0
var sum2 = 0
var port = AtomicUInt16(0)
var bound = AtomicUInt16(0)
var tcpser = Option<TcpServerSocket>.None
var tlsser = Option<TlsSocket>.None
let sendSize: Int64 = 2000

@Test
public class Test_Tls_Communication {
    @TestCase
    func test_ipv6_tlssocket(): Unit {
        //the server write data and client read the data and compare the value .
        func startServerHandshake(): Unit {
            let pemser = String.fromUtf8(readToEnd(File("./data/end_ecdsa.cer", Read)))
            let keypemser = String.fromUtf8(readToEnd(File("./data/end_ecdsa_private_key.pem", Read)))
            var serverConf = TlsServerConfig(X509Certificate.decodeFromPem(pemser), PrivateKey.decodeFromPem(keypemser))
            var tcpServer = TcpServerSocket(bindAt: IPSocketAddress(IPv6Address.localhost, 0))
            tcpServer.bind()
            port.store((tcpServer.localAddress as IPSocketAddress)?.port ?? 0)
            bound.fetchAdd(1)
            var tcpServerAccept = tcpServer.accept()
            var tlsServer = TlsSocket.server(tcpServerAccept, sessionContext: None, serverConfig: serverConf)
            tcpser = Option<TcpServerSocket>.Some(tcpServer)
            tlsser = Option<TlsSocket>.Some(tlsServer)
            tlsServer.handshake()
            var buf2 = Array<UInt8>(sendSize, repeat: 10)
            tlsServer.write(buf2)
        }
        spawn {
            startServerHandshake()
        }
        while (!bound.compareAndSwap(1, 0)) {
            sleep(Duration.millisecond)
        }
        let pem = String.fromUtf8(readToEnd(File("./data/root_ecdsa.cer", Read)))
        var clientConf = TlsClientConfig()
        clientConf.verifyMode = CustomCA(X509Certificate.decodeFromPem(pem))
        var tcpClient = TcpSocket(IPSocketAddress(IPv6Address.localhost, port.load()))
        tcpClient.connect()
        var tlsClient = TlsSocket.client(tcpClient, session: None, clientConfig: clientConf)
        tlsClient.handshake()
        sleep(Duration.millisecond * 100)
        var buf1 = Array<UInt8>(sendSize, repeat: 0)
        var res = 0
        var n = 0
        while (res < sendSize) {
            var readLen1 = tlsClient.read(buf1)
            if (readLen1 > 0) {
                res += readLen1
                for (i in 0..readLen1) {
                    n += Int64(buf1[i])
                }
            } else {
                break
            }
        }
        @Expect(res, sendSize)
        @Expect(n, 10 * sendSize)
        sleep(Duration.millisecond * 1000)
        tlsClient.close()
        tcpClient.close()
        tlsser.getOrThrow().close()
        tcpser.getOrThrow().close()
    }
}
