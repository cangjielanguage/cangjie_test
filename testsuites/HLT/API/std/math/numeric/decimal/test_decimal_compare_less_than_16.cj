/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * This source file is part of the Cangjie project, licensed under Apache-2.0
 * with Runtime Library Exception.
 * 
 * See https://cangjie-lang.cn/pages/LICENSE for license information.
 */

// LEVEL: 1
// EXEC: %compiler %cmp_opt -o %n.%suffix %f %cmp_utest_opt
// RUN-EXEC: %run %run_opt %n.%suffix %run_utest_opt %run_args

import std.math.numeric.*
import std.math.*
import std.collection.*

@Test
class Test_decimal_compare_less_than_16 {
    @TestCase
    func test_decimal_compare_less_01(): Unit {
        let dec1 = Decimal(BigInt("-1"), -1000)
        let dec2 = Decimal.parse("0")
        @Expect(dec1 < dec2, true)
        @Expect(dec1.compare(dec2), Ordering.LT)
    }

    @TestCase
    func test_decimal_compare_less_02(): Unit {
        let dec1 = Decimal(BigInt("1010"), 3)
        let dec2 = Decimal(11i8)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_03(): Unit {
        let dec1 = Decimal(BigInt("-1"), -3)
        let dec2 = Decimal(-123i8)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_04(): Unit {
        let dec1 = Decimal(BigInt("300"), -2)
        let dec2 = Decimal(32533i16)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_05(): Unit {
        let dec1 = Decimal(BigInt("-400"), -2)
        let dec2 = Decimal(-32533i32)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_06(): Unit {
        let dec1 = Decimal(BigInt("8291472984"), -3)
        let dec2 = Decimal(8291472984001i64)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_07(): Unit {
        let dec1 = Decimal(BigInt("-2000"), 3)
        let dec2 = Decimal(IntNative(-1))
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_08(): Unit {
        let dec1 = Decimal(BigInt("-2000"), 3)
        let dec2 = Decimal(UIntNative(1))
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_09(): Unit {
        let dec1 = Decimal(BigInt("-2000"), 3)
        let dec2 = Decimal(-1.1111f32)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_10(): Unit {
        let dec1 = Decimal.parse("-100e-2")
        let dec2 = Decimal(-0.5f32)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_11(): Unit {
        let dec1 = Decimal.parse("100e-2")
        let dec2 = Decimal(2)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_12(): Unit {
        let dec1 = Decimal.parse("100000000000000000e-2")
        let dec2 = Decimal(1000000000000001u64)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_13(): Unit {
        let dec1 = Decimal.parse("-0.123456e-2")
        let dec2 = Decimal(-0.00123455f64)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_14(): Unit {
        let dec1 = Decimal.parse("-0.123456e-2")
        let dec2 = Decimal(-0.00123455f32)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_15(): Unit {
        let dec1 = Decimal(210i16)
        let dec2 = Decimal(211u8)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_16(): Unit {
        let dec1 = Decimal(-110i64)
        let dec2 = Decimal(0.1234556575f16)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_17(): Unit {
        let dec1 = Decimal(12300u16)
        let dec2 = Decimal(12300.13947f32)
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_18(): Unit {
        let dec1 = Decimal(IntNative(10000000000000000))
        let dec2 = Decimal(UIntNative(10000000000000001))
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_19(): Unit {
        let dec1 = Decimal(IntNative(-10000000000000000))
        let dec2 = Decimal(UIntNative(0))
        @Expect(dec1 < dec2, true)
    }

    @TestCase
    func test_decimal_compare_less_20(): Unit {
        let dec1 = Decimal(0.111111111111f16)
        let dec2 = Decimal(0.111111111111f64)
        @Expect(dec1 < dec2, true)
    }
}
